[   
    {
        "ins1CurCode":" public void keyStoreProviderIsUsedWhenCreatingKeyStore() throws Exception { Ssl ssl = new Ssl(); ssl.setKeyPassword(\"password\"); ssl.setKeyStore(\"src/test/resources/test.jks\"); ssl.setKeyStoreProvider(\"com.example.KeyStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); assertThatIllegalStateException() .isThrownBy(() -> customizer.getKeyManagerFactory(ssl, null)) .withCauseInstanceOf(NoSuchProviderException.class) .withMessageContaining(\"com.example.KeyStoreProvider\"); } ",
        "ins1PreCode":" public void keyStoreProviderIsUsedWhenCreatingKeyStore() throws Exception { Ssl ssl = new Ssl(); ssl.setKeyPassword(\"password\"); ssl.setKeyStore(\"src/test/resources/test.jks\"); ssl.setKeyStoreProvider(\"com.example.KeyStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); try { customizer.getKeyManagerFactory(ssl, null); fail(); } catch (IllegalStateException ex) { Throwable cause = ex.getCause(); assertThat(cause).isInstanceOf(NoSuchProviderException.class); assertThat(cause).hasMessageContaining(\"com.example.KeyStoreProvider\"); } } ",
        "ins2PreCode":" public void trustStoreProviderIsUsedWhenCreatingTrustStore() throws Exception { Ssl ssl = new Ssl(); ssl.setTrustStorePassword(\"password\"); ssl.setTrustStore(\"src/test/resources/test.jks\"); ssl.setTrustStoreProvider(\"com.example.TrustStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); try { customizer.getTrustManagerFactory(ssl, null); fail(); } catch (IllegalStateException ex) { Throwable cause = ex.getCause(); assertThat(cause).isInstanceOf(NoSuchProviderException.class); assertThat(cause).hasMessageContaining(\"com.example.TrustStoreProvider\"); } } ",
        "label":1
    },
    {
        "ins1CurCode":" void keyStoreProviderIsUsedWhenCreatingKeyStore() throws Exception { Ssl ssl = new Ssl(); ssl.setKeyPassword(\"password\"); ssl.setKeyStore(\"src/test/resources/test.jks\"); ssl.setKeyStoreProvider(\"com.example.KeyStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); assertThatIllegalStateException().isThrownBy(() -> customizer.getKeyManagerFactory(ssl, null)) .withCauseInstanceOf(NoSuchProviderException.class) .withMessageContaining(\"com.example.KeyStoreProvider\"); } ",
        "ins1PreCode":" public void keyStoreProviderIsUsedWhenCreatingKeyStore() throws Exception { Ssl ssl = new Ssl(); ssl.setKeyPassword(\"password\"); ssl.setKeyStore(\"src/test/resources/test.jks\"); ssl.setKeyStoreProvider(\"com.example.KeyStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); assertThatIllegalStateException().isThrownBy(() -> customizer.getKeyManagerFactory(ssl, null)) .withCauseInstanceOf(NoSuchProviderException.class) .withMessageContaining(\"com.example.KeyStoreProvider\"); } ",
        "ins2PreCode":" public void trustStoreProviderIsUsedWhenCreatingTrustStore() throws Exception { Ssl ssl = new Ssl(); ssl.setTrustStorePassword(\"password\"); ssl.setTrustStore(\"src/test/resources/test.jks\"); ssl.setTrustStoreProvider(\"com.example.TrustStoreProvider\"); SslServerCustomizer customizer = new SslServerCustomizer(ssl, null, null); assertThatIllegalStateException().isThrownBy(() -> customizer.getTrustManagerFactory(ssl, null)) .withCauseInstanceOf(NoSuchProviderException.class) .withMessageContaining(\"com.example.TrustStoreProvider\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() { GenericFactory<?> callbackInstance = mock(StringBuilderFactory.class); String argument = \"foo\"; InvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result.hasResult()).isFalse(); verifyZeroInteractions(callbackInstance); } ",
        "ins1PreCode":" public void callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() { GenericFactory<?> callbackInstance = mock(StringBuilderFactory.class); String argument = \"foo\"; InvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result.hasResult()).isFalse(); verifyZeroInteractions(callbackInstance); } ",
        "ins2PreCode":" public void callbackInvokeAndWhenLambdaMismatchShouldSwallowException() { GenericFactory<StringBuilder> callbackInstance = (s) -> { fail(\"Should not get here\"); return 123; }; String argument = \"foo\"; InvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result.hasResult()).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void preHandleWhenApplicationIdIsNullShouldReturnError() { this.interceptor = new ReactiveCloudFoundrySecurityInterceptor( this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange .from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()) .build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins1PreCode":" public void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception { this.interceptor = new ReactiveCloudFoundrySecurityInterceptor( this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange .from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()) .build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins2PreCode":" public void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() throws Exception { this.interceptor = new ReactiveCloudFoundrySecurityInterceptor( this.tokenValidator, null, \"my-app-id\"); MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest .get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void preHandleWhenApplicationIdIsNullShouldReturnError() { this.interceptor = new CloudFoundrySecurityInterceptor( this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange .from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()) .build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins1PreCode":" public void preHandleWhenApplicationIdIsNullShouldReturnError() { this.interceptor = new ReactiveCloudFoundrySecurityInterceptor( this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange .from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()) .build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins2PreCode":" public void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() { this.interceptor = new ReactiveCloudFoundrySecurityInterceptor( this.tokenValidator, null, \"my-app-id\"); MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest .get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat( ((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void preHandleWhenApplicationIdIsNullShouldReturnError() { this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins1PreCode":" public void preHandleWhenApplicationIdIsNullShouldReturnError() { this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, null); MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\") .header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "ins2PreCode":" public void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() { this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null, \"my-app-id\"); MockServerWebExchange request = MockServerWebExchange .from(MockServerHttpRequest.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build()); StepVerifier.create(this.interceptor.preHandle(request, \"/a\")) .consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()) .isEqualTo(Reason.SERVICE_UNAVAILABLE)) .verify(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void noFile() { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); String output = this.output.toString().trim(); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); } ",
        "ins1PreCode":" public void noFile() throws Exception { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); String output = this.output.toString().trim(); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); } ",
        "ins2PreCode":" public void noFile() throws Exception { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); String output = this.output.toString().trim(); Configuration configuration = this.loggingSystem.getConfiguration(); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); assertThat(configuration.getConfigurationSource().getFile()).isNotNull(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void noFile(CapturedOutput output) { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); } ",
        "ins1PreCode":" public void noFile() { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); String output = this.output.toString().trim(); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); } ",
        "ins2PreCode":" public void noFile() { this.loggingSystem.beforeInitialize(); this.logger.info(\"Hidden\"); this.loggingSystem.initialize(null, null, null); this.logger.info(\"Hello world\"); String output = this.output.toString().trim(); Configuration configuration = this.loggingSystem.getConfiguration(); assertThat(output).contains(\"Hello world\").doesNotContain(\"Hidden\"); assertThat(new File(tmpDir() + \"/spring.log\").exists()).isFalse(); assertThat(configuration.getConfigurationSource().getFile()).isNotNull(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void validateTokenWhenKidValidationSucceedsInTheSecondAttempt() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe .of(Mono.just(VALID_KEYS)); ReflectionTestUtils.setField(this.tokenValidator, \"cachedTokenKeys\", INVALID_KEYS); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()) .willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate( new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); assertThat(this.tokenValidator).hasFieldOrPropertyWithValue(\"cachedTokenKeys\", VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "ins1PreCode":" public void validateTokenWhenKidValidationSucceedsInTheSecondAttempt() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe .of(Mono.just(VALID_KEYS)); ReflectionTestUtils.setField(this.tokenValidator, \"cachedTokenKeys\", INVALID_KEYS); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()) .willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate( new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); Object cachedTokenKeys = ReflectionTestUtils.getField(this.tokenValidator, \"cachedTokenKeys\"); assertThat(cachedTokenKeys).isEqualTo(VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "ins2PreCode":" public void validateTokenWhenCacheIsEmptyShouldFetchTokenKeys() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe .of(Mono.just(VALID_KEYS)); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()) .willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate( new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); Object cachedTokenKeys = ReflectionTestUtils.getField(this.tokenValidator, \"cachedTokenKeys\"); assertThat(cachedTokenKeys).isEqualTo(VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void validateTokenWhenKidValidationSucceedsInTheSecondAttempt() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe.of(Mono.just(VALID_KEYS)); ReflectionTestUtils.setField(this.tokenValidator, \"cachedTokenKeys\", INVALID_KEYS); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()).willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate(new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); assertThat(this.tokenValidator).hasFieldOrPropertyWithValue(\"cachedTokenKeys\", VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "ins1PreCode":" public void validateTokenWhenKidValidationSucceedsInTheSecondAttempt() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe.of(Mono.just(VALID_KEYS)); ReflectionTestUtils.setField(this.tokenValidator, \"cachedTokenKeys\", INVALID_KEYS); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()).willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate(new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); assertThat(this.tokenValidator).hasFieldOrPropertyWithValue(\"cachedTokenKeys\", VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "ins2PreCode":" public void validateTokenWhenCacheIsEmptyShouldFetchTokenKeys() throws Exception { PublisherProbe<Map<String, String>> fetchTokenKeys = PublisherProbe.of(Mono.just(VALID_KEYS)); given(this.securityService.fetchTokenKeys()).willReturn(fetchTokenKeys.mono()); given(this.securityService.getUaaUrl()).willReturn(Mono.just(\"http://localhost:8080/uaa\")); String header = \"{\\\"alg\\\": \\\"RS256\\\", \\\"kid\\\": \\\"valid-key\\\",\\\"typ\\\": \\\"JWT\\\"}\"; String claims = \"{\\\"exp\\\": 2147483647, \\\"iss\\\": \\\"http://localhost:8080/uaa/oauth/token\\\", \\\"scope\\\": [\\\"actuator.read\\\"]}\"; StepVerifier .create(this.tokenValidator.validate(new Token(getSignedToken(header.getBytes(), claims.getBytes())))) .verifyComplete(); assertThat(this.tokenValidator).hasFieldOrPropertyWithValue(\"cachedTokenKeys\", VALID_KEYS); fetchTokenKeys.assertWasSubscribed(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.additional-location=classpath:enableprofile.properties,\" + \"classpath:enableother.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"other\"); String property = this.environment.getProperty(\"my.property\"); assertThat(property).isEqualTo(\"fromotherpropertiesfile\"); } ",
        "ins1PreCode":" public void loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation() throws Exception { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.additional-location=classpath:enableprofile.properties,\" + \"classpath:enableother.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"other\"); String property = this.environment.getProperty(\"my.property\"); assertThat(property).isEqualTo(\"fromotherpropertiesfile\"); } ",
        "ins2PreCode":" public void loadTwoPropertiesFilesWithProfilesAndSwitchOneOff() throws Exception { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.location=classpath:enabletwoprofiles.properties,\" + \"classpath:enableprofile.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"myprofile\"); String property = this.environment.getProperty(\"the.property\"); assertThat(property).isEqualTo(\"frompropertiesfile\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.additional-location=classpath:enableprofile.properties,\" + \"classpath:enableother.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"other\"); String property = this.environment.getProperty(\"my.property\"); assertThat(property).isEqualTo(\"fromotherpropertiesfile\"); } ",
        "ins1PreCode":" public void loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.additional-location=classpath:enableprofile.properties,\" + \"classpath:enableother.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"other\"); String property = this.environment.getProperty(\"my.property\"); assertThat(property).isEqualTo(\"fromotherpropertiesfile\"); } ",
        "ins2PreCode":" public void loadTwoPropertiesFilesWithProfilesAndSwitchOneOff() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.config.location=classpath:enabletwoprofiles.properties,\" + \"classpath:enableprofile.properties\"); this.initializer.postProcessEnvironment(this.environment, this.application); assertThat(this.environment.getActiveProfiles()).containsExactly(\"myprofile\"); String property = this.environment.getProperty(\"the.property\"); assertThat(property).isEqualTo(\"frompropertiesfile\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" private void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) { this.environment.setProperty(\"logging.file.total-size-cap\", sizeValue); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment); File file = new File(tmpDir(), \"logback-test.log\"); LogFile logFile = getLogFile(file.getPath(), null); initialize(loggingInitializationContext, null, logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\").toString()) .isEqualTo(expectedFileSize); } ",
        "ins1PreCode":" private void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) { MockEnvironment environment = new MockEnvironment(); environment.setProperty(\"logging.file.total-size-cap\", sizeValue); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment); File file = new File(tmpDir(), \"logback-test.log\"); LogFile logFile = getLogFile(file.getPath(), null); this.loggingSystem.initialize(loggingInitializationContext, null, logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\").toString()) .isEqualTo(expectedFileSize); } ",
        "ins2PreCode":" void testRollingFileNameProperty() { MockEnvironment environment = new MockEnvironment(); String rollingFile = \"my.log.%d{yyyyMMdd}.%i.gz\"; environment.setProperty(\"logging.pattern.rolling-file-name\", rollingFile); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment); File file = new File(tmpDir(), \"my.log\"); LogFile logFile = getLogFile(file.getPath(), null); this.loggingSystem.initialize(loggingInitializationContext, null, logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(getRollingPolicy().getFileNamePattern()).isEqualTo(rollingFile); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void bindToMapWithCustomConverter() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService, null); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"a,b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isNotNull(); assertThat(map.get(\"b\")).isNotNull(); } ",
        "ins1PreCode":" public void bindToMapWithCustomConverter() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"a,b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isNotNull(); assertThat(map.get(\"b\")).isNotNull(); } ",
        "ins2PreCode":" public void bindToMapWithCustomConverterAndChildElements() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"boom\"); source.put(\"foo.a\", \"a\"); source.put(\"foo.b\", \"b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isEqualTo(\"a\"); assertThat(map.get(\"b\")).isEqualTo(\"b\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void bindToMapWithCustomConverter() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService, null); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"a,b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isNotNull(); assertThat(map.get(\"b\")).isNotNull(); } ",
        "ins1PreCode":" public void bindToMapWithCustomConverter() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService, null); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"a,b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isNotNull(); assertThat(map.get(\"b\")).isNotNull(); } ",
        "ins2PreCode":" public void bindToMapWithCustomConverterAndChildElements() { DefaultConversionService conversionService = new DefaultConversionService(); conversionService.addConverter(new MapConverter()); Binder binder = new Binder(this.sources, null, conversionService, null); MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo\", \"boom\"); source.put(\"foo.a\", \"a\"); source.put(\"foo.b\", \"b\"); this.sources.add(source); Map<String, String> map = binder.bind(\"foo\", STRING_STRING_MAP).get(); assertThat(map.get(\"a\")).isEqualTo(\"a\"); assertThat(map.get(\"b\")).isEqualTo(\"b\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void liveReloadDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = getContext(() -> initializeAndRun(Config.class, properties)); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)); } ",
        "ins1PreCode":" public void liveReloadDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = getContext(() -> initializeAndRun(Config.class, properties)); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)); } ",
        "ins2PreCode":" public void restartDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.restart.enabled\", false); this.context = getContext(() -> initializeAndRun(Config.class, properties)); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(ClassPathFileSystemWatcher.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void liveReloadDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = initializeAndRun(Config.class, properties); this.thrown.expect(NoSuchBeanDefinitionException.class); this.context.getBean(OptionalLiveReloadServer.class); } ",
        "ins1PreCode":" public void liveReloadDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = initializeAndRun(Config.class, properties); this.thrown.expect(NoSuchBeanDefinitionException.class); this.context.getBean(OptionalLiveReloadServer.class); } ",
        "ins2PreCode":" public void restartDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.restart.enabled\", false); this.context = initializeAndRun(Config.class, properties); this.thrown.expect(NoSuchBeanDefinitionException.class); this.context.getBean(ClassPathFileSystemWatcher.class); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void liveReloadDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = initializeAndRun(Config.class, properties); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)); } ",
        "ins1PreCode":" public void liveReloadDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = initializeAndRun(Config.class, properties); this.thrown.expect(NoSuchBeanDefinitionException.class); this.context.getBean(OptionalLiveReloadServer.class); } ",
        "ins2PreCode":" public void restartDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.restart.enabled\", false); this.context = initializeAndRun(Config.class, properties); this.thrown.expect(NoSuchBeanDefinitionException.class); this.context.getBean(ClassPathFileSystemWatcher.class); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void liveReloadDisabled() throws Exception { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = getContext(() -> initializeAndRun(Config.class, properties)); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)); } ",
        "ins1PreCode":" public void liveReloadDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.livereload.enabled\", false); this.context = initializeAndRun(Config.class, properties); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)); } ",
        "ins2PreCode":" public void restartDisabled() { Map<String, Object> properties = new HashMap<>(); properties.put(\"spring.devtools.restart.enabled\", false); this.context = initializeAndRun(Config.class, properties); assertThatExceptionOfType(NoSuchBeanDefinitionException.class) .isThrownBy(() -> this.context.getBean(ClassPathFileSystemWatcher.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" public MeterFilter metricsHttpServerUriTagFilter() { String metricName = this.properties.getWeb().getServer().getRequest() .getMetricName(); MeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String .format(\"Reached the maximum number of URI tags for '%s'.\", metricName)); return MeterFilter.maximumAllowableTags(metricName, \"uri\", this.properties.getWeb().getServer().getMaxUriTags(), filter); } ",
        "ins1PreCode":" public MeterFilter metricsHttpServerUriTagFilter() { String metricName = this.properties.getWeb().getServer().getRequestsMetricName(); MeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String .format(\"Reached the maximum number of URI tags for '%s'.\", metricName)); return MeterFilter.maximumAllowableTags(metricName, \"uri\", this.properties.getWeb().getServer().getMaxUriTags(), filter); } ",
        "ins2PreCode":" public MeterFilter jerseyMetricsUriTagFilter() { String metricName = this.properties.getWeb().getServer().getRequestsMetricName(); MeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String .format(\"Reached the maximum number of URI tags for '%s'.\", metricName)); return MeterFilter.maximumAllowableTags(metricName, \"uri\", this.properties.getWeb().getServer().getMaxUriTags(), filter); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void createWithNameShouldAddMapping() { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases( ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "ins1PreCode":" public void createWithNameShouldAddMapping() throws Exception { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases( ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "ins2PreCode":" public void addAliasesFromNameShouldAddMapping() throws Exception { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases(); aliases.addAliases(ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void createWithNameShouldAddMapping() { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases( ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "ins1PreCode":" public void createWithNameShouldAddMapping() { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases( ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "ins2PreCode":" public void addAliasesFromNameShouldAddMapping() { ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases(); aliases.addAliases(ConfigurationPropertyName.of(\"foo\"), ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); assertThat(aliases.getAliases(ConfigurationPropertyName.of(\"foo\"))) .containsExactly(ConfigurationPropertyName.of(\"bar\"), ConfigurationPropertyName.of(\"baz\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void list() { assertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"SPRING_APPLICATION_JSON={\\\"foo\\\":[\\\"bar\\\",\\\"spam\\\"]}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEqualTo(\"spam\"); } ",
        "ins1PreCode":" public void list() { assertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"SPRING_APPLICATION_JSON={\\\"foo\\\":[\\\"bar\\\",\\\"spam\\\"]}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEqualTo(\"spam\"); } ",
        "ins2PreCode":" public void listOfObject() { assertThat(this.environment.resolvePlaceholders(\"${foo[0].bar:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"SPRING_APPLICATION_JSON={\\\"foo\\\":[{\\\"bar\\\":\\\"spam\\\"}]}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo[0].bar:}\")).isEqualTo(\"spam\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void customResourceLoaderIsUsedInNonWebApplication() { GenericApplicationContext context = new GenericApplicationContext(); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "ins1PreCode":" public void customResourceLoaderIsUsedInNonWebApplication() throws Exception { GenericApplicationContext context = new GenericApplicationContext(); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "ins2PreCode":" public void customResourceLoaderIsUsedInWebApplication() throws Exception { GenericWebApplicationContext context = new GenericWebApplicationContext( new MockServletContext()); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void customResourceLoaderIsUsedInNonWebApplication() { GenericApplicationContext context = new GenericApplicationContext(); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "ins1PreCode":" public void customResourceLoaderIsUsedInNonWebApplication() { GenericApplicationContext context = new GenericApplicationContext(); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "ins2PreCode":" public void customResourceLoaderIsUsedInWebApplication() { GenericWebApplicationContext context = new GenericWebApplicationContext(new MockServletContext()); ResourceLoader resourceLoader = mock(ResourceLoader.class); context.setResourceLoader(resourceLoader); this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files); this.resolver.getResource(\"foo.txt\"); verify(resourceLoader).getResource(\"foo.txt\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedWildcardPath() throws Exception { System.setProperty(\"loader.path\", \"jars/*\"); System.setProperty(\"loader.main\", \"demo.Application\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "ins1PreCode":" public void testUserSpecifiedWildcardPath() throws Exception { System.setProperty(\"loader.path\", \"jars/*\"); System.setProperty(\"loader.main\", \"demo.Application\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "ins2PreCode":" public void testUserSpecifiedJarPath() throws Exception { System.setProperty(\"loader.path\", \"jars/app.jar\"); System.setProperty(\"loader.main\", \"demo.Application\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/app.jar]\"); launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedWildcardPath() throws Exception { System.setProperty(\"loader.path\", \"jars/*\"); System.setProperty(\"loader.main\", \"demo.Application\"); this.launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(this.launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); this.launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "ins1PreCode":" void testUserSpecifiedWildcardPath() throws Exception { System.setProperty(\"loader.path\", \"jars/*\"); System.setProperty(\"loader.main\", \"demo.Application\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "ins2PreCode":" void testUserSpecifiedJarPath() throws Exception { System.setProperty(\"loader.path\", \"jars/app.jar\"); System.setProperty(\"loader.main\", \"demo.Application\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/app.jar]\"); launcher.launch(new String[0]); waitFor(\"Hello World\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getBinderProvidesBinder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "ins1PreCode":" void getBinderProvidesBinder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "ins2PreCode":" void getBinderWhenHasPlaceholderResolvesPlaceholder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"${other}\"); propertySource.setProperty(\"other\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getBinderProvidesBinder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapContext, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "ins1PreCode":" void getBinderProvidesBinder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "ins2PreCode":" void getBinderWhenHasPlaceholderResolvesPlaceholder() { MockPropertySource propertySource = new MockPropertySource(); propertySource.setProperty(\"test\", \"${other}\"); propertySource.setProperty(\"other\", \"springboot\"); ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(contributor)); Binder binder = contributors.getBinder(this.activationContext); assertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getResourceAsStream() throws Exception { ExplodedArchive archive = new ExplodedArchive(new File(\"src/test/resources/root\")); assertThat(archive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } ",
        "ins1PreCode":" public void getResourceAsStream() throws Exception { ExplodedArchive archive = new ExplodedArchive(new File(\"src/test/resources/root\")); assertThat(archive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } ",
        "ins2PreCode":" public void getResourceAsStreamNonRecursive() throws Exception { ExplodedArchive archive = new ExplodedArchive(new File(\"src/test/resources/root\"), false); assertThat(archive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getResourceAsStream() throws Exception { try (ExplodedArchive explodedArchive = new ExplodedArchive(new File(\"src/test/resources/root\"))) { assertThat(explodedArchive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { explodedArchive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } } ",
        "ins1PreCode":" void getResourceAsStream() throws Exception { ExplodedArchive archive = new ExplodedArchive(new File(\"src/test/resources/root\")); assertThat(archive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } ",
        "ins2PreCode":" void getResourceAsStreamNonRecursive() throws Exception { ExplodedArchive archive = new ExplodedArchive(new File(\"src/test/resources/root\"), false); assertThat(archive.getManifest()).isNotNull(); URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }); assertThat(loader.getResourceAsStream(\"META-INF/spring/application.xml\")).isNotNull(); loader.close(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) { Map<String, Object> errorAttributes = getErrorAttributes(request, options.isIncluded(Include.STACK_TRACE)); if (Boolean.TRUE.equals(this.includeException)) { options = options.including(Include.EXCEPTION); } if (!options.isIncluded(Include.EXCEPTION)) { errorAttributes.remove(\"exception\"); } if (!options.isIncluded(Include.STACK_TRACE)) { errorAttributes.remove(\"trace\"); } if (!options.isIncluded(Include.MESSAGE) && errorAttributes.get(\"message\") != null) { errorAttributes.put(\"message\", \"\"); } if (!options.isIncluded(Include.BINDING_ERRORS)) { errorAttributes.remove(\"errors\"); } return errorAttributes; } ",
        "ins1PreCode":" public Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) { Map<String, Object> errorAttributes = getErrorAttributes(request, options.isIncluded(Include.STACK_TRACE)); if (this.includeException != null) { options = options.including(Include.EXCEPTION); } if (!options.isIncluded(Include.EXCEPTION)) { errorAttributes.remove(\"exception\"); } if (!options.isIncluded(Include.STACK_TRACE)) { errorAttributes.remove(\"trace\"); } if (!options.isIncluded(Include.MESSAGE) && errorAttributes.get(\"message\") != null) { errorAttributes.put(\"message\", \"\"); } if (!options.isIncluded(Include.BINDING_ERRORS)) { errorAttributes.remove(\"errors\"); } return errorAttributes; } ",
        "ins2PreCode":" public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) { Map<String, Object> errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE)); if (this.includeException != null) { options = options.including(Include.EXCEPTION); } if (!options.isIncluded(Include.EXCEPTION)) { errorAttributes.remove(\"exception\"); } if (!options.isIncluded(Include.STACK_TRACE)) { errorAttributes.remove(\"trace\"); } if (!options.isIncluded(Include.MESSAGE) && errorAttributes.get(\"message\") != null) { errorAttributes.put(\"message\", \"\"); } if (!options.isIncluded(Include.BINDING_ERRORS)) { errorAttributes.remove(\"errors\"); } return errorAttributes; } ",
        "label":1
    },
    {
        "ins1CurCode":" public void hasSingleBeanWhenHasMultipleShouldFail() { this.context.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); assertThatExceptionOfType(AssertionError.class).isThrownBy( () -> assertThat(getAssert(this.context)).hasSingleBean(Foo.class)) .withMessageContaining(\"but found:\"); } ",
        "ins1PreCode":" public void hasSingleBeanWhenHasMultipleShouldFail() { this.context.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); this.thrown.expect(AssertionError.class); this.thrown.expectMessage(\"but found:\"); assertThat(getAssert(this.context)).hasSingleBean(Foo.class); } ",
        "ins2PreCode":" public void hasSingleBeanWhenInParentShouldFail() { this.parent.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); this.thrown.expect(AssertionError.class); this.thrown.expectMessage(\"but found:\"); assertThat(getAssert(this.context)).hasSingleBean(Foo.class); } ",
        "label":1
    },
    {
        "ins1CurCode":" void hasSingleBeanWhenHasMultipleShouldFail() { this.context.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); assertThatExceptionOfType(AssertionError.class) .isThrownBy(() -> assertThat(getAssert(this.context)).hasSingleBean(Foo.class)) .withMessageContaining(\"but found:\"); } ",
        "ins1PreCode":" public void hasSingleBeanWhenHasMultipleShouldFail() { this.context.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); assertThatExceptionOfType(AssertionError.class) .isThrownBy(() -> assertThat(getAssert(this.context)).hasSingleBean(Foo.class)) .withMessageContaining(\"but found:\"); } ",
        "ins2PreCode":" public void hasSingleBeanWhenInParentShouldFail() { this.parent.registerSingleton(\"foo\", Foo.class); this.context.registerSingleton(\"bar\", Foo.class); assertThatExceptionOfType(AssertionError.class) .isThrownBy(() -> assertThat(getAssert(this.context)).hasSingleBean(Foo.class)) .withMessageContaining(\"but found:\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void defaultPropertyAsFallback() { this.environment.getPropertySources() .addLast(new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", (Object) \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins1PreCode":" public void defaultPropertyAsFallback() throws Exception { this.environment.getPropertySources() .addLast(new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", (Object) \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins2PreCode":" public void defaultPropertyAsFallbackDuringFileParsing() throws Exception { this.environment.getPropertySources() .addLast(new MapPropertySource(\"defaultProperties\", Collections .singletonMap(\"spring.config.name\", (Object) \"testproperties\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"the.property\"); assertThat(property).isEqualTo(\"frompropertiesfile\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void defaultPropertyAsFallback() { this.environment.getPropertySources().addLast( new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", (Object) \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins1PreCode":" public void defaultPropertyAsFallback() { this.environment.getPropertySources().addLast( new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", (Object) \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins2PreCode":" public void defaultPropertyAsFallbackDuringFileParsing() { this.environment.getPropertySources().addLast(new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"spring.config.name\", (Object) \"testproperties\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"the.property\"); assertThat(property).isEqualTo(\"frompropertiesfile\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void defaultPropertyAsFallback() { this.environment.getPropertySources() .addLast(new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins1PreCode":" void defaultPropertyAsFallback() { this.environment.getPropertySources().addLast( new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"my.fallback\", (Object) \"foo\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"my.fallback\"); assertThat(property).isEqualTo(\"foo\"); } ",
        "ins2PreCode":" void defaultPropertyAsFallbackDuringFileParsing() { this.environment.getPropertySources().addLast(new MapPropertySource(\"defaultProperties\", Collections.singletonMap(\"spring.config.name\", (Object) \"testproperties\"))); this.initializer.postProcessEnvironment(this.environment, this.application); String property = this.environment.getProperty(\"the.property\"); assertThat(property).isEqualTo(\"frompropertiesfile\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void parseLevelsCaseInsensitive() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.outputCapture.toString()).contains(\"testatdebug\"); assertThat(this.outputCapture.toString()).contains(\"testattrace\"); } ",
        "ins1PreCode":" public void parseLevelsCaseInsensitive() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.outputCapture.toString()).contains(\"testatdebug\"); assertThat(this.outputCapture.toString()).contains(\"testattrace\"); } ",
        "ins2PreCode":" public void parseLevelsTrimsWhitespace() { TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot= trace \"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.outputCapture.toString()).contains(\"testatdebug\"); assertThat(this.outputCapture.toString()).contains(\"testattrace\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void parseLevelsCaseInsensitive() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.output.toString()).contains(\"testatdebug\"); assertThat(this.output.toString()).contains(\"testattrace\"); } ",
        "ins1PreCode":" public void parseLevelsCaseInsensitive() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.outputCapture.toString()).contains(\"testatdebug\"); assertThat(this.outputCapture.toString()).contains(\"testattrace\"); } ",
        "ins2PreCode":" public void parseLevelsTrimsWhitespace() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot= trace \"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.outputCapture.toString()).contains(\"testatdebug\"); assertThat(this.outputCapture.toString()).contains(\"testattrace\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void parseLevelsCaseInsensitive() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.output).contains(\"testatdebug\"); assertThat(this.output).contains(\"testattrace\"); } ",
        "ins1PreCode":" public void parseLevelsCaseInsensitive() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.output.toString()).contains(\"testatdebug\"); assertThat(this.output.toString()).contains(\"testattrace\"); } ",
        "ins2PreCode":" public void parseLevelsTrimsWhitespace() { addPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot= trace \"); this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()); this.logger.debug(\"testatdebug\"); this.logger.trace(\"testattrace\"); assertThat(this.output.toString()).contains(\"testatdebug\"); assertThat(this.output.toString()).contains(\"testattrace\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void bindToCollectionShouldAlsoCallSetterIfPresent() { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c\"); this.sources.add(source); ExampleCollectionBean result = this.binder .bind(\"foo\", ExampleCollectionBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"d\"); } ",
        "ins1PreCode":" public void bindToCollectionShouldAlsoCallSetterIfPresent() throws Exception { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c\"); this.sources.add(source); ExampleCollectionBean result = this.binder .bind(\"foo\", ExampleCollectionBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"d\"); } ",
        "ins2PreCode":" public void bindToCollectionWithNoDefaultConstructor() throws Exception { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c,c\"); this.sources.add(source); ExampleCustomBean result = this.binder.bind(\"foo\", ExampleCustomBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"c\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void bindToCollectionShouldAlsoCallSetterIfPresent() { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c\"); this.sources.add(source); ExampleCollectionBean result = this.binder.bind(\"foo\", ExampleCollectionBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"d\"); } ",
        "ins1PreCode":" public void bindToCollectionShouldAlsoCallSetterIfPresent() { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c\"); this.sources.add(source); ExampleCollectionBean result = this.binder.bind(\"foo\", ExampleCollectionBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"d\"); } ",
        "ins2PreCode":" public void bindToCollectionWithNoDefaultConstructor() { MockConfigurationPropertySource source = new MockConfigurationPropertySource(); source.put(\"foo.items\", \"a,b,c,c\"); this.sources.add(source); ExampleCustomNoDefaultConstructorBean result = this.binder .bind(\"foo\", ExampleCustomNoDefaultConstructorBean.class).get(); assertThat(result.getItems()).hasSize(4); assertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"c\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void exitWithExplicitCodeFromException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); try { application.run(); fail(\"Did not throw\"); } catch (IllegalStateException ex) { } verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins1PreCode":" public void exitWithExplicitCodeFromException() throws Exception { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); try { application.run(); fail(\"Did not throw\"); } catch (IllegalStateException ex) { } verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins2PreCode":" public void exitWithExplicitCodeFromMappedException() throws Exception { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( MappedExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); try { application.run(); fail(\"Did not throw\"); } catch (IllegalStateException ex) { } verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void exitWithExplicitCodeFromException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); assertThatIllegalStateException().isThrownBy(application::run); verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins1PreCode":" public void exitWithExplicitCodeFromException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); try { application.run(); fail(\"Did not throw\"); } catch (IllegalStateException ex) { } verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins2PreCode":" public void exitWithExplicitCodeFromMappedException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication( MappedExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); try { application.run(); fail(\"Did not throw\"); } catch (IllegalStateException ex) { } verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "label":1
    },
    {
        "ins1CurCode":" void exitWithExplicitCodeFromException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); assertThatIllegalStateException().isThrownBy(application::run); verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins1PreCode":" public void exitWithExplicitCodeFromException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); assertThatIllegalStateException().isThrownBy(application::run); verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "ins2PreCode":" public void exitWithExplicitCodeFromMappedException() { final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class); SpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) { @Override SpringBootExceptionHandler getSpringBootExceptionHandler() { return handler; } }; ExitCodeListener listener = new ExitCodeListener(); application.addListeners(listener); application.setWebApplicationType(WebApplicationType.NONE); assertThatIllegalStateException().isThrownBy(application::run); verify(handler).registerExitCode(11); assertThat(listener.getExitCode()).isEqualTo(11); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins1PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached() { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(this.output.toString()).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins2PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached() { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(this.output.toString()).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput output) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(output) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins1PreCode":" void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins2PreCode":" void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins1PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins2PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached(CapturedOutput capturedOutput) { this.contextRunner.withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\").run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(capturedOutput) .doesNotContain(\"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached() { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(this.output.toString()).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\") .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins1PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached() { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(this.output.toString()).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\"); assertThat(this.output.toString()) .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "ins2PreCode":" public void shouldNotDenyNorLogIfMaxUrisIsNotReached() { this.contextRunner .withPropertyValues(\"management.metrics.web.client.max-uri-tags=5\") .run((context) -> { MeterRegistry registry = getInitializedMeterRegistry(context); assertThat(registry.get(\"http.client.requests\").meters()).hasSize(3); assertThat(this.output.toString()).doesNotContain( \"Reached the maximum number of URI tags for 'http.client.requests'.\"); assertThat(this.output.toString()) .doesNotContain(\"Are you using 'uriVariables'?\"); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void fixedRateScheduledMethodIsReported() { run(FixedRateScheduledMethod.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getCustom()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks .getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(4); assertThat(description.getInterval()).isEqualTo(3); assertThat(description.getRunnable().getTarget()) .isEqualTo(FixedRateScheduledMethod.class.getName() + \".fixedRate\"); }); } ",
        "ins1PreCode":" public void fixedRateScheduledMethodIsReported() { run(FixedRateScheduledMethod.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks .getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(4); assertThat(description.getInterval()).isEqualTo(3); assertThat(description.getRunnable().getTarget()) .isEqualTo(FixedRateScheduledMethod.class.getName() + \".fixedRate\"); }); } ",
        "ins2PreCode":" public void fixedRateTriggerIsReported() { run(FixedRateTriggerTask.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks .getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(3000); assertThat(description.getInterval()).isEqualTo(2000); assertThat(description.getRunnable().getTarget()) .isEqualTo(FixedRateTriggerRunnable.class.getName()); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void fixedRateScheduledMethodIsReported() { run(FixedRateScheduledMethod.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getCustom()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks.getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(4); assertThat(description.getInterval()).isEqualTo(3); assertThat(description.getRunnable().getTarget()) .isEqualTo(FixedRateScheduledMethod.class.getName() + \".fixedRate\"); }); } ",
        "ins1PreCode":" public void fixedRateScheduledMethodIsReported() { run(FixedRateScheduledMethod.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getCustom()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks.getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(4); assertThat(description.getInterval()).isEqualTo(3); assertThat(description.getRunnable().getTarget()) .isEqualTo(FixedRateScheduledMethod.class.getName() + \".fixedRate\"); }); } ",
        "ins2PreCode":" public void fixedRateTriggerIsReported() { run(FixedRateTriggerTask.class, (tasks) -> { assertThat(tasks.getCron()).isEmpty(); assertThat(tasks.getFixedDelay()).isEmpty(); assertThat(tasks.getCustom()).isEmpty(); assertThat(tasks.getFixedRate()).hasSize(1); FixedRateTaskDescription description = (FixedRateTaskDescription) tasks.getFixedRate().get(0); assertThat(description.getInitialDelay()).isEqualTo(3000); assertThat(description.getInterval()).isEqualTo(2000); assertThat(description.getRunnable().getTarget()).isEqualTo(FixedRateTriggerRunnable.class.getName()); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void traceForNotFoundResponseHas404Status() { this.contextRunner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get().uri(\"/\") .exchange().expectStatus().isNotFound(); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()) .isEqualTo(404); }); } ",
        "ins1PreCode":" public void traceForNotFoundResponseHas404Status() { ReactiveWebApplicationContextRunner runner = new ReactiveWebApplicationContextRunner() .withUserConfiguration(Config.class); runner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get().uri(\"/\") .exchange().expectStatus().isNotFound(); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()) .isEqualTo(404); }); } ",
        "ins2PreCode":" public void traceForMonoErrorWithRuntimeExceptionHas500Status() { ReactiveWebApplicationContextRunner runner = new ReactiveWebApplicationContextRunner() .withUserConfiguration(Config.class); runner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get() .uri(\"/mono-error\").exchange().expectStatus() .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()) .isEqualTo(500); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void traceForNotFoundResponseHas404Status() { this.contextRunner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get().uri(\"/\").exchange().expectStatus() .isNotFound(); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(404); }); } ",
        "ins1PreCode":" public void traceForNotFoundResponseHas404Status() { this.contextRunner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get().uri(\"/\").exchange().expectStatus() .isNotFound(); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(404); }); } ",
        "ins2PreCode":" public void traceForMonoErrorWithRuntimeExceptionHas500Status() { this.contextRunner.run((context) -> { WebTestClient.bindToApplicationContext(context).build().get().uri(\"/mono-error\").exchange().expectStatus() .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR); HttpTraceRepository repository = context.getBean(HttpTraceRepository.class); assertThat(repository.findAll()).hasSize(1); assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(500); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner .withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run(context -> { CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "ins1PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { TestPropertyValues .of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .applyTo(this.context); setupContext(); this.context.refresh(); CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = this.context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); } ",
        "ins2PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { TestPropertyValues .of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .applyTo(this.context); this.context.refresh(); CloudFoundryWebEndpointServletHandlerMapping handlerMapping = this.context .getBean(\"cloudFoundryWebEndpointServletHandlerMapping\", CloudFoundryWebEndpointServletHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run((context) -> { CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils.getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "ins1PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run((context) -> { CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils.getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "ins2PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run((context) -> { CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils.getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { TestPropertyValues .of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .applyTo(this.context); setupContext(); this.context.refresh(); CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = this.context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); } ",
        "ins1PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() throws Exception { TestPropertyValues .of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .applyTo(this.context); setupContext(); this.context.refresh(); CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = this.context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); } ",
        "ins2PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() throws Exception { TestPropertyValues .of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .applyTo(this.context); this.context.refresh(); CloudFoundryWebEndpointServletHandlerMapping handlerMapping = this.context .getBean(\"cloudFoundryWebEndpointServletHandlerMapping\", CloudFoundryWebEndpointServletHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\").run((context) -> { CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context .getBean(\"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils .getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "ins1PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner .withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run(context -> { CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context.getBean( \"cloudFoundryWebFluxEndpointHandlerMapping\", CloudFoundryWebFluxEndpointHandlerMapping.class); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "ins2PreCode":" public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() { this.contextRunner .withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\") .run(context -> { CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context); Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, \"securityInterceptor\"); Object interceptorSecurityService = ReflectionTestUtils .getField(securityInterceptor, \"cloudFoundrySecurityService\"); assertThat(interceptorSecurityService).isNull(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void convertShouldConvertElements() { Data data = new Data(); data.type = new int[] { 1, 2, 3 }; String converted = (String) new ApplicationConversionService().convert(data.type, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, \"type\"), 0), TypeDescriptor.valueOf(String.class)); assertThat(converted).isEqualTo(\"1.2.3\"); } ",
        "ins1PreCode":" public void convertShouldConvertElements() { if (this.conversionService instanceof ApplicationConversionService) { Data data = new Data(); data.type = new int[] { 1, 2, 3 }; String converted = (String) this.conversionService.convert(data.type, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, \"type\"), 0), TypeDescriptor.valueOf(String.class)); assertThat(converted).isEqualTo(\"1.2.3\"); } } ",
        "ins2PreCode":" public void convertShouldConvertElements() { if (this.conversionService instanceof ApplicationConversionService) { Data data = new Data(); data.type = Arrays.asList(1, 2, 3); String converted = (String) this.conversionService.convert(data.type, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, \"type\"), 0), TypeDescriptor.valueOf(String.class)); assertThat(converted).isEqualTo(\"1.2.3\"); } } ",
        "label":1
    },
    {
        "ins1CurCode":" void constructorParameterPropertyWithDescription() throws IOException { process(ImmutableSimpleProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(ImmutableSimpleProperties.class); ConstructorParameterPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"theName\"); assertItemMetadata(metadataEnv, property).isProperty() .hasDescription(\"The name of this simple properties.\"); }); } ",
        "ins1PreCode":" public void constructorParameterPropertyWithDescription() throws IOException { process(ImmutableSimpleProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(ImmutableSimpleProperties.class); ConstructorParameterPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"theName\"); assertItemMetadata(metadataEnv, property).isProperty() .hasDescription(\"The name of this simple properties.\"); }); } ",
        "ins2PreCode":" public void constructorParameterPropertyWithDefaultValue() throws IOException { process(ImmutableSimpleProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(ImmutableSimpleProperties.class); ConstructorParameterPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"theName\"); assertItemMetadata(metadataEnv, property).isProperty().hasDefaultValue(\"boot\"); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void globalError() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.chain = new TestFilterChain( (request, response, chain) -> response.sendError(400, \"BAD\")); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/error\"); } ",
        "ins1PreCode":" public void globalError() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { ((HttpServletResponse) response).sendError(400, \"BAD\"); super.doFilter(request, response); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/error\"); } ",
        "ins2PreCode":" public void statusError() throws Exception { this.filter.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, \"/400\")); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { ((HttpServletResponse) response).sendError(400, \"BAD\"); super.doFilter(request, response); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/400\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void globalError() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.chain = new TestFilterChain((request, response, chain) -> response.sendError(400, \"BAD\")); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/error\"); } ",
        "ins1PreCode":" public void globalError() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.chain = new TestFilterChain((request, response, chain) -> response.sendError(400, \"BAD\")); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/error\"); } ",
        "ins2PreCode":" public void statusError() throws Exception { this.filter.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, \"/400\")); this.chain = new TestFilterChain((request, response, chain) -> response.sendError(400, \"BAD\")); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(400); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/400\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, SecurityFilterChain.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); assertThat(excludes(filter, ExampleModule.class)).isFalse(); } ",
        "ins1PreCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); assertThat(excludes(filter, ExampleModule.class)).isFalse(); } ",
        "ins2PreCode":" void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); assertThat(excludes(filter, ExampleModule.class)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins1PreCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins2PreCode":" public void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); assertThat(excludes(filter, ExampleModule.class)).isFalse(); } ",
        "ins1PreCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); } ",
        "ins2PreCode":" void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); assertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse(); } ",
        "ins1PreCode":" void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins2PreCode":" void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins1PreCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); } ",
        "ins2PreCode":" public void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); } ",
        "ins1PreCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins2PreCode":" public void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse(); } ",
        "ins1PreCode":" public void matchWhenHasNoControllers() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithNoControllers.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isFalse(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); } ",
        "ins2PreCode":" public void matchWhenHasController() throws Exception { WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter( WithController.class); assertThat(excludes(filter, Controller1.class)).isFalse(); assertThat(excludes(filter, Controller2.class)).isTrue(); assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse(); assertThat(excludes(filter, ExampleWeb.class)).isFalse(); assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse(); assertThat(excludes(filter, ExampleService.class)).isTrue(); assertThat(excludes(filter, ExampleRepository.class)).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void whenJarHasAPlusInItsPathConnectionJarFileMatchesOriginalJarFile(@TempDir File tempDir) throws Exception { File testJar = new File(tempDir, \"t+e+s+t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); try { assertThat(connection.getJarFile().getRootJarFile().getFile()).isEqualTo(testJar); } finally { connection.getJarFile().close(); } } ",
        "ins1PreCode":" public void whenJarHasAPlusInItsPathConnectionJarFileMatchesOriginalJarFile() throws Exception { File testJar = this.temporaryFolder.newFile(\"t+e+s+t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); try { assertThat(connection.getJarFile().getRootJarFile().getFile()).isEqualTo(testJar); } finally { connection.getJarFile().close(); } } ",
        "ins2PreCode":" public void whenJarHasASpaceInItsPathConnectionJarFileMatchesOriginalJarFile() throws Exception { File testJar = this.temporaryFolder.newFile(\"t e s t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); try { assertThat(connection.getJarFile().getRootJarFile().getFile()).isEqualTo(testJar); } finally { connection.getJarFile().close(); } } ",
        "label":1
    },
    {
        "ins1CurCode":" void whenJarHasAPlusInItsPathConnectionJarFileMatchesOriginalJarFile(@TempDir File tempDir) throws Exception { File testJar = new File(tempDir, \"t+e+s+t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); JarFile jarFile = JarFileWrapper.unwrap(connection.getJarFile()); try { assertThat(jarFile.getRootJarFile().getFile()).isEqualTo(testJar); } finally { jarFile.close(); } } ",
        "ins1PreCode":" void whenJarHasAPlusInItsPathConnectionJarFileMatchesOriginalJarFile(@TempDir File tempDir) throws Exception { File testJar = new File(tempDir, \"t+e+s+t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); try { assertThat(connection.getJarFile().getRootJarFile().getFile()).isEqualTo(testJar); } finally { connection.getJarFile().close(); } } ",
        "ins2PreCode":" void whenJarHasASpaceInItsPathConnectionJarFileMatchesOriginalJarFile(@TempDir File tempDir) throws Exception { File testJar = new File(tempDir, \"t e s t.jar\"); TestJarCreator.createTestJar(testJar); URL url = new URL(null, \"jar:\" + testJar.toURI().toURL() + \"!/nested.jar!/3.dat\", this.handler); JarURLConnection connection = (JarURLConnection) url.openConnection(); try { assertThat(connection.getJarFile().getRootJarFile().getFile()).isEqualTo(testJar); } finally { connection.getJarFile().close(); } } ",
        "label":1
    },
    {
        "ins1CurCode":" public void ignoresIfMissingSecretFromRequest() throws Exception { this.context = getContext( () -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins1PreCode":" public void ignoresIfMissingSecretFromRequest() throws Exception { loadContext(\"spring.devtools.remote.secret:supersecret\"); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins2PreCode":" public void ignoresInvalidSecretInRequest() throws Exception { loadContext(\"spring.devtools.remote.secret:supersecret\"); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"invalid\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "label":1
    },
    {
        "ins1CurCode":" void ignoresIfMissingSecretFromRequest() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins1PreCode":" public void ignoresIfMissingSecretFromRequest() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins2PreCode":" public void ignoresInvalidSecretInRequest() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"invalid\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "label":1
    },
    {
        "ins1CurCode":" void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner .withPropertyValues(\"management.metrics.export.newrelic.api-key=abcde\", \"management.metrics.export.newrelic.account-id=abcde\") .withUserConfiguration(BaseConfiguration.class).run((context) -> { NewRelicMeterRegistry registry = context.getBean(NewRelicMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "ins1PreCode":" public void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner .withPropertyValues(\"management.metrics.export.newrelic.api-key=abcde\", \"management.metrics.export.newrelic.account-id=abcde\") .withUserConfiguration(BaseConfiguration.class).run((context) -> { NewRelicMeterRegistry registry = context.getBean(NewRelicMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "ins2PreCode":" public void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> { AtlasMeterRegistry registry = context.getBean(AtlasMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( GitProperties properties, ObjectProvider<InfoContributor> infoContributors) { List<InfoContributor> contributors = infoContributors.orderedStream() .map((infoContributor) -> { if (infoContributor instanceof GitInfoContributor) { return new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL); } return infoContributor; }).collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "ins1PreCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( InfoEndpoint infoEndpoint, GitProperties properties) { List<InfoContributor> existingContributors = infoEndpoint.getInfoContributors(); List<InfoContributor> contributors = existingContributors.stream() .map((infoContributor) -> { if (infoContributor instanceof GitInfoContributor) { return new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL); } return infoContributor; }).collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "ins2PreCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( InfoEndpoint infoEndpoint, GitProperties properties) { List<InfoContributor> existingContributors = infoEndpoint.getInfoContributors(); List<InfoContributor> contributors = existingContributors.stream() .map((infoContributor) -> { if (infoContributor instanceof GitInfoContributor) { return new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL); } return infoContributor; }).collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "label":1
    },
    {
        "ins1CurCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( GitProperties properties, ObjectProvider<InfoContributor> infoContributors) { List<InfoContributor> contributors = infoContributors.orderedStream() .map((infoContributor) -> (infoContributor instanceof GitInfoContributor) ? new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL) : infoContributor) .collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "ins1PreCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( GitProperties properties, ObjectProvider<InfoContributor> infoContributors) { List<InfoContributor> contributors = infoContributors.orderedStream() .map((infoContributor) -> { if (infoContributor instanceof GitInfoContributor) { return new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL); } return infoContributor; }).collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "ins2PreCode":" public CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension( GitProperties properties, ObjectProvider<InfoContributor> infoContributors) { List<InfoContributor> contributors = infoContributors.orderedStream() .map((infoContributor) -> { if (infoContributor instanceof GitInfoContributor) { return new GitInfoContributor(properties, InfoPropertiesInfoContributor.Mode.FULL); } return infoContributor; }).collect(Collectors.toList()); return new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void nonTransitiveAdd() { this.dependencyCustomizer.add(\"spring-boot-starter-logging\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", null, null, false); } ",
        "ins1PreCode":" public void nonTransitiveAdd() { this.dependencyCustomizer.add(\"spring-boot-starter-logging\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", null, null, false); } ",
        "ins2PreCode":" public void fullyCustomized() { this.dependencyCustomizer.add(\"spring-boot-starter-logging\", \"my-classifier\", \"my-type\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", \"my-classifier\", \"my-type\", false); } ",
        "label":1
    },
    {
        "ins1CurCode":" void nonTransitiveAdd() { given(this.resolver.getGroupId(\"spring-boot-starter-logging\")).willReturn(\"org.springframework.boot\"); given(this.resolver.getArtifactId(\"spring-boot-starter-logging\")).willReturn(\"spring-boot-starter-logging\"); given(this.resolver.getVersion(\"spring-boot-starter-logging\")).willReturn(\"1.2.3\"); this.dependencyCustomizer.add(\"spring-boot-starter-logging\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", null, null, false); } ",
        "ins1PreCode":" void nonTransitiveAdd() { this.dependencyCustomizer.add(\"spring-boot-starter-logging\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", null, null, false); } ",
        "ins2PreCode":" void fullyCustomized() { this.dependencyCustomizer.add(\"spring-boot-starter-logging\", \"my-classifier\", \"my-type\", false); List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)); assertThat(grabAnnotations).hasSize(1); AnnotationNode annotationNode = grabAnnotations.get(0); assertGrabAnnotation(annotationNode, \"org.springframework.boot\", \"spring-boot-starter-logging\", \"1.2.3\", \"my-classifier\", \"my-type\", false); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void getLoggingConfiguration() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem .getLoggerConfiguration(getClass().getName()); assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "ins1PreCode":" public void getLoggingConfiguration() throws Exception { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem .getLoggerConfiguration(getClass().getName()); assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "ins2PreCode":" public void getLoggingConfiguration() throws Exception { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem .getLoggerConfiguration(getClass().getName()); assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getLoggingConfiguration() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()); assertThat(configuration) .isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "ins1PreCode":" public void getLoggingConfiguration() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()); assertThat(configuration) .isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "ins2PreCode":" public void getLoggingConfiguration() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()); assertThat(configuration) .isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void javaBeanMetadataSimpleProperty() throws IOException { process(SimpleTypeProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(SimpleTypeProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"myString\"); assertItemMetadata(metadataEnv, property).isProperty().hasName(\"test.my-string\").hasType(String.class) .hasSourceType(SimpleTypeProperties.class).hasNoDescription().isNotDeprecated(); }); } ",
        "ins1PreCode":" public void javaBeanMetadataSimpleProperty() throws IOException { process(SimpleTypeProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(SimpleTypeProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"myString\"); assertItemMetadata(metadataEnv, property).isProperty().hasName(\"test.my-string\").hasType(String.class) .hasSourceType(SimpleTypeProperties.class).hasNoDescription().isNotDeprecated(); }); } ",
        "ins2PreCode":" public void lombokMetadataSimpleProperty() throws IOException { process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class); LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"description\"); assertItemMetadata(metadataEnv, property).isProperty().hasName(\"test.description\").hasType(String.class) .hasSourceType(LombokSimpleProperties.class).hasNoDescription().isNotDeprecated(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void setCookieHeaderIsNotIncludedByDefault() { HttpTrace trace = new HttpTrace(createRequest()); new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(HttpHeaders.SET_COOKIE, Arrays.asList(\"test=test\"))), null, null); assertThat(trace.getResponse().getHeaders()).isEmpty(); } ",
        "ins1PreCode":" public void setCookieHeaderIsNotIncludedByDefault() { HttpTrace trace = new HttpTrace(createRequest()); new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(HttpHeaders.SET_COOKIE, Arrays.asList(\"test=test\"))), null, null); assertThat(trace.getResponse().getHeaders()).isEmpty(); } ",
        "ins2PreCode":" public void mixedCaseSetCookieHeaderIsNotIncludedByDefault() { HttpTrace trace = new HttpTrace(createRequest()); new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(mixedCase(HttpHeaders.SET_COOKIE), Arrays.asList(\"test=test\"))), null, null); assertThat(trace.getResponse().getHeaders()).isEmpty(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count()) .isEqualTo(1); } ",
        "ins1PreCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count()) .isEqualTo(1); } ",
        "ins2PreCode":" public void filterWhenExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException()); this.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count()) .isEqualTo(1); } ",
        "label":1
    },
    {
        "ins1CurCode":" void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(5)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count()) .isEqualTo(1); } ",
        "ins1PreCode":" void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count()) .isEqualTo(1); } ",
        "ins2PreCode":" void filterWhenExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException()); this.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count()) .isEqualTo(1); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, (t) -> Mono.empty()).block(); assertThat( this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\") .timer().count()).isEqualTo(1); } ",
        "ins1PreCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")) .build(); ExchangeFunction errorExchange = r -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, t -> Mono.empty()).block(); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer() .count()).isEqualTo(1); } ",
        "ins2PreCode":" public void filterWhenExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest .create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")) .build(); ExchangeFunction exchange = r -> Mono.error(new IllegalArgumentException()); this.filterFunction.filter(request, exchange) .onErrorResume(IllegalArgumentException.class, t -> Mono.empty()).block(); assertThat(this.registry.get(\"http.client.requests\") .tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer() .count()).isEqualTo(1); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat( this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\") .timer().count()).isEqualTo(1); } ",
        "ins1PreCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, (t) -> Mono.empty()).block(); assertThat( this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\") .timer().count()).isEqualTo(1); } ",
        "ins2PreCode":" public void filterWhenExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException()); this.filterFunction.filter(request, exchange) .onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty()) .block(); assertThat(this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\") .timer().count()).isEqualTo(1); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat( this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\") .timer().count()).isEqualTo(1); } ",
        "ins1PreCode":" public void filterWhenIoExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction errorExchange = (r) -> Mono.error(new IOException()); this.filterFunction.filter(request, errorExchange) .onErrorResume(IOException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat( this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\") .timer().count()).isEqualTo(1); } ",
        "ins2PreCode":" public void filterWhenExceptionThrownShouldRecordTimer() { ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\")).build(); ExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException()); this.filterFunction.filter(request, exchange) .onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty()) .block(Duration.ofSeconds(30)); assertThat(this.registry .get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\") .timer().count()).isEqualTo(1); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void ofNameWhenDoubleRunOnAndAssociative() { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[bar]baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "ins1PreCode":" public void ofNameWhenDoubleRunOnAndAssociative() throws Exception { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[bar]baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "ins2PreCode":" public void ofNameWhenDoubleDotAndAssociative() throws Exception { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo.[bar].baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void ofNameWhenDoubleRunOnAndAssociative() { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[bar]baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "ins1PreCode":" public void ofNameWhenDoubleRunOnAndAssociative() { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[bar]baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "ins2PreCode":" public void ofNameWhenDoubleDotAndAssociative() { ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo.[bar].baz\"); assertThat(name.toString()).isEqualTo(\"foo[bar].baz\"); assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\"); assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"bar\"); assertThat(name.getElement(2, Form.ORIGINAL)).isEqualTo(\"baz\"); assertThat(name.isIndexed(0)).isFalse(); assertThat(name.isIndexed(1)).isTrue(); assertThat(name.isIndexed(2)).isFalse(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void autoConfiguredCacheManagerIsInstrumented() { this.contextRunner.withPropertyValues(\"spring.cache.type=caffeine\", \"spring.cache.cache-names=cache1,cache2\") .run((context) -> { MeterRegistry registry = context.getBean(MeterRegistry.class); registry.get(\"cache.gets\").tags(\"name\", \"cache1\").tags(\"cacheManager\", \"cacheManager\").meter(); registry.get(\"cache.gets\").tags(\"name\", \"cache2\").tags(\"cacheManager\", \"cacheManager\").meter(); }); } ",
        "ins1PreCode":" public void autoConfiguredCacheManagerIsInstrumented() { this.contextRunner.withPropertyValues(\"spring.cache.type=caffeine\", \"spring.cache.cache-names=cache1,cache2\") .run((context) -> { MeterRegistry registry = context.getBean(MeterRegistry.class); registry.get(\"cache.gets\").tags(\"name\", \"cache1\").tags(\"cacheManager\", \"cacheManager\").meter(); registry.get(\"cache.gets\").tags(\"name\", \"cache2\").tags(\"cacheManager\", \"cacheManager\").meter(); }); } ",
        "ins2PreCode":" public void autoConfiguredNonSupportedCacheManagerIsIgnored() { this.contextRunner.withPropertyValues(\"spring.cache.type=simple\", \"spring.cache.cache-names=cache1,cache2\") .run((context) -> { MeterRegistry registry = context.getBean(MeterRegistry.class); assertThat(registry.find(\"cache.gets\").tags(\"name\", \"cache1\").tags(\"cacheManager\", \"cacheManager\") .meter()).isNull(); assertThat(registry.find(\"cache.gets\").tags(\"name\", \"cache2\").tags(\"cacheManager\", \"cacheManager\") .meter()).isNull(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void responseIsCommittedWhenRequestIsAsyncAndStatusIs400Plus() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.request.setAsyncStarted(true); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); response.sendError(400, \"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()) .isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "ins1PreCode":" public void responseIsCommittedWhenRequestIsAsyncAndStatusIs400Plus() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.request.setAsyncStarted(true); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { super.doFilter(request, response); ((HttpServletResponse) response).sendError(400, \"BAD\"); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()) .isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "ins2PreCode":" public void responseIsCommittedWhenExceptionIsThrownDuringAsyncDispatch() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); setUpAsyncDispatch(); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { super.doFilter(request, response); throw new RuntimeException(\"BAD\"); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()) .isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void responseIsCommittedWhenRequestIsAsyncAndStatusIs400Plus() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.request.setAsyncStarted(true); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); response.sendError(400, \"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()).isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "ins1PreCode":" public void responseIsCommittedWhenRequestIsAsyncAndStatusIs400Plus() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); this.request.setAsyncStarted(true); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); response.sendError(400, \"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()).isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "ins2PreCode":" public void responseIsCommittedWhenExceptionIsThrownDuringAsyncDispatch() throws Exception { this.filter.addErrorPages(new ErrorPage(\"/error\")); setUpAsyncDispatch(); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); throw new RuntimeException(\"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(this.chain.getRequest()).isEqualTo(this.request); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse()).isEqualTo(this.response); assertThat(this.response.isCommitted()).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void periodSeparated() { assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.application.json={\\\"foo\\\":\\\"bar\\\"}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\"); } ",
        "ins1PreCode":" public void periodSeparated() { assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.application.json={\\\"foo\\\":\\\"bar\\\"}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\"); } ",
        "ins2PreCode":" public void envVar() { assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty(); TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"SPRING_APPLICATION_JSON={\\\"foo\\\":\\\"bar\\\"}\"); this.processor.postProcessEnvironment(this.environment, null); assertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-role\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-end-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(final Object multiplicityOwner, final String text) { try { parseMultiplicity(multiplicityOwner, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.multiplicity\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(final Object multiplicityOwner, final String text) { try { setMultiplicity(multiplicityOwner, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.multiplicity\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(final Object multiplicityOwner, final String text) { try { parseMultiplicity(multiplicityOwner, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.multiplicity\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-role\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public Object buildNode(Object elementType, Object container, String property, Defaults defaults) { Object element = buildNode(elementType, container, property); if (defaults != null) { final Object type = defaults.getDefaultType(elementType); final String name = defaults.getDefaultName(elementType); if (type != null) { modelImpl.getCoreHelper().setType(element, type); } if (name != null) { modelImpl.getCoreHelper().setName(element, name); } else { modelImpl.getCoreHelper().setName(element, \"\"); } } return element; } ",
        "ins1PreCode":" public Object buildNode(Object elementType, Object container, String property, Defaults defaults) { Object element = buildNode(elementType, container, property); if (defaults != null) { final Object type = defaults.getDefaultType(elementType); final String name = defaults.getDefaultName(elementType); if (type != null) { modelImpl.getCoreHelper().setType(element, type); } if (name != null) { modelImpl.getCoreHelper().setName(element, name); } } return element; } ",
        "ins2PreCode":" public Object buildNode(Object elementType, Object container, String property, Defaults defaults) { Object element = buildNode(elementType, container, property); if (defaults != null) { final Object type = defaults.getDefaultType(elementType); final String name = defaults.getDefaultName(elementType); if (type != null) { modelImpl.getCoreHelper().setType(element, type); } if (name != null) { modelImpl.getCoreHelper().setName(element, name); } } return element; } ",
        "label":0
    },
    {
        "ins1CurCode":" private static List<File> getList(File file) { List<File> results = new ArrayList<File>(); List<File> toDoDirectories = new LinkedList<File>(); Set<File> seenDirectories = new HashSet<File>(); toDoDirectories.add(file); while (!toDoDirectories.isEmpty()) { File curDir = toDoDirectories.remove(0); if (!curDir.isDirectory()) { results.add(curDir); continue; } File[] files = curDir.listFiles(); if (files != null) { for (File curFile : curDir.listFiles()) { if (curFile.isDirectory()) { if (!seenDirectories.contains(curFile)) { toDoDirectories.add(curFile); seenDirectories.add(curFile); } } else { String s = curFile.getName().toLowerCase(); if (s.endsWith(\".xmi\") || s.endsWith(\".uml\") || s.endsWith(\".xmi.zip\") || s.endsWith(\".xml.zip\")) { results.add(curFile); } } } } } return results; } ",
        "ins1PreCode":" private static List<File> getList(File file) { List<File> results = new ArrayList<File>(); List<File> toDoDirectories = new LinkedList<File>(); Set<File> seenDirectories = new HashSet<File>(); toDoDirectories.add(file); while (!toDoDirectories.isEmpty()) { File curDir = toDoDirectories.remove(0); if (!curDir.isDirectory()) { results.add(curDir); continue; } File[] files = curDir.listFiles(); if (files != null) { for (File curFile : curDir.listFiles()) { if (curFile.isDirectory()) { if (!seenDirectories.contains(curFile)) { toDoDirectories.add(curFile); seenDirectories.add(curFile); } } else { String s = curFile.getName().toLowerCase(); if (s.endsWith(\".xmi\") || s.endsWith(\".xml\") || s.endsWith(\".xmi.zip\") || s.endsWith(\".xml.zip\")) { results.add(curFile); } } } } } return results; } ",
        "ins2PreCode":" public static List<File> getList(File file, boolean recurse, SuffixFilter[] filters, ProgressMonitor monitor) { if (file == null) { return Collections.emptyList(); } List<File> results = new ArrayList<File>(); List<File> toDoDirectories = new LinkedList<File>(); Set<File> seenDirectories = new HashSet<File>(); toDoDirectories.add(file); while (!toDoDirectories.isEmpty()) { if (monitor != null && monitor.isCanceled()) { return Collections.emptyList(); } File curDir = toDoDirectories.remove(0); if (!curDir.isDirectory()) { results.add(curDir); continue; } File[] files = curDir.listFiles(); if (files != null) { for (File curFile : curDir.listFiles()) { if (curFile.isDirectory()) { if (recurse && !seenDirectories.contains(curFile)) { toDoDirectories.add(curFile); seenDirectories.add(curFile); } } else { if (matchesSuffix(curFile, filters)) { results.add(curFile); } } } } } return results; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.log(Level.WARNING, \"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.log(Level.FINE, \"Attempted duplicate registration of event listener\" + \" - Element: {0} Listener: {1}\", new Object[]{element, listener}); } } ",
        "ins1PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins2PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String[] property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String[] property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.log(Level.WARNING, \"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.log(Level.FINE, \"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins1PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String[] property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins2PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void addGetMethods(Class<?> cls) { Map<String, List<Method>> conflictingGetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"get\") && name.length() > 3) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingGetters, name, method); } } else if (name.startsWith(\"is\") && name.length() > 2) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingGetters, name, method); } } } resolveGetterConflicts(conflictingGetters); } ",
        "ins1PreCode":" private void addGetMethods(Class<?> cls) { Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"get\") && name.length() > 3) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addGetMethod(name, method); } } else if (name.startsWith(\"is\") && name.length() > 2) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addGetMethod(name, method); } } } } ",
        "ins2PreCode":" private void addSetMethods(Class<?> cls) { Map<String, List<Method>> conflictingSetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"set\") && name.length() > 3) { if (method.getParameterTypes().length == 1) { name = PropertyNamer.methodToProperty(name); addSetterConflict(conflictingSetters, name, method); } } } resolveSetterConflicts(conflictingSetters); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void addSetMethods(Class<?> cls) { Map<String, List<Method>> conflictingSetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"set\") && name.length() > 3) { if (method.getParameterTypes().length == 1) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingSetters, name, method); } } } resolveSetterConflicts(conflictingSetters); } ",
        "ins1PreCode":" private void addSetMethods(Class<?> cls) { Map<String, List<Method>> conflictingSetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"set\") && name.length() > 3) { if (method.getParameterTypes().length == 1) { name = PropertyNamer.methodToProperty(name); addSetterConflict(conflictingSetters, name, method); } } } resolveSetterConflicts(conflictingSetters); } ",
        "ins2PreCode":" private void addGetMethods(Class<?> cls) { Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"get\") && name.length() > 3) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addGetMethod(name, method); } } else if (name.startsWith(\"is\") && name.length() > 2) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addGetMethod(name, method); } } } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void addGetMethods(Class<?> cls) { Map<String, List<Method>> conflictingGetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { if (method.getParameterTypes().length > 0) { continue; } String name = method.getName(); if ((name.startsWith(\"get\") && name.length() > 3) || (name.startsWith(\"is\") && name.length() > 2)) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingGetters, name, method); } } resolveGetterConflicts(conflictingGetters); } ",
        "ins1PreCode":" private void addGetMethods(Class<?> cls) { Map<String, List<Method>> conflictingGetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"get\") && name.length() > 3) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingGetters, name, method); } } else if (name.startsWith(\"is\") && name.length() > 2) { if (method.getParameterTypes().length == 0) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingGetters, name, method); } } } resolveGetterConflicts(conflictingGetters); } ",
        "ins2PreCode":" private void addSetMethods(Class<?> cls) { Map<String, List<Method>> conflictingSetters = new HashMap<String, List<Method>>(); Method[] methods = getClassMethods(cls); for (Method method : methods) { String name = method.getName(); if (name.startsWith(\"set\") && name.length() > 3) { if (method.getParameterTypes().length == 1) { name = PropertyNamer.methodToProperty(name); addMethodConflict(conflictingSetters, name, method); } } } resolveSetterConflicts(conflictingSetters); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldGetAUserFromAnnotation() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { AnnotationMapper mapper = sqlSession.getMapper(AnnotationMapper.class); User user = mapper.getUser(1); Assert.assertEquals(\"User1\", user.getName()); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void shouldGetAUserFromAnnotation() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserFromAnnotation(1); Assert.assertEquals(\"User1\", user.getName()); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void shouldGetAUser() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); Assert.assertEquals(\"User1\", user.getName()); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldFindPostsWithBlogIdUsingDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"blog_id\", 1); }}); assertEquals(2, posts.size()); } } ",
        "ins1PreCode":" public void shouldFindPostsWithBlogIdUsingDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"blog_id\", 1); }}); assertEquals(2, posts.size()); } } ",
        "ins2PreCode":" public void shouldFindPostsWithAuthorIdUsingDynamicSql() throws Exception { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"author_id\", 101); }}); assertEquals(3, posts.size()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldFindPostsWithAuthorIdUsingDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"author_id\", 101); }}); assertEquals(3, posts.size()); } } ",
        "ins1PreCode":" public void shouldFindPostsWithAuthorIdUsingDynamicSql() throws Exception { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"author_id\", 101); }}); assertEquals(3, posts.size()); } } ",
        "ins2PreCode":" public void shouldFindPostsWithBlogIdUsingDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList(\"org.apache.ibatis.domain.blog.mappers.PostMapper.findPost\", new HashMap<String, Integer>() {{ put(\"blog_id\", 1); }}); assertEquals(2, posts.size()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void applyDefaultValueOnAnnotationMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(AnnotationMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(AnnotationMapper.class.getName())); Assertions.assertThat(cache.getName()).isEqualTo(\"default\"); SqlSession sqlSession = factory.openSession(); try { AnnotationMapper mapper = sqlSession.getMapper(AnnotationMapper.class); Assertions.assertThat(mapper.ping()).isEqualTo(\"Hello\"); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void applyDefaultValueOnAnnotationMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(AnnotationMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(AnnotationMapper.class.getName())); Assert.assertThat(cache.getName(), Is.is(\"default\")); SqlSession sqlSession = factory.openSession(); try { AnnotationMapper mapper = sqlSession.getMapper(AnnotationMapper.class); Assert.assertThat(mapper.ping(), Is.is(\"Hello\")); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void applyDefaultValueOnXmlMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(XmlMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(XmlMapper.class.getName())); Assert.assertThat(cache.getName(), Is.is(\"default\")); SqlSession sqlSession = factory.openSession(); try { XmlMapper mapper = sqlSession.getMapper(XmlMapper.class); Assert.assertThat(mapper.ping(), Is.is(\"Hello\")); Assert.assertThat(mapper.selectOne(), Is.is(\"1\")); Assert.assertThat(mapper.selectFromVariable(), Is.is(\"9999\")); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void applyDefaultValueOnXmlMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(XmlMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(XmlMapper.class.getName())); Assertions.assertThat(cache.getName()).isEqualTo(\"default\"); SqlSession sqlSession = factory.openSession(); try { XmlMapper mapper = sqlSession.getMapper(XmlMapper.class); Assertions.assertThat(mapper.ping()).isEqualTo(\"Hello\"); Assertions.assertThat(mapper.selectOne()).isEqualTo(\"1\"); Assertions.assertThat(mapper.selectFromVariable()).isEqualTo(\"9999\"); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void applyDefaultValueOnXmlMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(XmlMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(XmlMapper.class.getName())); Assert.assertThat(cache.getName(), Is.is(\"default\")); SqlSession sqlSession = factory.openSession(); try { XmlMapper mapper = sqlSession.getMapper(XmlMapper.class); Assert.assertThat(mapper.ping(), Is.is(\"Hello\")); Assert.assertThat(mapper.selectOne(), Is.is(\"1\")); Assert.assertThat(mapper.selectFromVariable(), Is.is(\"9999\")); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void applyDefaultValueOnAnnotationMapper() throws IOException { Properties props = new Properties(); props.setProperty(PropertyParser.KEY_ENABLE_DEFAULT_VALUE, \"true\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/global_variables_defaults/mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); Configuration configuration = factory.getConfiguration(); configuration.addMapper(AnnotationMapper.class); SupportClasses.CustomCache cache = SupportClasses.Utils.unwrap(configuration.getCache(AnnotationMapper.class.getName())); Assert.assertThat(cache.getName(), Is.is(\"default\")); SqlSession sqlSession = factory.openSession(); try { AnnotationMapper mapper = sqlSession.getMapper(AnnotationMapper.class); Assert.assertThat(mapper.ping(), Is.is(\"Hello\")); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 5); verify(statement).setQueryTimeout(10); verify(statement).setQueryTimeout(5); } ",
        "ins1PreCode":" public void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 5); verify(statement).setQueryTimeout(5); } ",
        "ins2PreCode":" public void specifyQueryTimeoutAndTransactionTimeoutWithSameValue() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 10); verify(statement).setQueryTimeout(10); } ",
        "label":0
    },
    {
        "ins1CurCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "ins1PreCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); reader.close(); session.close(); } ",
        "ins2PreCode":" public void setUp() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:lname\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/MapperConfig.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(AnnotatedMapper.class); } finally { if (conn != null) { conn.close(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/MapperConfig.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(AnnotatedMapper.class); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/selectkey/CreateDB.sql\"); } ",
        "ins1PreCode":" public void setUp() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:lname\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/MapperConfig.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(AnnotatedMapper.class); } finally { if (conn != null) { conn.close(); } } } ",
        "ins2PreCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/result_handler/CreateDB.sql\"); } ",
        "ins1PreCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/result_handler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "ins2PreCode":" public void setUp() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:lname\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/selectkey/MapperConfig.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().addMapper(AnnotatedMapper.class); } finally { if (conn != null) { conn.close(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldInsertWithOptionsFlushesCache() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assertions.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithOptions(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assertions.assertEquals(3, pm.findAll().size()); } } ",
        "ins1PreCode":" public void shouldInsertWithOptionsFlushesCache() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithOptions(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assert.assertEquals(3, pm.findAll().size()); } } ",
        "ins2PreCode":" public void shouldApplyFlushCacheOptions() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithoutFlushCache(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession4 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession4.getMapper(PersonMapper.class); Assert.assertEquals(3, pm.findWithFlushCache().size()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldApplyFlushCacheOptions() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assertions.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithoutFlushCache(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assertions.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession4 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession4.getMapper(PersonMapper.class); Assertions.assertEquals(3, pm.findWithFlushCache().size()); } } ",
        "ins1PreCode":" public void shouldApplyFlushCacheOptions() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithoutFlushCache(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession4 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession4.getMapper(PersonMapper.class); Assert.assertEquals(3, pm.findWithFlushCache().size()); } } ",
        "ins2PreCode":" public void shouldInsertWithOptionsFlushesCache() { try (SqlSession sqlSession1 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession1.getMapper(PersonMapper.class); Assert.assertEquals(2, pm.findAll().size()); } try (SqlSession sqlSession2 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession2.getMapper(PersonMapper.class); Person p = new Person(3, \"hello\", \"world\"); pm.createWithOptions(p); } try (SqlSession sqlSession3 = sqlSessionFactory.openSession(true)) { PersonMapper pm = sqlSession3.getMapper(PersonMapper.class); Assert.assertEquals(3, pm.findAll().size()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldGetBlogsWithAuthorsAndPosts() { SqlSession session = sqlSessionFactory.openSession(); try { BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class); List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts(); assertEquals(2, blogs.size()); assertTrue(blogs.get(0) instanceof Proxy); assertEquals(101, blogs.get(0).getAuthor().getId()); assertEquals(1, blogs.get(0).getPosts().size()); assertEquals(1, blogs.get(0).getPosts().get(0).getId()); assertTrue(blogs.get(1) instanceof Proxy); assertEquals(102, blogs.get(1).getAuthor().getId()); assertEquals(1, blogs.get(1).getPosts().size()); assertEquals(2, blogs.get(1).getPosts().get(0).getId()); } finally { session.close(); } } ",
        "ins1PreCode":" public void shouldGetBlogsWithAuthorsAndPosts() { SqlSession session = sqlSessionFactory.openSession(); try { BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class); List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts(); assertEquals(2, blogs.size()); assertTrue(blogs.get(0) instanceof Factory); assertEquals(101, blogs.get(0).getAuthor().getId()); assertEquals(1, blogs.get(0).getPosts().size()); assertEquals(1, blogs.get(0).getPosts().get(0).getId()); assertTrue(blogs.get(1) instanceof Factory); assertEquals(102, blogs.get(1).getAuthor().getId()); assertEquals(1, blogs.get(1).getPosts().size()); assertEquals(2, blogs.get(1).getPosts().get(0).getId()); } finally { session.close(); } } ",
        "ins2PreCode":" public void shouldGetBlogsWithAuthorsAndPostsEagerly() { SqlSession session = sqlSessionFactory.openSession(); try { BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class); List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly(); assertEquals(2, blogs.size()); assertFalse(blogs.get(0) instanceof Factory); assertEquals(101, blogs.get(0).getAuthor().getId()); assertEquals(1, blogs.get(0).getPosts().size()); assertEquals(1, blogs.get(0).getPosts().get(0).getId()); assertFalse(blogs.get(1) instanceof Factory); assertEquals(102, blogs.get(1).getAuthor().getId()); assertEquals(1, blogs.get(1).getPosts().size()); assertEquals(2, blogs.get(1).getPosts().get(0).getId()); } finally { session.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldNotCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertTrue(first != second); } ",
        "ins1PreCode":" public void shouldNotCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertTrue(first != second); } ",
        "ins2PreCode":" public void shouldCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"com.domain.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"com.domain.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertEquals(first, second); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertEquals(first, second); } ",
        "ins1PreCode":" public void shouldCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"com.domain.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"com.domain.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertEquals(first, second); } ",
        "ins2PreCode":" public void shouldNotCacheAllAuthors() throws Exception { int first = -1; int second = -1; SqlSession session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } finally { session.close(); } session = sqlMapper.openSession(); try { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } finally { session.close(); } assertTrue(first != second); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertEquals(first, second); } ",
        "ins1PreCode":" public void shouldCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertEquals(first, second); } ",
        "ins2PreCode":" public void shouldNotCacheAllAuthors() throws Exception { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertTrue(first != second); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldNotCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertTrue(first != second); } ",
        "ins1PreCode":" public void shouldNotCacheAllAuthors() throws Exception { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertTrue(first != second); } ",
        "ins2PreCode":" public void shouldCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); first = System.identityHashCode(authors); session.commit(); } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList(\"org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors\"); second = System.identityHashCode(authors); } assertEquals(first, second); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testCallWithResultSet4() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); sqlSession.clearCache(); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); names = spMapper.getNames(parms); assertEquals(2, names.size()); assertEquals(2, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void testCallWithResultSet4() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); names = spMapper.getNames(parms); assertEquals(2, names.size()); assertEquals(2, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void testCallWithResultSet3() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 3); names = spMapper.getNames(parms); assertEquals(1, names.size()); assertEquals(1, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testCallWithResultSet4() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); names = spMapper.getNames(parms); assertEquals(2, names.size()); assertEquals(2, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void testCallWithResultSet4() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); sqlSession.clearCache(); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); names = spMapper.getNames(parms); assertEquals(2, names.size()); assertEquals(2, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void testCallWithResultSet3() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { SPMapper spMapper = sqlSession.getMapper(SPMapper.class); Map<String, Object> parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 2); List<Name> names = spMapper.getNames(parms); assertEquals(2, parms.get(\"totalRows\")); assertEquals(2, names.size()); parms = new HashMap<String, Object>(); parms.put(\"lowestId\", 3); names = spMapper.getNames(parms); assertEquals(1, names.size()); assertEquals(1, parms.get(\"totalRows\")); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); reader.close(); session.close(); } ",
        "ins1PreCode":" public static void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); sqlSessionFactory.getConfiguration().addMapper(Mapper.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); reader.close(); session.close(); } ",
        "ins2PreCode":" public static void initDatabase() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:enumtypehandler_on_annotation\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class); reader.close(); } finally { if (conn != null) { conn.close(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "ins1PreCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); reader.close(); session.close(); } ",
        "ins2PreCode":" public static void initDatabase() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:enumtypehandler_on_annotation\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class); reader.close(); } finally { if (conn != null) { conn.close(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); } ",
        "ins1PreCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "ins2PreCode":" public static void initDatabase() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:enumtypehandler_on_annotation\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class); reader.close(); } finally { if (conn != null) { conn.close(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public static void initDatabase() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class); reader.close(); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql\"); } ",
        "ins1PreCode":" public static void initDatabase() throws Exception { Connection conn = null; try { Class.forName(\"org.hsqldb.jdbcDriver\"); conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:enumtypehandler_on_annotation\", \"sa\", \"\"); Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); runner.runScript(reader); conn.commit(); reader.close(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class); reader.close(); } finally { if (conn != null) { conn.close(); } } } ",
        "ins2PreCode":" public void setUp() throws Exception { Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); reader.close(); sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/CreateDB.sql\"); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.runScript(reader); conn.close(); reader.close(); session.close(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testInsertWithMapper() { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { Mapper userMapper = sqlSession.getMapper(Mapper.class); User user1 = new User(null, \"Pocoyo\"); userMapper.insert(user1); User user2 = new User(null, \"Valentina\"); userMapper.insert(user2); sqlSession.flushStatements(); assertEquals(Integer.valueOf(50), user1.getId()); assertEquals(Integer.valueOf(50), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"select\"); Assert.assertTrue(users.size() == 2); } } ",
        "ins1PreCode":" public void testInsertWithMapper() { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { Mapper userMapper = sqlSession.getMapper(Mapper.class); User user1 = new User(null, \"Pocoyo\"); userMapper.insert(user1); User user2 = new User(null, \"Valentina\"); userMapper.insert(user2); sqlSession.flushStatements(); assertEquals(new Integer(50), user1.getId()); assertEquals(new Integer(50), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"select\"); Assert.assertTrue(users.size() == 2); } } ",
        "ins2PreCode":" public void testInsertMapperJdbc3() { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { Mapper userMapper = sqlSession.getMapper(Mapper.class); User user1 = new User(null, \"Pocoyo\"); userMapper.insertIdentity(user1); User user2 = new User(null, \"Valentina\"); userMapper.insertIdentity(user2); sqlSession.flushStatements(); assertEquals(Integer.valueOf(0), user1.getId()); assertEquals(Integer.valueOf(1), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"selectIdentity\"); Assert.assertTrue(users.size() == 2); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectOneAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { Author author = session.selectOne( \"domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "ins1PreCode":" public void shouldSelectOneAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { Author author = (Author) session.selectOne( \"domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "ins2PreCode":" public void shouldSelectOneImmutableAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { ImmutableAuthor author = (ImmutableAuthor) session.selectOne( \"domain.blog.mappers.AuthorMapper.selectImmutableAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectOneImmutableAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { ImmutableAuthor author = session.selectOne( \"domain.blog.mappers.AuthorMapper.selectImmutableAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "ins1PreCode":" public void shouldSelectOneImmutableAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { ImmutableAuthor author = (ImmutableAuthor) session.selectOne( \"domain.blog.mappers.AuthorMapper.selectImmutableAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "ins2PreCode":" public void shouldSelectOneAuthor() throws Exception { SqlSession session = sqlMapper.openSession(); try { Author author = (Author) session.selectOne( \"domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(101)); assertEquals(101, author.getId()); assertEquals(Section.NEWS, author.getFavouriteSection()); } finally { session.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectDiscriminatedPost() throws Exception { Executor executor = createExecutor(new JdbcTransaction(ds, null, false)); try { MappedStatement selectStatement = ExecutorTestHelper.prepareSelectDiscriminatedPost(config); List<Map<String,String>> products = executor.query(selectStatement, null, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER); assertEquals(5, products.size()); for (Map<String,String> m : products) { if (\"IMAGES\".equals(m.get(\"SECTION\"))) { assertNull(m.get(\"subject\")); } else { assertNotNull(m.get(\"subject\")); } } } finally { executor.close(false); } } ",
        "ins1PreCode":" public void shouldSelectDiscriminatedPost() throws Exception { Executor executor = createExecutor(new JdbcTransaction(ds, null, false)); try { MappedStatement selectStatement = ExecutorTestHelper.prepareSelectDiscriminatedPost(config); List<Map<String,String>> products = executor.query(selectStatement, null, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER); assertEquals(5, products.size()); for (Map<String,String> m : products) { if (\"IMAGES\".equals(m.get(\"SECTION\"))) { assertNull(m.get(\"subject\")); } else { assertNotNull(m.get(\"subject\")); } } } finally { executor.rollback(true); executor.close(false); } } ",
        "ins2PreCode":" public void shouldSelect2DiscriminatedPosts() throws Exception { Executor executor = createExecutor(new JdbcTransaction(ds, null, false)); try { MappedStatement selectStatement = ExecutorTestHelper.prepareSelectDiscriminatedPost(config); List<Map<String,String>> products = executor.query(selectStatement, null, new RowBounds(2, 2), Executor.NO_RESULT_HANDLER); assertEquals(2, products.size()); for (Map<String,String> m : products) { if (\"IMAGES\".equals(m.get(\"SECTION\"))) { assertNull(m.get(\"subject\")); } else { assertNotNull(m.get(\"subject\")); } } } finally { executor.rollback(true); executor.close(false); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testSelectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException { sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT); SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE); try { PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class); List<Person> people = personMapper.selectAllNoFlush(); updateDatabase(sqlSession.getConnection()); people = personMapper.selectAllFlush(); assertEquals(\"Simone\", people.get(0).getFirstName()); sqlSession.commit(); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void testSelectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException { sqlSessionFactory.getConfiguration().setClearLocalCacheAfterEachStatement(true); SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE); try { PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class); List<Person> people = personMapper.selectAllNoFlush(); updateDatabase(sqlSession.getConnection()); people = personMapper.selectAllFlush(); assertEquals(\"Simone\", people.get(0).getFirstName()); sqlSession.commit(); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void testShouldNotFlushLocalSessionCacheOnQueryForList() throws SQLException { SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE); try { PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class); List<Person> people = personMapper.selectAllNoFlush(); updateDatabase(sqlSession.getConnection()); people = personMapper.selectAllNoFlush(); assertEquals(\"John\", people.get(0).getFirstName()); sqlSession.commit(); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldCheckGetterExistance() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertTrue(meta.hasGetter(\"richField\")); assertTrue(meta.hasGetter(\"richProperty\")); assertTrue(meta.hasGetter(\"richList\")); assertTrue(meta.hasGetter(\"richMap\")); assertTrue(meta.hasGetter(\"richList[0]\")); assertTrue(meta.hasGetter(\"richType\")); assertTrue(meta.hasGetter(\"richType.richField\")); assertTrue(meta.hasGetter(\"richType.richProperty\")); assertTrue(meta.hasGetter(\"richType.richList\")); assertTrue(meta.hasGetter(\"richType.richMap\")); assertTrue(meta.hasGetter(\"richType.richList[0]\")); assertEquals(\"richType.richProperty\", meta.findProperty(\"richType.richProperty\", false)); assertFalse(meta.hasGetter(\"[0]\")); } ",
        "ins1PreCode":" public void shouldCheckGetterExistance() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertTrue(meta.hasGetter(\"richField\")); assertTrue(meta.hasGetter(\"richProperty\")); assertTrue(meta.hasGetter(\"richList\")); assertTrue(meta.hasGetter(\"richMap\")); assertTrue(meta.hasGetter(\"richList[0]\")); assertTrue(meta.hasGetter(\"richType\")); assertTrue(meta.hasGetter(\"richType.richField\")); assertTrue(meta.hasGetter(\"richType.richProperty\")); assertTrue(meta.hasGetter(\"richType.richList\")); assertTrue(meta.hasGetter(\"richType.richMap\")); assertTrue(meta.hasGetter(\"richType.richList[0]\")); assertFalse(meta.hasGetter(\"[0]\")); } ",
        "ins2PreCode":" public void shouldCheckSetterExistance() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertTrue(meta.hasSetter(\"richField\")); assertTrue(meta.hasSetter(\"richProperty\")); assertTrue(meta.hasSetter(\"richList\")); assertTrue(meta.hasSetter(\"richMap\")); assertTrue(meta.hasSetter(\"richList[0]\")); assertTrue(meta.hasSetter(\"richType\")); assertTrue(meta.hasSetter(\"richType.richField\")); assertTrue(meta.hasSetter(\"richType.richProperty\")); assertTrue(meta.hasSetter(\"richType.richList\")); assertTrue(meta.hasSetter(\"richType.richMap\")); assertTrue(meta.hasSetter(\"richType.richList[0]\")); assertFalse(meta.hasSetter(\"[0]\")); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void testCrossReference(SqlSessionFactory sqlSessionFactory) { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { MultipleCrossIncludePersonMapper personMapper = sqlSession.getMapper(MultipleCrossIncludePersonMapper.class); Person person = personMapper.select(1); assertEquals((Integer) 1, person.getId()); assertEquals(2, person.getPets().size()); assertEquals((Integer) 2, person.getPets().get(1).getId()); Pet pet = personMapper.selectPet(1); assertEquals(Integer.valueOf(1), pet.getId()); MultipleCrossIncludePetMapper petMapper = sqlSession.getMapper(MultipleCrossIncludePetMapper.class); Pet pet2 = petMapper.select(3); assertEquals((Integer)3, pet2.getId()); assertEquals((Integer)2, pet2.getOwner().getId()); } } ",
        "ins1PreCode":" private void testCrossReference(SqlSessionFactory sqlSessionFactory) throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { MultipleCrossIncludePersonMapper personMapper = sqlSession.getMapper(MultipleCrossIncludePersonMapper.class); Person person = personMapper.select(1); assertEquals((Integer) 1, person.getId()); assertEquals(2, person.getPets().size()); assertEquals((Integer) 2, person.getPets().get(1).getId()); Pet pet = personMapper.selectPet(1); assertEquals(Integer.valueOf(1), pet.getId()); MultipleCrossIncludePetMapper petMapper = sqlSession.getMapper(MultipleCrossIncludePetMapper.class); Pet pet2 = petMapper.select(3); assertEquals((Integer)3, pet2.getId()); assertEquals((Integer)2, pet2.getOwner().getId()); } } ",
        "ins2PreCode":" private void testCrossReference(SqlSessionFactory sqlSessionFactory) { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class); Person person = personMapper.select(1); assertEquals((Integer)1, person.getId()); assertEquals(2, person.getPets().size()); assertEquals((Integer)2, person.getPets().get(1).getId()); Pet pet = personMapper.selectPet(1); assertEquals(Integer.valueOf(1), pet.getId()); PetMapper petMapper = sqlSession.getMapper(PetMapper.class); Pet pet2 = petMapper.select(3); assertEquals((Integer)3, pet2.getId()); assertEquals((Integer)2, pet2.getOwner().getId()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); Class<?> propertyType; if (metaParameters.hasGetter(property)) { propertyType = metaParameters.getGetterType(property); } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) { propertyType = java.sql.ResultSet.class; } else if (property == null || Map.class.isAssignableFrom(parameterType)) { propertyType = Object.class; } else { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); Class<?> javaType = propertyType; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { throw new BuilderException(\"Expression based parameters are not supported yet\"); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}. Valid properties are \" + parameterProperties); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "ins1PreCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); Class<?> propertyType; if (metaParameters.hasGetter(property)) { propertyType = metaParameters.getGetterType(property); } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) { propertyType = java.sql.ResultSet.class; } else if (property != null) { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } else { propertyType = Object.class; } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); Class<?> javaType = propertyType; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { throw new BuilderException(\"Expression based parameters are not supported yet\"); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}. Valid properties are \" + parameterProperties); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "ins2PreCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); String jdbcType = propertiesMap.get(\"jdbcType\"); Class<?> propertyType; if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(jdbcType)) { propertyType = java.sql.ResultSet.class; } else if (property != null) { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } else { propertyType = Object.class; } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); if (jdbcType != null) { builder.jdbcType(resolveJdbcType(jdbcType)); } Class<?> javaType = null; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { builder.expression(value); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}. Valid properties are \" + parameterProperties); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "label":0
    },
    {
        "ins1CurCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); Class<?> propertyType; if (metaParameters.hasGetter(property)) { propertyType = metaParameters.getGetterType(property); } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) { propertyType = java.sql.ResultSet.class; } else if (property == null || Map.class.isAssignableFrom(parameterType)) { propertyType = Object.class; } else { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); Class<?> javaType = propertyType; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { throw new BuilderException(\"Expression based parameters are not supported yet\"); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}. Valid properties are \" + PARAMETER_PROPERTIES); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "ins1PreCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); Class<?> propertyType; if (metaParameters.hasGetter(property)) { propertyType = metaParameters.getGetterType(property); } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) { propertyType = java.sql.ResultSet.class; } else if (property == null || Map.class.isAssignableFrom(parameterType)) { propertyType = Object.class; } else { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); Class<?> javaType = propertyType; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { throw new BuilderException(\"Expression based parameters are not supported yet\"); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}. Valid properties are \" + parameterProperties); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "ins2PreCode":" private ParameterMapping buildParameterMapping(String content) { Map<String, String> propertiesMap = parseParameterMapping(content); String property = propertiesMap.get(\"property\"); String jdbcType = propertiesMap.get(\"jdbcType\"); Class<?> propertyType; if (typeHandlerRegistry.hasTypeHandler(parameterType)) { propertyType = parameterType; } else if (JdbcType.CURSOR.name().equals(jdbcType)) { propertyType = java.sql.ResultSet.class; } else if (property != null) { MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory()); if (metaClass.hasGetter(property)) { propertyType = metaClass.getGetterType(property); } else { propertyType = Object.class; } } else { propertyType = Object.class; } ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType); if (jdbcType != null) { builder.jdbcType(resolveJdbcType(jdbcType)); } Class<?> javaType = null; String typeHandlerAlias = null; for (Map.Entry<String, String> entry : propertiesMap.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); if (\"javaType\".equals(name)) { javaType = resolveClass(value); builder.javaType(javaType); } else if (\"jdbcType\".equals(name)) { builder.jdbcType(resolveJdbcType(value)); } else if (\"mode\".equals(name)) { builder.mode(resolveParameterMode(value)); } else if (\"numericScale\".equals(name)) { builder.numericScale(Integer.valueOf(value)); } else if (\"resultMap\".equals(name)) { builder.resultMapId(value); } else if (\"typeHandler\".equals(name)) { typeHandlerAlias = value; } else if (\"jdbcTypeName\".equals(name)) { builder.jdbcTypeName(value); } else if (\"property\".equals(name)) { } else if (\"expression\".equals(name)) { builder.expression(value); } else { throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}. Valid properties are \" + parameterProperties); } } if (typeHandlerAlias != null) { builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias)); } return builder.build(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldNotLetReadUnloadedPropertyAfterTwoSerializations() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize(deserialize(serialize((Serializable) proxy)))); Assertions.assertThrows(ExecutorException.class, () -> { author2.getId(); }); } ",
        "ins1PreCode":" public void shouldNotLetReadUnloadedPropertyAfterTwoSerializations() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize(deserialize(serialize((Serializable) proxy)))); author2.getId(); } ",
        "ins2PreCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Proxy); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldNotLetReadUnloadedPropertyAfterTwoSerializations() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize(deserialize(serialize((Serializable) proxy)))); Assertions.assertThrows(ExecutorException.class, author2::getId); } ",
        "ins1PreCode":" public void shouldNotLetReadUnloadedPropertyAfterTwoSerializations() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize(deserialize(serialize((Serializable) proxy)))); Assertions.assertThrows(ExecutorException.class, () -> { author2.getId(); }); } ",
        "ins2PreCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Proxy); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Proxy); } ",
        "ins1PreCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Proxy); } ",
        "ins2PreCode":" public void shouldNotLetReadUnloadedPropertyAfterTwoSerializations() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>()); Author author2 = (Author) deserialize(serialize(deserialize(serialize((Serializable) proxy)))); Assertions.assertThrows(ExecutorException.class, () -> { author2.getId(); }); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldRollbackInsertedAuthor() throws Exception { try { manager.startManagedSession(); AuthorMapper mapper = manager.getMapper(AuthorMapper.class); Author expected = new Author(501, \"lmeadors\", \"******\", \"lmeadors@somewhere.com\", \"Something...\", null); mapper.insertAuthor(expected); manager.rollback(); Author actual = mapper.selectAuthor(501); assertNull(actual); } finally { manager.close(); } } ",
        "ins1PreCode":" public void shouldRollbackInsertedAuthor() throws Exception { try { manager.startManagedSession(); AuthorMapper mapper = manager.getMapper(AuthorMapper.class); Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null); mapper.insertAuthor(expected); manager.rollback(); Author actual = mapper.selectAuthor(500); assertNull(actual); } finally { manager.close(); } } ",
        "ins2PreCode":" public void shouldCommitInsertedAuthor() throws Exception { try { manager.startManagedSession(); AuthorMapper mapper = manager.getMapper(AuthorMapper.class); Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null); mapper.insertAuthor(expected); manager.commit(); Author actual = mapper.selectAuthor(500); assertNotNull(actual); } finally { manager.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testAdderAsSelectDoubleCall1() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); sqlSession.clearCache(); parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void testAdderAsSelectDoubleCall1() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void testAdderAsSelectDoubleCall2() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); parameter = new Parameter(); parameter.setAddend1(4); parameter.setAddend2(5); spMapper.adder(parameter); assertEquals((Integer) 9, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testAdderAsSelectDoubleCall1() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void testAdderAsSelectDoubleCall1() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); sqlSession.clearCache(); parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void testAdderAsSelectDoubleCall2() { SqlSession sqlSession = sqlSessionFactory.openSession(); try { Parameter parameter = new Parameter(); parameter.setAddend1(2); parameter.setAddend2(3); SPMapper spMapper = sqlSession.getMapper(SPMapper.class); spMapper.adder(parameter); assertEquals((Integer) 5, parameter.getSum()); parameter = new Parameter(); parameter.setAddend1(4); parameter.setAddend2(5); spMapper.adder(parameter); assertEquals((Integer) 9, parameter.getSum()); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testInsert() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { User user1 = new User(null, \"Pocoyo\"); sqlSession.insert(\"insert\", user1); User user2 = new User(null, \"Valentina\"); sqlSession.insert(\"insert\", user2); sqlSession.flushStatements(); assertEquals(Integer.valueOf(50), user1.getId()); assertEquals(Integer.valueOf(50), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"select\"); Assert.assertTrue(users.size() == 2); } } ",
        "ins1PreCode":" public void testInsert() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { User user1 = new User(null, \"Pocoyo\"); sqlSession.insert(\"insert\", user1); User user2 = new User(null, \"Valentina\"); sqlSession.insert(\"insert\", user2); sqlSession.flushStatements(); assertEquals(new Integer(50), user1.getId()); assertEquals(new Integer(50), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"select\"); Assert.assertTrue(users.size() == 2); } } ",
        "ins2PreCode":" public void testInsertJdbc3() { try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) { User user1 = new User(null, \"Pocoyo\"); sqlSession.insert(\"insertIdentity\", user1); User user2 = new User(null, \"Valentina\"); sqlSession.insert(\"insertIdentity\", user2); sqlSession.flushStatements(); assertEquals(Integer.valueOf(0), user1.getId()); assertEquals(Integer.valueOf(1), user2.getId()); sqlSession.commit(); } try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<User> users = sqlSession.selectList(\"selectIdentity\"); Assert.assertTrue(users.size() == 2); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Factory); } ",
        "ins1PreCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2.getClass().getName().contains(\"CGLIB\")); } ",
        "ins2PreCode":" public void shouldCreateAProxyForAPartiallyLoadedBean() throws Exception { ResultLoaderMap loader = new ResultLoaderMap(); loader.addLoader(\"id\", null, null); Object proxy = proxyFactory.createProxy(author, loader, new Configuration(), new DefaultObjectFactory(), new ArrayList<Class<?>>(), new ArrayList<Object>()); Author author2 = (Author) deserialize(serialize((Serializable) proxy)); assertTrue(author2 instanceof Proxy); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testSelectLike() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.selectLike\", \"Ba\"); assertTrue(answer.size() == 2); assertEquals(Integer.valueOf(4), answer.get(0).get(\"ID\")); assertEquals(Integer.valueOf(6), answer.get(1).get(\"ID\")); } } ",
        "ins1PreCode":" public void testSelectLike() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.selectLike\", \"Ba\"); assertTrue(answer.size() == 2); assertEquals(new Integer(4), answer.get(0).get(\"ID\")); assertEquals(new Integer(6), answer.get(1).get(\"ID\")); } } ",
        "ins2PreCode":" public void testOgnlStaticMethodCall() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.ognlStaticMethodCall\", \"Rock 'n Roll\"); assertTrue(answer.size() == 1); assertEquals(new Integer(7), answer.get(0).get(\"ID\")); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testOgnlStaticMethodCall() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.ognlStaticMethodCall\", \"Rock 'n Roll\"); assertTrue(answer.size() == 1); assertEquals(Integer.valueOf(7), answer.get(0).get(\"ID\")); } } ",
        "ins1PreCode":" public void testOgnlStaticMethodCall() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.ognlStaticMethodCall\", \"Rock 'n Roll\"); assertTrue(answer.size() == 1); assertEquals(new Integer(7), answer.get(0).get(\"ID\")); } } ",
        "ins2PreCode":" public void testSelectLike() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { List<Map<String, Object>> answer = sqlSession.selectList(\"org.apache.ibatis.submitted.dynsql.selectLike\", \"Ba\"); assertTrue(answer.size() == 2); assertEquals(new Integer(4), answer.get(0).get(\"ID\")); assertEquals(new Integer(6), answer.get(1).get(\"ID\")); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void verifyEmptyLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration.setLazyLoadTriggerMethods(new HashSet<String>()); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.setterCounter); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void verifyEmptyLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration.setLazyLoadTriggerMethods(new HashSet<String>()); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.lazyLoadCounter); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void verifyCustomLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration.setLazyLoadTriggerMethods(new HashSet<String>(Collections.singleton(\"trigger\"))); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.lazyLoadCounter); user.trigger(); assertEquals(3, user.lazyLoadCounter); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void verifyCustomLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration .setLazyLoadTriggerMethods(new HashSet<String>(Collections.singleton(\"trigger\"))); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.setterCounter); user.trigger(); assertEquals(3, user.setterCounter); } finally { sqlSession.close(); } } ",
        "ins1PreCode":" public void verifyCustomLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration.setLazyLoadTriggerMethods(new HashSet<String>(Collections.singleton(\"trigger\"))); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.lazyLoadCounter); user.trigger(); assertEquals(3, user.lazyLoadCounter); } finally { sqlSession.close(); } } ",
        "ins2PreCode":" public void verifyEmptyLazyLoadTriggerMethods() { Configuration configuration = sqlSessionFactory.getConfiguration(); configuration.setAggressiveLazyLoading(false); configuration.setLazyLoadTriggerMethods(new HashSet<String>()); SqlSession sqlSession = sqlSessionFactory.openSession(); try { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); user.toString(); user.hashCode(); user.equals(null); user.clone(); assertEquals(0, user.lazyLoadCounter); } finally { sqlSession.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldGetAUserWhithPhoneNumber() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserWithPhoneNumber(1); Assert.assertEquals(\"User1\", user.getName()); Assert.assertEquals(Long.valueOf(12345678901L), user.getPhone()); } } ",
        "ins1PreCode":" public void shouldGetAUserWhithPhoneNumber() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserWithPhoneNumber(1); Assert.assertEquals(\"User1\", user.getName()); Assert.assertEquals(new Long(12345678901L), user.getPhone()); } } ",
        "ins2PreCode":" public void shouldGetAUser() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); Assert.assertEquals(\"User1\", user.getName()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldGetAUser() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); Assertions.assertEquals(\"User1\", user.getName()); } } ",
        "ins1PreCode":" public void shouldGetAUser() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); Assert.assertEquals(\"User1\", user.getName()); } } ",
        "ins2PreCode":" public void shouldGetAUserWhithPhoneNumber() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserWithPhoneNumber(1); Assert.assertEquals(\"User1\", user.getName()); Assert.assertEquals(Long.valueOf(12345678901L), user.getPhone()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldGetAUserWhithPhoneNumber() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserWithPhoneNumber(1); Assertions.assertEquals(\"User1\", user.getName()); Assertions.assertEquals(Long.valueOf(12345678901L), user.getPhone()); } } ",
        "ins1PreCode":" public void shouldGetAUserWhithPhoneNumber() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUserWithPhoneNumber(1); Assert.assertEquals(\"User1\", user.getName()); Assert.assertEquals(Long.valueOf(12345678901L), user.getPhone()); } } ",
        "ins2PreCode":" public void shouldGetAUser() { sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); User user = mapper.getUser(1); Assert.assertEquals(\"User1\", user.getName()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testSeleckKeyReturnsNoData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); Assertions.assertThrows(PersistenceException.class, () -> { sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertNoValuesInSelectKey\", parms); }); } } ",
        "ins1PreCode":" public void testSeleckKeyReturnsNoData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); int rows = sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertNoValuesInSelectKey\", parms); assertEquals(1, rows); assertNull(parms.get(\"id\")); } } ",
        "ins2PreCode":" public void testSeleckKeyReturnsTooManyData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testSeleckKeyReturnsTooManyData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); Assertions.assertThrows(PersistenceException.class, () -> { sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); }); } } ",
        "ins1PreCode":" public void testSeleckKeyReturnsTooManyData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey\", parms); } } ",
        "ins2PreCode":" public void testSeleckKeyReturnsNoData() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Map<String, String> parms = new HashMap<String, String>(); parms.put(\"name\", \"Fred\"); int rows = sqlSession.insert(\"org.apache.ibatis.submitted.selectkey.Table2.insertNoValuesInSelectKey\", parms); assertEquals(1, rows); assertNull(parms.get(\"id\")); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 5); verify(statement).setQueryTimeout(10); verify(statement).setQueryTimeout(5); } ",
        "ins1PreCode":" public void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 5); verify(statement).setQueryTimeout(5); } ",
        "ins2PreCode":" public void specifyQueryTimeoutAndTransactionTimeoutMinIsQueryTimeout() throws SQLException { doReturn(10).when(configuration).getDefaultStatementTimeout(); BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null); handler.setStatementTimeout(statement, 20); verify(statement).setQueryTimeout(10); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assert.assertTrue(blog instanceof Factory); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "ins1PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assert.assertTrue(blog.getClass().getName().contains(\"CGLIB\")); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "ins2PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelects() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect\", 1); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assert.assertTrue(blog instanceof Proxy); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "ins1PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assert.assertTrue(blog instanceof Factory); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "ins2PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelects() throws Exception { SqlSession session = sqlMapper.openSession(); try { Blog blog = session.selectOne(\"domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect\", 1); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } finally { session.close(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() { try (SqlSession session = sqlMapper.openSession()) { Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assertions.assertTrue(blog instanceof Proxy); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } } ",
        "ins1PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() { try (SqlSession session = sqlMapper.openSession()) { Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily\", 1); Assert.assertTrue(blog instanceof Proxy); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } } ",
        "ins2PreCode":" public void shouldSelectBlogWithPostsAndAuthorUsingSubSelects() { try (SqlSession session = sqlMapper.openSession()) { Blog blog = session.selectOne(\"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelect\", 1); assertEquals(\"Jim Business\", blog.getTitle()); assertEquals(2, blog.getPosts().size()); assertEquals(\"Corn nuts\", blog.getPosts().get(0).getSubject()); assertEquals(101, blog.getAuthor().getId()); assertEquals(\"jim\", blog.getAuthor().getUsername()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldAssignMultipleGeneratedKeysToABean() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet(planet); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins1PreCode":" public void shouldAssignMultipleGeneratedKeysToABean() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet(planet); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins2PreCode":" public void shouldAssignMultipleGeneratedKeysToABean_MultiParams() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet_MultiParams(planet, Integer.valueOf(1)); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldAssignMultipleGeneratedKeysToABean_MultiParams() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet_MultiParams(planet, 1); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins1PreCode":" public void shouldAssignMultipleGeneratedKeysToABean_MultiParams() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet_MultiParams(planet, Integer.valueOf(1)); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins2PreCode":" public void shouldAssignMultipleGeneratedKeysToABean() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet = new Planet(); planet.setName(\"pluto\"); mapper.insertPlanet(planet); assertEquals(\"pluto-\" + planet.getId(), planet.getCode()); } finally { sqlSession.rollback(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class) { classToCreate = ArrayList.class; } else if (type == Map.class) { classToCreate = HashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "ins1PreCode":" private Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class) { classToCreate = ArrayList.class; } else if (type == Map.class) { classToCreate = HashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "ins2PreCode":" private Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class) { classToCreate = LinkedList.class; } else if (type == Map.class) { classToCreate = LinkedHashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "label":0
    },
    {
        "ins1CurCode":" protected Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class || type == Iterable.class) { classToCreate = ArrayList.class; } else if (type == Map.class) { classToCreate = HashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "ins1PreCode":" protected Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class) { classToCreate = ArrayList.class; } else if (type == Map.class) { classToCreate = HashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "ins2PreCode":" private Class<?> resolveInterface(Class<?> type) { Class<?> classToCreate; if (type == List.class || type == Collection.class) { classToCreate = LinkedList.class; } else if (type == Map.class) { classToCreate = LinkedHashMap.class; } else if (type == SortedSet.class) { classToCreate = TreeSet.class; } else if (type == Set.class) { classToCreate = HashSet.class; } else { classToCreate = type; } return classToCreate; } ",
        "label":0
    },
    {
        "ins1CurCode":" private static SQL example1() { return new SQL() {{ SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); }}; } ",
        "ins1PreCode":" private static String example1() { return new SQL() {{ SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); }}.toString(); } ",
        "ins2PreCode":" private static String example1() { SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); return SQL(); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldAssignMultipleGeneratedKeysToBeans() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets(planets); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins1PreCode":" public void shouldAssignMultipleGeneratedKeysToBeans() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets(planets); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins2PreCode":" public void shouldAssignMultipleGeneratedKeysToBeans_MultiParams() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets_MultiParams(planets, Integer.valueOf(1)); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldAssignMultipleGeneratedKeysToBeans_MultiParams() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets_MultiParams(planets, 1); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins1PreCode":" public void shouldAssignMultipleGeneratedKeysToBeans_MultiParams() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets_MultiParams(planets, Integer.valueOf(1)); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "ins2PreCode":" public void shouldAssignMultipleGeneratedKeysToBeans() throws Exception { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { try { CountryMapper mapper = sqlSession.getMapper(CountryMapper.class); Planet planet1 = new Planet(); planet1.setName(\"pluto\"); Planet planet2 = new Planet(); planet2.setName(\"neptune\"); List<Planet> planets = Arrays.asList(planet1, planet2); mapper.insertPlanets(planets); assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode()); assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode()); } finally { sqlSession.rollback(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" private static SQL example1() { return new SQL() {{ SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); }}; } ",
        "ins1PreCode":" private static String example1() { return new SQL() {{ SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); }}.toString(); } ",
        "ins2PreCode":" private static String example1() { SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); return SQL(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean hasGetter(String name) { PropertyTokenizer prop = new PropertyTokenizer(name); if (prop.hasNext()) { if (reflector.hasGetter(prop.getName())) { MetaClass metaProp = metaClassForProperty(prop); return metaProp.hasGetter(prop.getChildren()); } else { return false; } } else { return reflector.hasGetter(prop.getName()); } } ",
        "ins1PreCode":" public boolean hasGetter(String name) { PropertyTokenizer prop = new PropertyTokenizer(name); if (prop.hasNext()) { if (reflector.hasGetter(prop.getName())) { MetaClass metaProp = metaClassForProperty(prop.getName()); return metaProp.hasGetter(prop.getChildren()); } else { return false; } } else { return reflector.hasGetter(prop.getName()); } } ",
        "ins2PreCode":" public boolean hasSetter(String name) { PropertyTokenizer prop = new PropertyTokenizer(name); if (prop.hasNext()) { if (reflector.hasSetter(prop.getName())) { MetaClass metaProp = metaClassForProperty(prop.getName()); return metaProp.hasSetter(prop.getChildren()); } else { return false; } } else { return reflector.hasSetter(prop.getName()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public String buildSelectByNameOneParamAndProviderContext(ProviderContext context, final String name) { final boolean containsLogicalDelete = context.getMapperMethod().getAnnotation(BaseMapper.ContainsLogicalDelete.class) != null; final String tableName = context.getMapperType().getAnnotation(BaseMapper.Meta.class).tableName(); return new SQL(){{ SELECT(\"*\"); FROM(tableName); if (name != null) { WHERE(\"name like #{name} || '%'\"); } if (!containsLogicalDelete){ WHERE(\"logical_delete = ${LOGICAL_DELETE_OFF:0}\"); } }}.toString(); } ",
        "ins1PreCode":" public String buildSelectByNameOneParamAndProviderContext(ProviderContext context, final String name) { final boolean containsLogicalDelete = context.getMapperMethod().getAnnotation(BaseMapper.ContainsLogicalDelete.class) != null; final String tableName = context.getMapperType().getAnnotation(BaseMapper.Meta.class).tableName(); return new SQL(){{ SELECT(\"*\"); FROM(tableName); if (name != null) { WHERE(\"name like #{name} || '%'\"); } if (!containsLogicalDelete){ WHERE(\"logical_delete = false\"); } }}.toString(); } ",
        "ins2PreCode":" public String buildSelectByIdAndNameMultipleParamAndProviderContextWithAtParam(@Param(\"id\") final Integer id, ProviderContext context, @Param(\"name\") final String name) { final boolean containsLogicalDelete = context.getMapperMethod().getAnnotation(BaseMapper.ContainsLogicalDelete.class) != null; final String tableName = context.getMapperType().getAnnotation(BaseMapper.Meta.class).tableName(); return new SQL(){{ SELECT(\"*\"); FROM(tableName); if (id != null) { WHERE(\"id = #{id}\"); } if (name != null) { WHERE(\"name like #{name} || '%'\"); } if (!containsLogicalDelete){ WHERE(\"logical_delete = false\"); } }}.toString(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void shouldFailOverToMostApplicableSimpleName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String invalidName = \"unknown.namespace.MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); Assertions.assertThrows(IllegalArgumentException.class, () -> { c.getCache(invalidName); }); } ",
        "ins1PreCode":" public void shouldFailOverToMostApplicableSimpleName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String invalidName = \"unknown.namespace.MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); assertEquals(cache, c.getCache(invalidName)); } ",
        "ins2PreCode":" public void shouldResolveBothSimpleNameAndFullyQualifiedName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String shortName = \"MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); assertEquals(cache, c.getCache(shortName)); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldResolveBothSimpleNameAndFullyQualifiedName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String shortName = \"MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); assertEquals(cache, c.getCache(shortName)); } ",
        "ins1PreCode":" public void shouldResolveBothSimpleNameAndFullyQualifiedName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String shortName = \"MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); assertEquals(cache, c.getCache(shortName)); } ",
        "ins2PreCode":" public void shouldFailOverToMostApplicableSimpleName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String invalidName = \"unknown.namespace.MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); Assertions.assertThrows(IllegalArgumentException.class, () -> { c.getCache(invalidName); }); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldFailOverToMostApplicableSimpleName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String invalidName = \"unknown.namespace.MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); Assertions.assertThrows(IllegalArgumentException.class, () -> c.getCache(invalidName)); } ",
        "ins1PreCode":" public void shouldFailOverToMostApplicableSimpleName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String invalidName = \"unknown.namespace.MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); Assertions.assertThrows(IllegalArgumentException.class, () -> { c.getCache(invalidName); }); } ",
        "ins2PreCode":" public void shouldResolveBothSimpleNameAndFullyQualifiedName() { Configuration c = new Configuration(); final String fullName = \"com.mycache.MyCache\"; final String shortName = \"MyCache\"; final PerpetualCache cache = new PerpetualCache(fullName); c.addCache(cache); assertEquals(cache, c.getCache(fullName)); assertEquals(cache, c.getCache(shortName)); } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldNullItemNotStopIteration() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds()); Iterator<User> iterator = cursor.iterator(); Assertions.assertFalse(cursor.isOpen()); Assertions.assertEquals(-1, cursor.getCurrentIndex()); Assertions.assertTrue(iterator.hasNext()); Assertions.assertTrue(iterator.hasNext()); Assertions.assertTrue(cursor.isOpen()); Assertions.assertFalse(cursor.isConsumed()); Assertions.assertEquals(-1, cursor.getCurrentIndex()); User user; user = iterator.next(); Assertions.assertNull(user); Assertions.assertEquals(0, cursor.getCurrentIndex()); Assertions.assertTrue(iterator.hasNext()); user = iterator.next(); Assertions.assertEquals(\"Kate\", user.getName()); Assertions.assertEquals(1, cursor.getCurrentIndex()); Assertions.assertTrue(iterator.hasNext()); user = iterator.next(); Assertions.assertNull(user); Assertions.assertEquals(2, cursor.getCurrentIndex()); Assertions.assertTrue(iterator.hasNext()); user = iterator.next(); Assertions.assertNull(user); Assertions.assertEquals(3, cursor.getCurrentIndex()); Assertions.assertFalse(iterator.hasNext()); Assertions.assertFalse(cursor.isOpen()); Assertions.assertTrue(cursor.isConsumed()); } } ",
        "ins1PreCode":" void shouldNullItemNotStopIteration() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds()); Iterator<User> iterator = cursor.iterator(); assertFalse(cursor.isOpen()); assertEquals(-1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(cursor.isOpen()); assertFalse(cursor.isConsumed()); assertEquals(-1, cursor.getCurrentIndex()); User user; user = iterator.next(); assertNull(user); assertEquals(0, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertEquals(\"Kate\", user.getName()); assertEquals(1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(2, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(3, cursor.getCurrentIndex()); assertFalse(iterator.hasNext()); assertFalse(cursor.isOpen()); assertTrue(cursor.isConsumed()); } } ",
        "ins2PreCode":" void shouldRowBoundsCountNullItem() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds(1, 2)); Iterator<User> iterator = cursor.iterator(); assertFalse(cursor.isOpen()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(cursor.isOpen()); assertFalse(cursor.isConsumed()); User user; user = iterator.next(); assertEquals(\"Kate\", user.getName()); assertEquals(1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(2, cursor.getCurrentIndex()); assertFalse(iterator.hasNext()); assertFalse(cursor.isOpen()); assertTrue(cursor.isConsumed()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" void shouldRowBoundsCountNullItem() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds(1, 2)); Iterator<User> iterator = cursor.iterator(); Assertions.assertFalse(cursor.isOpen()); Assertions.assertTrue(iterator.hasNext()); Assertions.assertTrue(iterator.hasNext()); Assertions.assertTrue(cursor.isOpen()); Assertions.assertFalse(cursor.isConsumed()); User user; user = iterator.next(); Assertions.assertEquals(\"Kate\", user.getName()); Assertions.assertEquals(1, cursor.getCurrentIndex()); Assertions.assertTrue(iterator.hasNext()); user = iterator.next(); Assertions.assertNull(user); Assertions.assertEquals(2, cursor.getCurrentIndex()); Assertions.assertFalse(iterator.hasNext()); Assertions.assertFalse(cursor.isOpen()); Assertions.assertTrue(cursor.isConsumed()); } } ",
        "ins1PreCode":" void shouldRowBoundsCountNullItem() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds(1, 2)); Iterator<User> iterator = cursor.iterator(); assertFalse(cursor.isOpen()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(cursor.isOpen()); assertFalse(cursor.isConsumed()); User user; user = iterator.next(); assertEquals(\"Kate\", user.getName()); assertEquals(1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(2, cursor.getCurrentIndex()); assertFalse(iterator.hasNext()); assertFalse(cursor.isOpen()); assertTrue(cursor.isConsumed()); } } ",
        "ins2PreCode":" void shouldNullItemNotStopIteration() { try (SqlSession sqlSession = sqlSessionFactory.openSession()) { Mapper mapper = sqlSession.getMapper(Mapper.class); Cursor<User> cursor = mapper.getNullUsers(new RowBounds()); Iterator<User> iterator = cursor.iterator(); assertFalse(cursor.isOpen()); assertEquals(-1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(cursor.isOpen()); assertFalse(cursor.isConsumed()); assertEquals(-1, cursor.getCurrentIndex()); User user; user = iterator.next(); assertNull(user); assertEquals(0, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertEquals(\"Kate\", user.getName()); assertEquals(1, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(2, cursor.getCurrentIndex()); assertTrue(iterator.hasNext()); user = iterator.next(); assertNull(user); assertEquals(3, cursor.getCurrentIndex()); assertFalse(iterator.hasNext()); assertFalse(cursor.isOpen()); assertTrue(cursor.isConsumed()); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection(); initDb(conn); conn.close(); return sqlSessionFactory; } ",
        "ins1PreCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection(); initDb(conn); return sqlSessionFactory; } ",
        "ins2PreCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); Reader createScriptReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); runner.runScript(createScriptReader); sqlSession = sqlSessionFactory.openSession(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { batisConfigReader.close(); throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } batisConfigReader.close(); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); Reader createScriptReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); runner.runScript(createScriptReader); createScriptReader.close(); conn.close(); session.close(); sqlSession = sqlSessionFactory.openSession(); } ",
        "ins1PreCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); Reader createScriptReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); runner.runScript(createScriptReader); sqlSession = sqlSessionFactory.openSession(); } ",
        "ins2PreCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection(); initDb(conn); return sqlSessionFactory; } ",
        "label":0
    },
    {
        "ins1CurCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/serializecircular/CreateDB.sql\"); return sqlSessionFactory; } ",
        "ins1PreCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection(); initDb(conn); conn.close(); return sqlSessionFactory; } ",
        "ins2PreCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { batisConfigReader.close(); throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } batisConfigReader.close(); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); Reader createScriptReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); runner.runScript(createScriptReader); createScriptReader.close(); conn.close(); session.close(); sqlSession = sqlSessionFactory.openSession(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { batisConfigReader.close(); throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } batisConfigReader.close(); BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), \"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); sqlSession = sqlSessionFactory.openSession(); } ",
        "ins1PreCode":" public void openSession(String aConfig) throws Exception { final String resource = \"org/apache/ibatis/submitted/inline_association_with_dot/ibatis-\" + aConfig + \".xml\"; Reader batisConfigReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory; try { sqlSessionFactory = new SqlSessionFactoryBuilder().build(batisConfigReader); } catch(Exception anException) { batisConfigReader.close(); throw new RuntimeException(\"Mapper configuration failed, expected this to work: \" + anException.getMessage(), anException); } batisConfigReader.close(); SqlSession session = sqlSessionFactory.openSession(); Connection conn = session.getConnection(); ScriptRunner runner = new ScriptRunner(conn); runner.setLogWriter(null); runner.setErrorLogWriter(null); Reader createScriptReader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/inline_association_with_dot/create.sql\"); runner.runScript(createScriptReader); createScriptReader.close(); conn.close(); session.close(); sqlSession = sqlSessionFactory.openSession(); } ",
        "ins2PreCode":" private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception { Reader configReader = Resources.getResourceAsReader(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader); configReader.close(); Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection(); initDb(conn); conn.close(); return sqlSessionFactory; } ",
        "label":0
    }
]