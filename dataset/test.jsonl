[
    {
        "ins1CurCode":" void serializeV3WithJacksonReturnsValidJson() throws Exception { Map<String, HealthComponent> components = new LinkedHashMap<>(); components.put(\"db1\", Health.up().build()); components.put(\"db2\", Health.down().withDetail(\"a\", \"b\").build()); CompositeHealth health = new CompositeHealth(ApiVersion.V3, Status.UP, components); ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(health); assertThat(json).isEqualTo(\"{\\\"status\\\":\\\"UP\\\",\\\"components\\\":{\\\"db1\\\":{\\\"status\\\":\\\"UP\\\"},\" + \"\\\"db2\\\":{\\\"status\\\":\\\"DOWN\\\",\\\"details\\\":{\\\"a\\\":\\\"b\\\"}}}}\"); } ",
        "ins1PreCode":" void serializeV3WithJacksonReturnsValidJson() throws Exception { Map<String, HealthComponent> components = new LinkedHashMap<>(); components.put(\"db1\", Health.up().build()); components.put(\"db2\", Health.down().withDetail(\"a\", \"b\").build()); CompositeHealth health = new CompositeHealth(ApiVersion.V3, Status.UP, components); ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(health); assertThat(json).isEqualTo(\"{\\\"status\\\":\\\"UP\\\",\\\"components\\\":{\" + \"\\\"db1\\\":{\\\"status\\\":\\\"UP\\\"},\" + \"\\\"db2\\\":{\\\"status\\\":\\\"DOWN\\\",\\\"details\\\":{\\\"a\\\":\\\"b\\\"}}}}\"); } ",
        "ins2PreCode":" void serializeV2WithJacksonReturnsValidJson() throws Exception { Map<String, HealthComponent> components = new LinkedHashMap<>(); components.put(\"db1\", Health.up().build()); components.put(\"db2\", Health.down().withDetail(\"a\", \"b\").build()); CompositeHealth health = new CompositeHealth(ApiVersion.V2, Status.UP, components); ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(health); assertThat(json).isEqualTo(\"{\\\"status\\\":\\\"UP\\\",\\\"details\\\":{\" + \"\\\"db1\\\":{\\\"status\\\":\\\"UP\\\"},\" + \"\\\"db2\\\":{\\\"status\\\":\\\"DOWN\\\",\\\"details\\\":{\\\"a\\\":\\\"b\\\"}}}}\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void exceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); throw new RuntimeException(\"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isEqualTo(RuntimeException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)) .isInstanceOf(RuntimeException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\"); } ",
        "ins1PreCode":" public void exceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { super.doFilter(request, response); throw new RuntimeException(\"BAD\"); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isEqualTo(RuntimeException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)) .isInstanceOf(RuntimeException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\"); } ",
        "ins2PreCode":" public void subClassExceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new MockFilterChain() { @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { super.doFilter(request, response); throw new IllegalStateException(\"BAD\"); } }; this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)) .isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)) .isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isEqualTo(IllegalStateException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)) .isInstanceOf(IllegalStateException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)) .isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void exceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); throw new RuntimeException(\"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\"); } ",
        "ins1PreCode":" public void exceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); throw new RuntimeException(\"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); assertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\"); } ",
        "ins2PreCode":" public void subClassExceptionError() throws Exception { this.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\")); this.chain = new TestFilterChain((request, response, chain) -> { chain.call(); throw new IllegalStateException(\"BAD\"); }); this.filter.doFilter(this.request, this.response, this.chain); assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\"); Map<String, Object> requestAttributes = getAttributesForDispatch(\"/500\"); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)) .isEqualTo(IllegalStateException.class); assertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(IllegalStateException.class); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull(); assertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\"); assertThat(this.response.isCommitted()).isTrue(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void setIgnoreBeanInfoPropertyByDefault() { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); this.context = application.run(); String property = System .getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME); assertThat(property).isEqualTo(\"true\"); } ",
        "ins1PreCode":" public void setIgnoreBeanInfoPropertyByDefault() throws Exception { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); this.context = application.run(); String property = System .getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME); assertThat(property).isEqualTo(\"true\"); } ",
        "ins2PreCode":" public void disableIgnoreBeanInfoProperty() throws Exception { System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME, \"false\"); SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); this.context = application.run(); String property = System .getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME); assertThat(property).isEqualTo(\"false\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void javaBeanCollectionProperty() throws IOException { process(SimpleCollectionProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(SimpleCollectionProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"doubles\"); assertThat(property.getName()).isEqualTo(\"doubles\"); assertThat(property.getGetter().getSimpleName()).hasToString(\"getDoubles\"); assertThat(property.getSetter()).isNull(); assertThat(property.isProperty(metadataEnv)).isTrue(); assertThat(property.isNested(metadataEnv)).isFalse(); }); } ",
        "ins1PreCode":" public void javaBeanCollectionProperty() throws IOException { process(SimpleCollectionProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(SimpleCollectionProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"doubles\"); assertThat(property.getName()).isEqualTo(\"doubles\"); assertThat(property.getGetter().getSimpleName()).hasToString(\"getDoubles\"); assertThat(property.getSetter()).isNull(); assertThat(property.isProperty(metadataEnv)).isTrue(); assertThat(property.isNested(metadataEnv)).isFalse(); }); } ",
        "ins2PreCode":" public void lombokCollectionProperty() throws IOException { process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class); LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"items\"); assertThat(property.getName()).isEqualTo(\"items\"); assertThat(property.getSource()).isSameAs(property.getField()); assertThat(property.getField().getSimpleName()).hasToString(\"items\"); assertThat(property.isProperty(metadataEnv)).isTrue(); assertThat(property.isNested(metadataEnv)).isFalse(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void propertiesFileEnhancesEnvironment() { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "ins1PreCode":" public void propertiesFileEnhancesEnvironment() throws Exception { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "ins2PreCode":" public void emptyCommandLinePropertySourceNotAdded() throws Exception { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void propertiesFileEnhancesEnvironment() { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "ins1PreCode":" public void propertiesFileEnhancesEnvironment() { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "ins2PreCode":" public void emptyCommandLinePropertySourceNotAdded() { SpringApplication application = new SpringApplication(ExampleConfig.class); application.setWebApplicationType(WebApplicationType.NONE); ConfigurableEnvironment environment = new StandardEnvironment(); application.setEnvironment(environment); this.context = application.run(); assertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void getAccessLevelWhenTokenIsNotValidShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withUnauthorizedRequest()); this.thrown .expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN)); this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"); } ",
        "ins1PreCode":" public void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withUnauthorizedRequest()); this.thrown .expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN)); this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"); } ",
        "ins2PreCode":" public void getAccessLevelWhenForbiddenShouldThrowException() throws Exception { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withStatus(HttpStatus.FORBIDDEN)); this.thrown .expect(AuthorizationExceptionMatcher.withReason(Reason.ACCESS_DENIED)); this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void getAccessLevelWhenTokenIsNotValidShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withUnauthorizedRequest()); assertThatExceptionOfType(CloudFoundryAuthorizationException.class).isThrownBy( () -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\")) .satisfies(reasonRequirement(Reason.INVALID_TOKEN)); } ",
        "ins1PreCode":" public void getAccessLevelWhenTokenIsNotValidShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withUnauthorizedRequest()); this.thrown .expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN)); this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"); } ",
        "ins2PreCode":" public void getAccessLevelWhenForbiddenShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withStatus(HttpStatus.FORBIDDEN)); this.thrown .expect(AuthorizationExceptionMatcher.withReason(Reason.ACCESS_DENIED)); this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getAccessLevelWhenTokenIsNotValidShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withUnauthorizedRequest()); assertThatExceptionOfType(CloudFoundryAuthorizationException.class) .isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\")) .satisfies(reasonRequirement(Reason.INVALID_TOKEN)); } ",
        "ins1PreCode":" public void getAccessLevelWhenTokenIsNotValidShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withUnauthorizedRequest()); assertThatExceptionOfType(CloudFoundryAuthorizationException.class) .isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\")) .satisfies(reasonRequirement(Reason.INVALID_TOKEN)); } ",
        "ins2PreCode":" public void getAccessLevelWhenForbiddenShouldThrowException() { this.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS)) .andExpect(header(\"Authorization\", \"bearer my-access-token\")) .andRespond(withStatus(HttpStatus.FORBIDDEN)); assertThatExceptionOfType(CloudFoundryAuthorizationException.class) .isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\")) .satisfies(reasonRequirement(Reason.ACCESS_DENIED)); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void javaBeanDeprecatedPropertyOnClass() throws IOException { process(org.springframework.boot.configurationsample.simple.DeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement( org.springframework.boot.configurationsample.simple.DeprecatedProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor( ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty() .isDeprecatedWithNoInformation(); }); } ",
        "ins1PreCode":" public void javaBeanDeprecatedPropertyOnClass() throws IOException { process(DeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv .getRootElement(DeprecatedProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty() .isDeprecatedWithNoInformation(); }); } ",
        "ins2PreCode":" public void lombokDeprecatedPropertyOnClass() throws IOException { process(LombokDeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv .getRootElement(LombokDeprecatedProperties.class); LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty() .isDeprecatedWithNoInformation(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void javaBeanDeprecatedPropertyOnClass() throws IOException { process(org.springframework.boot.configurationsample.simple.DeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement( org.springframework.boot.configurationsample.simple.DeprecatedProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty().isDeprecatedWithNoInformation(); }); } ",
        "ins1PreCode":" public void javaBeanDeprecatedPropertyOnClass() throws IOException { process(org.springframework.boot.configurationsample.simple.DeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement( org.springframework.boot.configurationsample.simple.DeprecatedProperties.class); JavaBeanPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty().isDeprecatedWithNoInformation(); }); } ",
        "ins2PreCode":" public void lombokDeprecatedPropertyOnClass() throws IOException { process(org.springframework.boot.configurationsample.lombok.LombokDeprecatedProperties.class, (roundEnv, metadataEnv) -> { TypeElement ownerElement = roundEnv.getRootElement( org.springframework.boot.configurationsample.lombok.LombokDeprecatedProperties.class); LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, \"name\"); assertItemMetadata(metadataEnv, property).isProperty().isDeprecatedWithNoInformation(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void ignoresUnmappedUrl() throws Exception { this.context = getContext( () -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(\"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"supersecret\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins1PreCode":" public void ignoresUnmappedUrl() throws Exception { loadContext(\"spring.devtools.remote.secret:supersecret\"); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(\"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"supersecret\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins2PreCode":" public void ignoresIfMissingSecretFromRequest() throws Exception { loadContext(\"spring.devtools.remote.secret:supersecret\"); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "label":1
    },
    {
        "ins1CurCode":" void ignoresUnmappedUrl() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(\"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"supersecret\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins1PreCode":" public void ignoresUnmappedUrl() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(\"/restart\"); this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, \"supersecret\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "ins2PreCode":" public void ignoresIfMissingSecretFromRequest() throws Exception { this.context = getContext(() -> loadContext(\"spring.devtools.remote.secret:supersecret\")); DispatcherFilter filter = this.context.getBean(DispatcherFilter.class); this.request.setRequestURI(DEFAULT_CONTEXT_PATH + \"/restart\"); filter.doFilter(this.request, this.response, this.chain); assertRestartInvoked(false); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testMaxHistoryPropertyWithXmlConfiguration() { this.environment.setProperty(\"logging.file.max-history\", \"30\"); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment); File file = new File(tmpDir(), \"logback-test.log\"); LogFile logFile = getLogFile(file.getPath(), null); initialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(getRollingPolicy().getMaxHistory()).isEqualTo(30); } ",
        "ins1PreCode":" void testMaxHistoryPropertyWithXmlConfiguration() { MockEnvironment environment = new MockEnvironment(); environment.setProperty(\"logging.file.max-history\", \"30\"); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment); File file = new File(tmpDir(), \"logback-test.log\"); LogFile logFile = getLogFile(file.getPath(), null); this.loggingSystem.initialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(getRollingPolicy().getMaxHistory()).isEqualTo(30); } ",
        "ins2PreCode":" private void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) { MockEnvironment environment = new MockEnvironment(); environment.setProperty(\"logging.file.total-size-cap\", sizeValue); LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment); File file = new File(tmpDir(), \"logback-test.log\"); LogFile logFile = getLogFile(file.getPath(), null); this.loggingSystem.initialize(loggingInitializationContext, null, logFile); this.logger.info(\"Hello world\"); assertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\"); assertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\").toString()) .isEqualTo(expectedFileSize); } ",
        "label":1
    },
    {
        "ins1CurCode":" void callbacksInvokeAndWhenNoGenericShouldReturnResult() { NonGenericFactory callbackInstance = mock(NonGenericFactory.class); String argument = \"foo\"; given(callbackInstance.handle(\"foo\")).willReturn(123); Stream<Integer> result = LambdaSafe .callbacks(NonGenericFactory.class, Collections.singleton(callbackInstance), argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result).containsExactly(123); } ",
        "ins1PreCode":" public void callbacksInvokeAndWhenNoGenericShouldReturnResult() { NonGenericFactory callbackInstance = mock(NonGenericFactory.class); String argument = \"foo\"; given(callbackInstance.handle(\"foo\")).willReturn(123); Stream<Integer> result = LambdaSafe .callbacks(NonGenericFactory.class, Collections.singleton(callbackInstance), argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result).containsExactly(123); } ",
        "ins2PreCode":" public void callbacksInvokeAndWhenHasGenericShouldReturnResult() { StringFactory callbackInstance = mock(StringFactory.class); String argument = \"foo\"; given(callbackInstance.handle(\"foo\")).willReturn(123); Stream<Integer> result = LambdaSafe .callbacks(GenericFactory.class, Collections.singleton(callbackInstance), argument) .invokeAnd((c) -> c.handle(argument)); assertThat(result).containsExactly(123); } ",
        "label":1
    },
    {
        "ins1CurCode":" protected ConfigurableApplicationContext getContext( Supplier<ConfigurableApplicationContext> supplier) throws Exception { AtomicReference<ConfigurableApplicationContext> atomicReference = new AtomicReference<>(); Thread thread = new Thread(() -> { ConfigurableApplicationContext context = supplier.get(); atomicReference.getAndSet(context); }); thread.start(); thread.join(); return atomicReference.get(); } ",
        "ins1PreCode":" protected ConfigurableApplicationContext getContext( Supplier<ConfigurableApplicationContext> supplier) throws Exception { CountDownLatch latch = new CountDownLatch(1); AtomicReference<ConfigurableApplicationContext> atomicReference = new AtomicReference<>(); Thread thread = new Thread(() -> { ConfigurableApplicationContext context = supplier.get(); latch.countDown(); atomicReference.getAndSet(context); }); thread.start(); thread.join(); return atomicReference.get(); } ",
        "ins2PreCode":" private AnnotationConfigServletWebApplicationContext getContext( Supplier<AnnotationConfigServletWebApplicationContext> supplier) throws Exception { CountDownLatch latch = new CountDownLatch(1); AtomicReference<AnnotationConfigServletWebApplicationContext> atomicReference = new AtomicReference<>(); Thread thread = new Thread(() -> { AnnotationConfigServletWebApplicationContext context = supplier.get(); latch.countDown(); atomicReference.getAndSet(context); }); thread.start(); thread.join(); return atomicReference.get(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void contextIsAddedToHostBeforeCustomizersAreCalled() throws Exception { TomcatServletWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); willAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { assertThat(((Context) invocation.getArguments()[0]).getParent()) .isNotNull(); return null; } }).given(customizer).customize(any(Context.class)); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(); verify(customizer).customize(any(Context.class)); } ",
        "ins1PreCode":" public void contextIsAddedToHostBeforeCustomizersAreCalled() throws Exception { TomcatServletWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { assertThat(((Context) invocation.getArguments()[0]).getParent()) .isNotNull(); return null; } }).when(customizer).customize(any(Context.class)); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(); verify(customizer).customize(any(Context.class)); } ",
        "ins2PreCode":" public void contextIsAddedToHostBeforeCustomizersAreCalled() throws Exception { TomcatReactiveWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { assertThat(((Context) invocation.getArguments()[0]).getParent()) .isNotNull(); return null; } }).when(customizer).customize(any(Context.class)); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(mock(HttpHandler.class)); verify(customizer).customize(any(Context.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void contextIsAddedToHostBeforeCustomizersAreCalled() { TomcatServletWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(); ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class); verify(customizer).customize(contextCaptor.capture()); assertThat(contextCaptor.getValue().getParent()).isNotNull(); } ",
        "ins1PreCode":" public void contextIsAddedToHostBeforeCustomizersAreCalled() { TomcatServletWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(); ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class); verify(customizer).customize(contextCaptor.capture()); assertThat(contextCaptor.getValue().getParent()).isNotNull(); } ",
        "ins2PreCode":" public void contextIsAddedToHostBeforeCustomizersAreCalled() { TomcatReactiveWebServerFactory factory = getFactory(); TomcatContextCustomizer customizer = mock(TomcatContextCustomizer.class); factory.addContextCustomizers(customizer); this.webServer = factory.getWebServer(mock(HttpHandler.class)); ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class); verify(customizer).customize(contextCaptor.capture()); assertThat(contextCaptor.getValue().getParent()).isNotNull(); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0, this.activationContext); ConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 1, this.activationContext); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins1PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0, this.activationContext); ConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 1, this.activationContext); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins2PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0, this.activationContext); ConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 1, this.activationContext); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0); ConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins1PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0, this.activationContext); ConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 1, this.activationContext); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins2PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0, this.activationContext); ConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 1, this.activationContext); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0); ConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapContext, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins1PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); firstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0); ConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "ins2PreCode":" void getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException() { MockPropertySource firstPropertySource = new MockPropertySource(); firstPropertySource.setProperty(\"test\", \"one\"); MockPropertySource secondPropertySource = new MockPropertySource(); secondPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\"); secondPropertySource.setProperty(\"test\", \"two\"); ConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource)); ConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0); ConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1); ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor)); Binder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE); assertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class)) .satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class)); } ",
        "label":1
    },
    {
        "ins1CurCode":" void defaultRollingFileNamePattern() throws JoranException { JoranConfigurator configurator = new JoranConfigurator(); LoggerContext context = new LoggerContext(); configurator.setContext(context); configurator.doConfigure(new File(\"src/test/resources/custom-file-log-pattern.xml\")); Appender<ILoggingEvent> appender = context.getLogger(\"ROOT\").getAppender(\"FILE\"); assertThat(appender).isInstanceOf(RollingFileAppender.class); RollingPolicy rollingPolicy = ((RollingFileAppender<?>) appender).getRollingPolicy(); String fileNamePattern = ((SizeAndTimeBasedRollingPolicy<?>) rollingPolicy).getFileNamePattern(); assertThat(fileNamePattern).endsWith(\"spring.log.%d{yyyy-MM-dd}.%i.gz\"); } ",
        "ins1PreCode":" void defaultRollingFileNamePattern() throws JoranException { JoranConfigurator configurator = new JoranConfigurator(); LoggerContext context = new LoggerContext(); configurator.setContext(context); configurator.doConfigure(new File(\"src/test/resources/custom-file-log-pattern.xml\")); Appender<ILoggingEvent> appender = context.getLogger(\"ROOT\").getAppender(\"FILE\"); assertThat(appender).isInstanceOf(RollingFileAppender.class); RollingPolicy rollingPolicy = ((RollingFileAppender<?>) appender).getRollingPolicy(); String fileNamePattern = ((SizeAndTimeBasedRollingPolicy) rollingPolicy).getFileNamePattern(); assertThat(fileNamePattern).endsWith(\"spring.log.%d{yyyy-MM-dd}.%i.gz\"); } ",
        "ins2PreCode":" void customRollingFileNamePattern() throws JoranException { JoranConfigurator configurator = new JoranConfigurator(); LoggerContext context = new LoggerContext(); configurator.setContext(context); configurator.doConfigure(new File(\"src/test/resources/custom-file-log-pattern-with-fileNamePattern.xml\")); Appender<ILoggingEvent> appender = context.getLogger(\"ROOT\").getAppender(\"FILE\"); assertThat(appender).isInstanceOf(RollingFileAppender.class); RollingPolicy rollingPolicy = ((RollingFileAppender<?>) appender).getRollingPolicy(); String fileNamePattern = ((SizeAndTimeBasedRollingPolicy) rollingPolicy).getFileNamePattern(); assertThat(fileNamePattern).endsWith(\"my.log.%d{yyyyMMdd}.%i.gz\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void createCreatesContributorsBasedOnExistingSources() { MockPropertySource propertySource1 = new MockPropertySource(\"p1\"); MockPropertySource propertySource2 = new MockPropertySource(\"p2\"); MockPropertySource propertySource3 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); this.environment.getPropertySources().addLast(propertySource3); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(propertySource3); } ",
        "ins1PreCode":" void createCreatesContributorsBasedOnExistingSources() { MockPropertySource propertySource1 = new MockPropertySource(\"p1\"); MockPropertySource propertySource2 = new MockPropertySource(\"p2\"); MockPropertySource propertySource3 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); this.environment.getPropertySources().addLast(propertySource3); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(propertySource3); } ",
        "ins2PreCode":" void createWhenHasDefaultPropertySourceMovesItToLastContributor() { MockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\"); MockPropertySource propertySource1 = new MockPropertySource(\"p2\"); MockPropertySource propertySource2 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(defaultPropertySource); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(defaultPropertySource); } ",
        "label":1
    },
    {
        "ins1CurCode":" void createCreatesContributorsBasedOnExistingSources() { MockPropertySource propertySource1 = new MockPropertySource(\"p1\"); MockPropertySource propertySource2 = new MockPropertySource(\"p2\"); MockPropertySource propertySource3 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); this.environment.getPropertySources().addLast(propertySource3); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(propertySource3); } ",
        "ins1PreCode":" void createCreatesContributorsBasedOnExistingSources() { MockPropertySource propertySource1 = new MockPropertySource(\"p1\"); MockPropertySource propertySource2 = new MockPropertySource(\"p2\"); MockPropertySource propertySource3 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); this.environment.getPropertySources().addLast(propertySource3); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(propertySource3); } ",
        "ins2PreCode":" void createWhenHasDefaultPropertySourceMovesItToLastContributor() { MockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\"); MockPropertySource propertySource1 = new MockPropertySource(\"p2\"); MockPropertySource propertySource2 = new MockPropertySource(\"p3\"); this.environment.getPropertySources().addLast(defaultPropertySource); this.environment.getPropertySources().addLast(propertySource1); this.environment.getPropertySources().addLast(propertySource2); ConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry, this.environment, this.resourceLoader, this.additionalProfiles); List<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot() .getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION); Object[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING) .map(ConfigDataEnvironmentContributor::getPropertySource).toArray(); assertThat(wrapped[1]).isEqualTo(propertySource1); assertThat(wrapped[2]).isEqualTo(propertySource2); assertThat(wrapped[3]).isEqualTo(defaultPropertySource); } ",
        "label":1
    },
    {
        "ins1CurCode":" void configureShouldApplyFilter() { given(this.mockRegistry.config()).willReturn(this.mockConfig); this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins1PreCode":" void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins2PreCode":" void configureShouldApplyBinder() { this.binders.add(this.mockBinder); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockBinder).bindTo(this.mockRegistry); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer( createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins1PreCode":" public void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders, this.filters, this.customizers, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins2PreCode":" public void configureShouldApplyBinder() { this.binders.add(this.mockBinder); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders, this.filters, this.customizers, false); configurer.configure(this.mockRegistry); verify(this.mockBinder).bindTo(this.mockRegistry); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer( createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins1PreCode":" public void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer( createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins2PreCode":" public void configureShouldApplyBinder() { this.binders.add(this.mockBinder); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer( createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false); configurer.configure(this.mockRegistry); verify(this.mockBinder).bindTo(this.mockRegistry); } ",
        "label":1
    },
    {
        "ins1CurCode":" void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins1PreCode":" public void configureShouldApplyFilter() { this.filters.add(this.mockFilter); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockConfig).meterFilter(this.mockFilter); } ",
        "ins2PreCode":" public void configureShouldApplyBinder() { this.binders.add(this.mockBinder); MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false, false); configurer.configure(this.mockRegistry); verify(this.mockBinder).bindTo(this.mockRegistry); } ",
        "label":1
    },
    {
        "ins1CurCode":" void immutableSimpleProperties() { ConfigurationMetadata metadata = compile(ImmutableSimpleProperties.class); assertThat(metadata).has(Metadata.withGroup(\"immutable\").fromSource(ImmutableSimpleProperties.class)); assertThat(metadata).has( Metadata.withProperty(\"immutable.the-name\", String.class).fromSource(ImmutableSimpleProperties.class) .withDescription(\"The name of this simple properties.\").withDefaultValue(\"boot\")); assertThat(metadata).has(Metadata.withProperty(\"immutable.flag\", Boolean.class).withDefaultValue(false) .fromSource(ImmutableSimpleProperties.class).withDescription(\"A simple flag.\") .withDeprecation(null, null)); assertThat(metadata).has(Metadata.withProperty(\"immutable.comparator\")); assertThat(metadata).has(Metadata.withProperty(\"immutable.counter\")); assertThat(metadata.getItems()).hasSize(5); } ",
        "ins1PreCode":" public void immutableSimpleProperties() { ConfigurationMetadata metadata = compile(ImmutableSimpleProperties.class); assertThat(metadata).has(Metadata.withGroup(\"immutable\").fromSource(ImmutableSimpleProperties.class)); assertThat(metadata).has( Metadata.withProperty(\"immutable.the-name\", String.class).fromSource(ImmutableSimpleProperties.class) .withDescription(\"The name of this simple properties.\").withDefaultValue(\"boot\")); assertThat(metadata).has(Metadata.withProperty(\"immutable.flag\", Boolean.class).withDefaultValue(false) .fromSource(ImmutableSimpleProperties.class).withDescription(\"A simple flag.\") .withDeprecation(null, null)); assertThat(metadata).has(Metadata.withProperty(\"immutable.comparator\")); assertThat(metadata).has(Metadata.withProperty(\"immutable.counter\")); assertThat(metadata.getItems()).hasSize(5); } ",
        "ins2PreCode":" public void simpleProperties() { ConfigurationMetadata metadata = compile(SimpleProperties.class); assertThat(metadata).has(Metadata.withGroup(\"simple\").fromSource(SimpleProperties.class)); assertThat(metadata).has(Metadata.withProperty(\"simple.the-name\", String.class) .fromSource(SimpleProperties.class).withDescription(\"The name of this simple properties.\") .withDefaultValue(\"boot\").withDeprecation(null, null)); assertThat(metadata).has(Metadata.withProperty(\"simple.flag\", Boolean.class).withDefaultValue(false) .fromSource(SimpleProperties.class).withDescription(\"A simple flag.\").withDeprecation(null, null)); assertThat(metadata).has(Metadata.withProperty(\"simple.comparator\")); assertThat(metadata).doesNotHave(Metadata.withProperty(\"simple.counter\")); assertThat(metadata).doesNotHave(Metadata.withProperty(\"simple.size\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void toAnyEndpointWhenApplicationPathSetShouldMatch() { getContextRunner() .withPropertyValues(\"spring.jersey.application-path=/admin\", \"spring.security.user.password=password\") .run((context) -> { WebTestClient webTestClient = getWebTestClient(context); webTestClient.get().uri(\"/admin/actuator/e2\").exchange().expectStatus().isUnauthorized(); webTestClient.get().uri(\"/admin/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange() .expectStatus().isOk(); }); } ",
        "ins1PreCode":" public void toAnyEndpointWhenApplicationPathSetShouldMatch() { getContextRunner() .withPropertyValues(\"spring.jersey.application-path=/admin\", \"spring.security.user.password=password\") .run((context) -> { WebTestClient webTestClient = getWebTestClient(context); webTestClient.get().uri(\"/admin/actuator/e2\").exchange().expectStatus().isUnauthorized(); webTestClient.get().uri(\"/admin/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange() .expectStatus().isOk(); }); } ",
        "ins2PreCode":" public void toAnyEndpointWhenServletPathSetShouldMatch() { getContextRunner() .withPropertyValues(\"spring.mvc.servlet.path=/admin\", \"spring.security.user.password=password\") .run((context) -> { WebTestClient webTestClient = getWebTestClient(context); webTestClient.get().uri(\"/admin/actuator/e2\").exchange().expectStatus().isUnauthorized(); webTestClient.get().uri(\"/admin/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange() .expectStatus().isOk(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void getLoggingConfigurations() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem .getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()) .isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "ins1PreCode":" public void getLoggingConfigurations() throws Exception { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem .getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()) .isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "ins2PreCode":" public void getLoggingConfigurations() throws Exception { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem .getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()) .isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getLoggingConfigurations() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "ins1PreCode":" public void getLoggingConfigurations() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(this.initializationContext, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "ins2PreCode":" public void getLoggingConfigurations() { this.loggingSystem.beforeInitialize(); this.loggingSystem.initialize(null, null, null); this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG); List<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations(); assertThat(configurations).isNotEmpty(); assertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = new ArrayList<>(); launcher.getClassPathArchivesIterator().forEachRemaining(archives::add); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins1PreCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = CollectionUtils.iteratorToList(launcher.getClassPathArchivesIterator()); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins2PreCode":" void testUserSpecifiedRootOfJarPath() throws Exception { System.setProperty(\"loader.path\", \"jar:file:./src/test/resources/nested-jars/app.jar!/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jar:file:./src/test/resources/nested-jars/app.jar!/]\"); List<Archive> archives = CollectionUtils.iteratorToList(launcher.getClassPathArchivesIterator()); assertThat(archives).areExactly(1, endingWith(\"foo.jar!/\")); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); this.launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(this.launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = new ArrayList<>(); this.launcher.getClassPathArchivesIterator().forEachRemaining(archives::add); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins1PreCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = new ArrayList<>(); launcher.getClassPathArchivesIterator().forEachRemaining(archives::add); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins2PreCode":" void testUserSpecifiedRootOfJarPath() throws Exception { System.setProperty(\"loader.path\", \"jar:file:./src/test/resources/nested-jars/app.jar!/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jar:file:./src/test/resources/nested-jars/app.jar!/]\"); List<Archive> archives = new ArrayList<>(); launcher.getClassPathArchivesIterator().forEachRemaining(archives::add); assertThat(archives).areExactly(1, endingWith(\"foo.jar!/\")); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jars/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins1PreCode":" public void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jars/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"app.jar!/\")); } ",
        "ins2PreCode":" public void testUserSpecifiedRootOfJarPath() throws Exception { System.setProperty(\"loader.path\", \"jar:file:./src/test/resources/nested-jars/app.jar!/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jar:file:./src/test/resources/nested-jars/app.jar!/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"foo.jar!/\")); assertThat(archives).areExactly(1, endingWith(\"app.jar!/\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins1PreCode":" public void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins2PreCode":" public void testUserSpecifiedRootOfJarPath() throws Exception { System.setProperty(\"loader.path\", \"jar:file:./src/test/resources/nested-jars/app.jar!/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jar:file:./src/test/resources/nested-jars/app.jar!/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"foo.jar!/\")); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = CollectionUtils.iteratorToList(launcher.getClassPathArchivesIterator()); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins1PreCode":" void testUserSpecifiedSlashPath() throws Exception { System.setProperty(\"loader.path\", \"jars/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()).isEqualTo(\"[jars/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "ins2PreCode":" void testUserSpecifiedRootOfJarPath() throws Exception { System.setProperty(\"loader.path\", \"jar:file:./src/test/resources/nested-jars/app.jar!/\"); PropertiesLauncher launcher = new PropertiesLauncher(); assertThat(ReflectionTestUtils.getField(launcher, \"paths\").toString()) .isEqualTo(\"[jar:file:./src/test/resources/nested-jars/app.jar!/]\"); List<Archive> archives = launcher.getClassPathArchives(); assertThat(archives).areExactly(1, endingWith(\"foo.jar!/\")); assertThat(archives).areExactly(1, endingWith(\"app.jar\")); } ",
        "label":1
    },
    {
        "ins1CurCode":" void reasonIsProvidedIfPropertyCouldNotBeRenamed() throws IOException { this.environment.getPropertySources() .addFirst(loadPropertySource(\"test\", \"config/config-error-no-compatible-type.properties\")); String report = createErrorReport(loadRepository(\"metadata/type-conversion-metadata.json\")); assertThat(report).isNotNull(); assertThat(report).containsSubsequence(\"Property source 'test'\", \"wrong.inconvertible\", \"Line: 1\", \"Reason: Replacement key \" + \"'test.inconvertible' uses an incompatible target type\"); } ",
        "ins1PreCode":" public void reasonIsProvidedIfPropertyCouldNotBeRenamed() throws IOException { this.environment.getPropertySources() .addFirst(loadPropertySource(\"test\", \"config/config-error-no-compatible-type.properties\")); String report = createErrorReport(loadRepository(\"metadata/type-conversion-metadata.json\")); assertThat(report).isNotNull(); assertThat(report).containsSubsequence(\"Property source 'test'\", \"wrong.inconvertible\", \"Line: 1\", \"Reason: Replacement key \" + \"'test.inconvertible' uses an incompatible target type\"); } ",
        "ins2PreCode":" public void invalidReplacementHandled() throws IOException { this.environment.getPropertySources() .addFirst(loadPropertySource(\"first\", \"config/config-error-invalid-replacement.properties\")); String report = createErrorReport(loadRepository(\"metadata/sample-metadata-invalid-replacement.json\")); assertThat(report).isNotNull(); assertThat(report).containsSubsequence(\"Property source 'first'\", \"deprecated.six.test\", \"Line: 1\", \"Reason\", \"No metadata found for replacement key 'does.not.exist'\"); assertThat(report).doesNotContain(\"null\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> { InfluxMeterRegistry registry = context.getBean(InfluxMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "ins1PreCode":" public void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> { InfluxMeterRegistry registry = context.getBean(InfluxMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "ins2PreCode":" public void stopsMeterRegistryWhenContextIsClosed() { this.contextRunner.withUserConfiguration(BaseConfiguration.class) .withPropertyValues(\"management.metrics.export.datadog.api-key=abcde\").run((context) -> { DatadogMeterRegistry registry = context.getBean(DatadogMeterRegistry.class); assertThat(registry.isClosed()).isFalse(); context.close(); assertThat(registry.isClosed()).isTrue(); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" void toLinksShouldOnlyMatchLinks() { ServerWebExchangeMatcher matcher = EndpointRequest.toLinks(); assertMatcher(matcher).doesNotMatch(\"/actuator/foo\"); assertMatcher(matcher).doesNotMatch(\"/actuator/bar\"); assertMatcher(matcher).matches(\"/actuator\"); assertMatcher(matcher).matches(\"/actuator/\"); } ",
        "ins1PreCode":" public void toLinksShouldOnlyMatchLinks() { ServerWebExchangeMatcher matcher = EndpointRequest.toLinks(); assertMatcher(matcher).doesNotMatch(\"/actuator/foo\"); assertMatcher(matcher).doesNotMatch(\"/actuator/bar\"); assertMatcher(matcher).matches(\"/actuator\"); assertMatcher(matcher).matches(\"/actuator/\"); } ",
        "ins2PreCode":" public void toLinksShouldOnlyMatchLinks() { RequestMatcher matcher = EndpointRequest.toLinks(); assertMatcher(matcher).doesNotMatch(\"/actuator/foo\"); assertMatcher(matcher).doesNotMatch(\"/actuator/bar\"); assertMatcher(matcher).matches(\"/actuator\"); assertMatcher(matcher).matches(\"/actuator/\"); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream()).hasSize(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream()).hasSize(3); } ",
        "ins1PreCode":" public void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream().count()).isEqualTo(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream().count()).isEqualTo(3); } ",
        "ins2PreCode":" public void readOnlyOriginTrackedMapPropertySourceKeyAdditionDoesNotInvalidateCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map, true); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream().count()).isEqualTo(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream().count()).isEqualTo(2); } ",
        "label":1
    },
    {
        "ins1CurCode":" void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream()).hasSize(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream()).hasSize(3); } ",
        "ins1PreCode":" public void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream()).hasSize(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream()).hasSize(3); } ",
        "ins2PreCode":" public void readOnlyOriginTrackedMapPropertySourceKeyAdditionDoesNotInvalidateCache() { Map<String, Object> map = new LinkedHashMap<>(); map.put(\"key1\", \"value1\"); map.put(\"key2\", \"value2\"); EnumerablePropertySource<?> source = new OriginTrackedMapPropertySource(\"test\", map, true); SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE); assertThat(adapter.stream()).hasSize(2); map.put(\"key3\", \"value3\"); assertThat(adapter.stream()).hasSize(2); } ",
        "label":1
    },
    {
        "ins1CurCode":" void beanMethods() throws Exception { MockAtomikosDataSourceBean bean = spy(new MockAtomikosDataSourceBean()); bean.setBeanName(\"bean\"); bean.afterPropertiesSet(); assertThat(bean.getUniqueResourceName()).isEqualTo(\"bean\"); verify(bean).init(); verify(bean, never()).close(); bean.destroy(); verify(bean).close(); } ",
        "ins1PreCode":" public void beanMethods() throws Exception { MockAtomikosDataSourceBean bean = spy(new MockAtomikosDataSourceBean()); bean.setBeanName(\"bean\"); bean.afterPropertiesSet(); assertThat(bean.getUniqueResourceName()).isEqualTo(\"bean\"); verify(bean).init(); verify(bean, never()).close(); bean.destroy(); verify(bean).close(); } ",
        "ins2PreCode":" public void beanMethods() throws Exception { MockAtomikosConnectionFactoryBean bean = spy(new MockAtomikosConnectionFactoryBean()); bean.setBeanName(\"bean\"); bean.afterPropertiesSet(); assertThat(bean.getUniqueResourceName()).isEqualTo(\"bean\"); verify(bean).init(); verify(bean, never()).close(); bean.destroy(); verify(bean).close(); } ",
        "label":1
    },
    {
        "ins1CurCode":" public void getEndpointsShouldIncludeServletEndpoints() { this.contextRunner.withUserConfiguration(TestServletEndpoint.class) .run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer .getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getEndpointId()) .isEqualTo(EndpointId.of(\"testservlet\")); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "ins1PreCode":" public void getEndpointsShouldIncludeServletEndpoints() { this.contextRunner.withUserConfiguration(TestServletEndpoint.class) .run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer .getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getId()).isEqualTo(\"testservlet\"); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "ins2PreCode":" public void getEndpointsShouldDiscoverProxyServletEndpoints() { this.contextRunner.withUserConfiguration(TestProxyServletEndpoint.class) .withConfiguration( AutoConfigurations.of(ValidationAutoConfiguration.class)) .run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer .getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getId()).isEqualTo(\"testservlet\"); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "label":1
    },
    {
        "ins1CurCode":" void getEndpointsShouldIncludeServletEndpoints() { this.contextRunner.withUserConfiguration(TestServletEndpoint.class).run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testservlet\")); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "ins1PreCode":" public void getEndpointsShouldIncludeServletEndpoints() { this.contextRunner.withUserConfiguration(TestServletEndpoint.class).run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testservlet\")); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "ins2PreCode":" public void getEndpointsShouldDiscoverProxyServletEndpoints() { this.contextRunner.withUserConfiguration(TestProxyServletEndpoint.class) .withConfiguration(AutoConfigurations.of(ValidationAutoConfiguration.class)) .run(assertDiscoverer((discoverer) -> { Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints(); assertThat(endpoints).hasSize(1); ExposableServletEndpoint endpoint = endpoints.iterator().next(); assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testservlet\")); assertThat(endpoint.getEndpointServlet()).isNotNull(); assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class); })); } ",
        "label":1
    },
    {
        "ins1CurCode":" private ExposableControllerEndpoint mockEndpoint(EndpointId id, Object controller) { ExposableControllerEndpoint endpoint = mock(ExposableControllerEndpoint.class); given(endpoint.getEndpointId()).willReturn(id); given(endpoint.getController()).willReturn(controller); given(endpoint.getRootPath()).willReturn(id.toString()); return endpoint; } ",
        "ins1PreCode":" private ExposableControllerEndpoint mockEndpoint(String id, Object controller) { ExposableControllerEndpoint endpoint = mock(ExposableControllerEndpoint.class); given(endpoint.getId()).willReturn(id); given(endpoint.getController()).willReturn(controller); given(endpoint.getRootPath()).willReturn(id); return endpoint; } ",
        "ins2PreCode":" private ExposableControllerEndpoint mockEndpoint(String id, Object controller) { ExposableControllerEndpoint endpoint = mock(ExposableControllerEndpoint.class); given(endpoint.getId()).willReturn(id); given(endpoint.getController()).willReturn(controller); given(endpoint.getRootPath()).willReturn(id); return endpoint; } ",
        "label":1
    },
    {
        "ins1CurCode":" void loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator() { assertThatExceptionOfType(Exception.class).isThrownBy(() -> load(WithCustomValidatorConfiguration.class)) .satisfies((ex) -> { assertThat(ex).hasCauseInstanceOf(BindException.class); assertThat(ex.getCause()).hasCauseExactlyInstanceOf(BindValidationException.class); }); } ",
        "ins1PreCode":" public void loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator() { assertThatExceptionOfType(Exception.class).isThrownBy(() -> load(WithCustomValidatorConfiguration.class)) .satisfies((ex) -> { assertThat(ex).hasCauseInstanceOf(BindException.class); assertThat(ex.getCause()).hasCauseExactlyInstanceOf(BindValidationException.class); }); } ",
        "ins2PreCode":" public void loadWhenBindingToConstructorParametersShouldValidate() { assertThatExceptionOfType(Exception.class) .isThrownBy(() -> load(ConstructorParameterValidationConfiguration.class)).satisfies((ex) -> { assertThat(ex).hasCauseInstanceOf(BindException.class); assertThat(ex.getCause()).hasCauseExactlyInstanceOf(BindValidationException.class); }); } ",
        "label":1
    },
    {
        "ins1CurCode":" public Collection loadModel(ProfileReference reference) throws ProfileException { if (reader != null) { try { XmiReader xmiReader = Model.getXmiReader(); InputSource inputSource = new InputSource(reader); inputSource.setSystemId(reference.getPath()); inputSource.setPublicId( reference.getPublicReference().toString()); Collection elements = xmiReader.parse(inputSource, true); return elements; } catch (UmlException e) { throw new ProfileException(\"Invalid XMI data!\", e); } } LOG.error(\"Profile not found\"); throw new ProfileException(\"Profile not found!\"); } ",
        "ins1PreCode":" public Collection loadModel(ProfileReference reference) throws ProfileException { if (reader != null) { try { XmiReader xmiReader = Model.getXmiReader(); InputSource inputSource = new InputSource(reader); inputSource.setSystemId(reference.getPath()); inputSource.setPublicId( reference.getPublicReference().toString()); Collection elements = xmiReader.parse(inputSource, true); return elements; } catch (UmlException e) { LOG.error(\"Exception while loading profile \", e); throw new ProfileException(\"Invalid XMI data!\"); } } LOG.error(\"Profile not found\"); throw new ProfileException(\"Profile not found!\"); } ",
        "ins2PreCode":" public Collection loadModel(InputStream inputStream, URL publicReference) throws ProfileException { if (inputStream != null) { try { XmiReader xmiReader = Model.getXmiReader(); InputSource inputSource = new InputSource(inputStream); inputSource.setPublicId(publicReference.toString()); Collection elements = xmiReader.parse(inputSource, true); return elements; } catch (UmlException e) { LOG.error(\"Exception while loading profile \", e); throw new ProfileException(\"Invalid XMI data!\"); } } LOG.error(\"Profile not found\"); throw new ProfileException(\"Profile not found!\"); } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAUMLElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); npArguments.put(\"pathVisible\", Boolean.valueOf(isPathVisible())); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "ins1PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAUMLElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); npArguments.put(\"pathVisible\", Boolean.valueOf(isPathVisible())); } } ",
        "ins2PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAModelElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAModelElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); putNotationArgument(\"useGuillemets\", Boolean.valueOf(getSettings().isUseGuillemets())); } } ",
        "ins1PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAModelElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "ins2PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAUMLElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); npArguments.put(\"pathVisible\", Boolean.valueOf(isPathVisible())); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAUMLElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); putNotationArgument(\"pathVisible\", Boolean.valueOf(isPathVisible())); } } ",
        "ins1PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAUMLElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); npArguments.put(\"pathVisible\", Boolean.valueOf(isPathVisible())); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "ins2PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(this, own); } if (Model.getFacade().isAModelElement(own)) { notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this); Project p = getProject(); if (p != null) { npArguments.put(\"rightGuillemot\", p.getProjectSettings().getRightGuillemot()); npArguments.put(\"leftGuillemot\", p.getProjectSettings().getLeftGuillemot()); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(); } if (Model.getFacade().isANamedElement(own)) { final NotationName notation = Notation.findNotation( getNotationSettings().getNotationLanguage()); notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this, notation); } } ",
        "ins1PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(); } if (Model.getFacade().isAModelElement(own)) { NotationName notation = Notation.findNotation( getNotationSettings().getNotationLanguage()); notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this, notation); } } ",
        "ins2PreCode":" protected void initNotationProviders(Object own) { if (notationProviderName != null) { notationProviderName.cleanListener(); } if (Model.getFacade().isAUMLElement(own)) { NotationName notation = Notation.findNotation( getNotationSettings().getNotationLanguage()); notationProviderName = NotationProviderFactory2.getInstance().getNotationProvider( getNotationProviderType(), own, this, notation); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireNodesInserted(path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireNodesInserted(path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireNodesInserted(path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemChanged\"); List<ToDoItem> items = tde.getToDoItemList(); final Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (PriorityNode pn : PriorityNode.getPriorityList()) { path[1] = pn; int nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } nMatchingItems++; } } if (nMatchingItems == 0) { continue; } final int[] childIndices = new int[nMatchingItems]; final Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; synchronized (items) { for (ToDoItem item : items) { if (item.getPriority() != pn.getPriority()) { continue; } childIndices[nMatchingItems] = getIndexOfChild(pn, item); children[nMatchingItems] = item; nMatchingItems++; } } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setUp() throws Exception { super.setUp(); InitializeModel.initializeDefault(); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitSequenceDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); ProjectManager.getManager().makeEmptyProject(); } ",
        "ins1PreCode":" protected void setUp() throws Exception { super.setUp(); InitializeModel.initializeDefault(); ProjectManager.getManager().setCurrentProject(null); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitSequenceDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); } ",
        "ins2PreCode":" protected void setUp() throws Exception { super.setUp(); InitializeModel.initializeDefault(); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitSequenceDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); ProjectManager.getManager().makeEmptyProject(); diagram = new UMLClassDiagram(); action = new ActionAddAllClassesFromModel(\"Add all classes from model\", diagram); } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; ArgoDiagram diag = ProjectManager.getManager().getCurrentProject() .getActiveDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; if (Model.getFacade().isAActionState(node)) { figNode = new FigActionState(gm, node); } else if (Model.getFacade().isAFinalState(node)) { figNode = new FigFinalState(gm, node); } else if (Model.getFacade().isAStubState(node)) { figNode = new FigStubState(gm, node); } else if (Model.getFacade().isASubmachineState(node)) { figNode = new FigSubmachineState(gm, node); } else if (Model.getFacade().isACompositeState(node)) { figNode = new FigCompositeState(gm, node); } else if (Model.getFacade().isASynchState(node)) { figNode = new FigSynchState(gm, node); } else if (Model.getFacade().isAState(node)) { figNode = new FigSimpleState(gm, node); } else if (Model.getFacade().isAComment(node)) { figNode = new FigComment(gm, node); } else if (Model.getFacade().isAPseudostate(node)) { Object pState = node; Object kind = Model.getFacade().getKind(pState); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getShallowHistory())) { figNode = new FigShallowHistoryState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getDeepHistory())) { figNode = new FigDeepHistoryState(gm, node); } else { LOG.warn(\"found a type not known\"); } } if (figNode == null) { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; if (Model.getFacade().isAClassifierRole(node)) { figNode = new FigClassifierRole(gm, lay, node); } else if (Model.getFacade().isAMessage(node)) { figNode = new FigMessage(gm, lay, node); } else if (Model.getFacade().isAComment(node)) { figNode = new FigComment(gm, node); } else { LOG.debug(\"TODO: CollabDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; ArgoDiagram diag = ProjectManager.getManager().getCurrentProject() .getActiveDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: CollabDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; if (Model.getFacade().isAClassifierRole(node)) { figNode = new FigClassifierRole(gm, lay, node); } else if (Model.getFacade().isAMessage(node)) { figNode = new FigMessage(gm, lay, node); } else if (Model.getFacade().isAComment(node)) { figNode = new FigComment(gm, node); } else { LOG.debug(\"TODO: CollabDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; if (Model.getFacade().isAActionState(node)) { figNode = new FigActionState(gm, node); } else if (Model.getFacade().isAFinalState(node)) { figNode = new FigFinalState(gm, node); } else if (Model.getFacade().isAStubState(node)) { figNode = new FigStubState(gm, node); } else if (Model.getFacade().isASubmachineState(node)) { figNode = new FigSubmachineState(gm, node); } else if (Model.getFacade().isACompositeState(node)) { figNode = new FigCompositeState(gm, node); } else if (Model.getFacade().isASynchState(node)) { figNode = new FigSynchState(gm, node); } else if (Model.getFacade().isAState(node)) { figNode = new FigSimpleState(gm, node); } else if (Model.getFacade().isAComment(node)) { figNode = new FigComment(gm, node); } else if (Model.getFacade().isAPseudostate(node)) { Object pState = node; Object kind = Model.getFacade().getKind(pState); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getShallowHistory())) { figNode = new FigShallowHistoryState(gm, node); } else if (kind.equals( Model.getPseudostateKind().getDeepHistory())) { figNode = new FigDeepHistoryState(gm, node); } else { LOG.warn(\"found a type not known\"); } } if (figNode == null) { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; assert node != null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.error(\"TODO: CollabDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: CollabDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { assert node != null; FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); return null; } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; assert node != null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = ((UMLDiagram) diag).drop(node, null); } else { LOG.error(\"TODO: CollabDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { assert node != null; FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.log(Level.FINE, \"TODO: StateDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { assert node != null; FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; assert node != null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.error(\"TODO: CollabDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; assert node != null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.log(Level.SEVERE, \"TODO: CollabDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins1PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { FigNode figNode = null; assert node != null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.error(\"TODO: CollabDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "ins2PreCode":" public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) { assert node != null; FigNode figNode = null; Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram && ((UMLDiagram) diag).doesAccept(node)) { figNode = (FigNode) ((UMLDiagram) diag).drop(node, null); } else { LOG.debug(\"TODO: StateDiagramRenderer getFigNodeFor\"); throw new IllegalArgumentException( \"Node is not a recognised type. Received \" + node.getClass().getName()); } lay.add(figNode); return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Object target = TargetManager.getInstance().getSingleModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target) || Model.getFacade().isAAssociationEnd(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Project project = ProjectManager.getManager().getCurrentProject(); UmlFactoryDefaults defaults = project.getUmlFactoryDefaults(); Object attr = Model.getUmlFactory().buildNode(Model.getMetaTypes().getAttribute(), classifier, null, defaults); TargetManager.getInstance().setTarget(attr); } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Object target = TargetManager.getInstance().getSingleModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target) || Model.getFacade().isAAssociationEnd(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Project project = ProjectManager.getManager().getCurrentProject(); Object attrType = project.getDefaultAttributeType(); Object attr = Model.getCoreFactory().buildAttribute2( classifier, attrType); TargetManager.getInstance().setTarget(attr); } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Project project = ProjectManager.getManager().getCurrentProject(); Object target = TargetManager.getInstance().getModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Object returnType = project.getDefaultReturnType(); Object oper = Model.getCoreFactory().buildOperation(classifier, returnType); TargetManager.getInstance().setTarget(oper); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Object target = TargetManager.getInstance().getModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Project project = ProjectManager.getManager().getCurrentProject(); UmlFactoryDefaults defaults = project.getUmlFactoryDefaults(); Object attr = Model.getUmlFactory().buildNode(Model.getMetaTypes().getOperation(), classifier, null, defaults); TargetManager.getInstance().setTarget(attr); } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Project project = ProjectManager.getManager().getCurrentProject(); Object target = TargetManager.getInstance().getModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Object returnType = project.getDefaultReturnType(); Object oper = Model.getCoreFactory().buildOperation(classifier, returnType); TargetManager.getInstance().setTarget(oper); } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent ae) { super.actionPerformed(ae); Object target = TargetManager.getInstance().getSingleModelTarget(); Object classifier = null; if (Model.getFacade().isAClassifier(target) || Model.getFacade().isAAssociationEnd(target)) { classifier = target; } else if (Model.getFacade().isAFeature(target)) { classifier = Model.getFacade().getOwner(target); } else { return; } Project project = ProjectManager.getManager().getCurrentProject(); Object attrType = project.getDefaultAttributeType(); Object attr = Model.getCoreFactory().buildAttribute2( classifier, attrType); TargetManager.getInstance().setTarget(attr); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesChanged(path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) continue; int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesInserted(path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) continue; int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) continue; int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesChanged(path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesInserted(path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesInserted(path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireNodesChanged(path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins1PreCode":" public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug(\"toDoItemsChanged\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) continue; int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesChanged(this, path, childIndices, children); } } ",
        "ins2PreCode":" public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug(\"toDoItemAdded\"); Object[] path = new Object[2]; path[0] = Designer.theDesigner().getToDoList(); for (Goal g : Designer.theDesigner().getGoalList()) { path[1] = g; int nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } nMatchingItems++; } if (nMatchingItems == 0) { continue; } int[] childIndices = new int[nMatchingItems]; Object[] children = new Object[nMatchingItems]; nMatchingItems = 0; for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) { continue; } childIndices[nMatchingItems] = getIndexOfChild(g, item); children[nMatchingItems] = item; nMatchingItems++; } fireTreeNodesInserted(this, path, childIndices, children); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public Collection<Feature> allAvailableFeatures(Object arole) { LOG.log(Level.INFO, \"allAvailableFeatures start\"); if (arole instanceof ClassifierRole) { try { List<Feature> returnList = new ArrayList<Feature>(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableFeatures(genElem)); } } for (Classifier classifier : role.getBase()) { returnList.addAll(classifier.getFeature()); } LOG.log(Level.INFO, \"allAvailableFeatures {0}\", returnList.size()); return returnList; } catch (InvalidObjectException e) { throw new InvalidElementException(e); } } throw new IllegalArgumentException(\"Cannot get available features on \" + arole); } ",
        "ins1PreCode":" public Collection<Feature> allAvailableFeatures(Object arole) { LOG.info(\"allAvailableFeatures start\"); if (arole instanceof ClassifierRole) { try { List<Feature> returnList = new ArrayList<Feature>(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableFeatures(genElem)); } } for (Classifier classifier : role.getBase()) { returnList.addAll(classifier.getFeature()); } LOG.info(\"allAvailableFeatures \" + returnList.size()); return returnList; } catch (InvalidObjectException e) { throw new InvalidElementException(e); } } throw new IllegalArgumentException(\"Cannot get available features on \" + arole); } ",
        "ins2PreCode":" public Collection allAvailableContents(Object arole) { LOG.info(\"allAvailableContents start\"); try { if (arole instanceof ClassifierRole) { List returnList = new ArrayList(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableContents(genElem)); } } for (Classifier baseClassifier : role.getBase()) { returnList.addAll(baseClassifier.getOwnedElement()); } LOG.info(\"allAvailableContents \" + returnList.size()); return returnList; } } catch (InvalidObjectException e) { throw new InvalidElementException(e); } throw new IllegalArgumentException(\"Cannot get available contents on \" + arole); } ",
        "label":0
    },
    {
        "ins1CurCode":" public Collection allAvailableContents(Object arole) { LOG.log(Level.INFO, \"allAvailableContents start\"); try { if (arole instanceof ClassifierRole) { List returnList = new ArrayList(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableContents(genElem)); } } for (Classifier baseClassifier : role.getBase()) { returnList.addAll(baseClassifier.getOwnedElement()); } LOG.log(Level.INFO, \"allAvailableFeatures {0}\", returnList.size()); return returnList; } } catch (InvalidObjectException e) { throw new InvalidElementException(e); } throw new IllegalArgumentException(\"Cannot get available contents on \" + arole); } ",
        "ins1PreCode":" public Collection allAvailableContents(Object arole) { LOG.info(\"allAvailableContents start\"); try { if (arole instanceof ClassifierRole) { List returnList = new ArrayList(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableContents(genElem)); } } for (Classifier baseClassifier : role.getBase()) { returnList.addAll(baseClassifier.getOwnedElement()); } LOG.info(\"allAvailableContents \" + returnList.size()); return returnList; } } catch (InvalidObjectException e) { throw new InvalidElementException(e); } throw new IllegalArgumentException(\"Cannot get available contents on \" + arole); } ",
        "ins2PreCode":" public Collection<Feature> allAvailableFeatures(Object arole) { LOG.info(\"allAvailableFeatures start\"); if (arole instanceof ClassifierRole) { try { List<Feature> returnList = new ArrayList<Feature>(); ClassifierRole role = (ClassifierRole) arole; for (ModelElement genElem : CoreHelperMDRImpl.getAllParents(role)) { if (genElem instanceof ClassifierRole) { returnList.addAll(allAvailableFeatures(genElem)); } } for (Classifier classifier : role.getBase()) { returnList.addAll(classifier.getFeature()); } LOG.info(\"allAvailableFeatures \" + returnList.size()); return returnList; } catch (InvalidObjectException e) { throw new InvalidElementException(e); } } throw new IllegalArgumentException(\"Cannot get available features on \" + arole); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setTargetLine() { Fig target = getPanelTarget(); Object c = lineField.getSelectedItem(); if (target == null || c == null) { return; } if (c instanceof Color) { target.setLineColor((Color) c); } target.setLineWidth((c instanceof Color) ? ArgoFig.LINE_WIDTH : 0); target.endTrans(); } ",
        "ins1PreCode":" public void setTargetLine() { Fig target = getPanelTarget(); Object c = lineField.getSelectedItem(); if (target == null || c == null) { return; } if (c instanceof Color) { target.setLineColor((Color) c); } target.setLineWidth((c instanceof Color) ? 1 : 0); target.endTrans(); } ",
        "ins2PreCode":" public void setTargetFill() { Fig target = getPanelTarget(); Object c = fillField.getSelectedItem(); if (target == null || c == null) { return; } if (c instanceof Color) { target.setFillColor((Color) c); } target.setFilled(c instanceof Color); target.endTrans(); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); ArgoDiagram diagram = createDiagram(ns); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); ArgoDiagram diagram = createDiagram(ns); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); ArgoDiagram diagram = createDiagram(p.getRoot()); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); ArgoDiagram diagram = createDiagram(p.getRoot()); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); ArgoDiagram diagram = createDiagram(ns); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns); diagram.setDiagramSettings(settings); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); ArgoDiagram diagram = createDiagram(ns); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns, settings); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns); diagram.setDiagramSettings(settings); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns, p.getProjectSettings().getDefaultDiagramSettings()); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns, settings); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns, settings); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { ArgoDiagram diagram = createDiagram(ns, p.getProjectSettings().getDefaultDiagramSettings()); assert (diagram != null) : \"No diagram was returned by the concrete class\"; p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace()); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace(); if (ns != null && isValidNamespace(ns)) { super.actionPerformed(e); DiagramSettings settings = p.getProjectSettings().getDefaultDiagramSettings(); ArgoDiagram diagram = createDiagram(ns, settings); p.addMember(diagram); ExplorerEventAdaptor.getInstance().modelElementAdded(ns); TargetManager.getInstance().setTarget(diagram); } else { LOG.error(\"No valid namespace found\"); throw new IllegalStateException(\"No valid namespace found\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void initMenuCreate() { super.initMenuCreate(); getCreateDiagramMenu().removeAll(); getCreateDiagramToolbar().removeAll(); JMenuItem usecaseDiagram = getCreateDiagramMenu() .add(new ActionUseCaseDiagram()); setMnemonic(usecaseDiagram, \"Usecase Diagram\"); getCreateDiagramToolbar().add((new ActionUseCaseDiagram())); ShortcutMgr.assignAccelerator(usecaseDiagram, ShortcutMgr.ACTION_USE_CASE_DIAGRAM); JMenuItem classDiagram = getCreateDiagramMenu().add(new ActionClassDiagram()); setMnemonic(classDiagram, \"Class Diagram\"); getCreateDiagramToolbar().add((new ActionClassDiagram())); ShortcutMgr.assignAccelerator(classDiagram, ShortcutMgr.ACTION_CLASS_DIAGRAM); JMenuItem sequenzDiagram = getCreateDiagramMenu().add(new ActionSequenceDiagram()); setMnemonic(sequenzDiagram, \"Sequenz Diagram\"); getCreateDiagramToolbar().add((new ActionSequenceDiagram())); ShortcutMgr.assignAccelerator(sequenzDiagram, ShortcutMgr.ACTION_SEQUENCE_DIAGRAM); JMenuItem collaborationDiagram = getCreateDiagramMenu().add(new ActionCollaborationDiagram()); setMnemonic(collaborationDiagram, \"Collaboration Diagram\"); getCreateDiagramToolbar().add((new ActionCollaborationDiagram())); ShortcutMgr.assignAccelerator(collaborationDiagram, ShortcutMgr.ACTION_COLLABORATION_DIAGRAM); JMenuItem stateDiagram = getCreateDiagramMenu().add(new ActionStateDiagram()); setMnemonic(stateDiagram, \"Statechart Diagram\"); getCreateDiagramToolbar().add((new ActionStateDiagram())); ShortcutMgr.assignAccelerator(stateDiagram, ShortcutMgr.ACTION_STATE_DIAGRAM); JMenuItem activityDiagram = getCreateDiagramMenu().add(new ActionActivityDiagram()); setMnemonic(activityDiagram, \"Activity Diagram\"); getCreateDiagramToolbar().add((new ActionActivityDiagram())); ShortcutMgr.assignAccelerator(activityDiagram, ShortcutMgr.ACTION_ACTIVITY_DIAGRAM); JMenuItem deploymentDiagram = getCreateDiagramMenu().add(new ActionDeploymentDiagram()); setMnemonic(deploymentDiagram, \"Deployment Diagram\"); getCreateDiagramToolbar().add((new ActionDeploymentDiagram())); ShortcutMgr.assignAccelerator(deploymentDiagram, ShortcutMgr.ACTION_DEPLOYMENT_DIAGRAM); getCreateDiagramToolbar().setFloatable(true); } ",
        "ins1PreCode":" protected void initMenuCreate() { super.initMenuCreate(); getCreateDiagramMenu().removeAll(); getCreateDiagramToolbar().removeAll(); JMenuItem usecaseDiagram = getCreateDiagramMenu() .add(new ActionUseCaseDiagram()); setMnemonic(usecaseDiagram, \"Usecase Diagram\"); getCreateDiagramToolbar().add((new ActionUseCaseDiagram())); ShortcutMgr.assignAccelerator(usecaseDiagram, ShortcutMgr.ACTION_USE_CASE_DIAGRAM); JMenuItem classDiagram = getCreateDiagramMenu().add(new ActionClassDiagram()); setMnemonic(classDiagram, \"Class Diagram\"); getCreateDiagramToolbar().add((new ActionClassDiagram())); ShortcutMgr.assignAccelerator(classDiagram, ShortcutMgr.ACTION_CLASS_DIAGRAM); JMenuItem sequenzDiagram = getCreateDiagramMenu().add(new ActionSequenceDiagram()); setMnemonic(sequenzDiagram, \"Sequenz Diagram\"); getCreateDiagramToolbar().add((new ActionSequenceDiagram())); ShortcutMgr.assignAccelerator(sequenzDiagram, ShortcutMgr.ACTION_SEQUENCE_DIAGRAM); JMenuItem stateDiagram = getCreateDiagramMenu().add(new ActionStateDiagram()); setMnemonic(stateDiagram, \"Statechart Diagram\"); getCreateDiagramToolbar().add((new ActionStateDiagram())); ShortcutMgr.assignAccelerator(stateDiagram, ShortcutMgr.ACTION_STATE_DIAGRAM); JMenuItem activityDiagram = getCreateDiagramMenu().add(new ActionActivityDiagram()); setMnemonic(activityDiagram, \"Activity Diagram\"); getCreateDiagramToolbar().add((new ActionActivityDiagram())); ShortcutMgr.assignAccelerator(activityDiagram, ShortcutMgr.ACTION_ACTIVITY_DIAGRAM); JMenuItem deploymentDiagram = getCreateDiagramMenu().add(new ActionDeploymentDiagram()); setMnemonic(deploymentDiagram, \"Deployment Diagram\"); getCreateDiagramToolbar().add((new ActionDeploymentDiagram())); ShortcutMgr.assignAccelerator(deploymentDiagram, ShortcutMgr.ACTION_DEPLOYMENT_DIAGRAM); getCreateDiagramToolbar().setFloatable(true); } ",
        "ins2PreCode":" protected void initMenuCreate() { super.initMenuCreate(); getCreateDiagramMenu().removeAll(); getCreateDiagramToolbar().removeAll(); JMenuItem usecaseDiagram = getCreateDiagramMenu() .add(new ActionUseCaseDiagram()); setMnemonic(usecaseDiagram, \"Usecase Diagram\"); getCreateDiagramToolbar().add((new ActionUseCaseDiagram())); ShortcutMgr.assignAccelerator(usecaseDiagram, ShortcutMgr.ACTION_USE_CASE_DIAGRAM); JMenuItem classDiagram = getCreateDiagramMenu().add(new ActionClassDiagram()); setMnemonic(classDiagram, \"Class Diagram\"); getCreateDiagramToolbar().add((new ActionClassDiagram())); ShortcutMgr.assignAccelerator(classDiagram, ShortcutMgr.ACTION_CLASS_DIAGRAM); JMenuItem sequenzDiagram = getCreateDiagramMenu().add(new ActionSequenceDiagram()); setMnemonic(sequenzDiagram, \"Sequenz Diagram\"); getCreateDiagramToolbar().add((new ActionSequenceDiagram())); ShortcutMgr.assignAccelerator(sequenzDiagram, ShortcutMgr.ACTION_SEQUENCE_DIAGRAM); JMenuItem collaborationDiagram = getCreateDiagramMenu().add(new ActionCollaborationDiagram()); setMnemonic(collaborationDiagram, \"Collaboration Diagram\"); getCreateDiagramToolbar().add((new ActionCollaborationDiagram())); ShortcutMgr.assignAccelerator(collaborationDiagram, ShortcutMgr.ACTION_COLLABORATION_DIAGRAM); JMenuItem stateDiagram = getCreateDiagramMenu().add(new ActionStateDiagram()); setMnemonic(stateDiagram, \"Statechart Diagram\"); getCreateDiagramToolbar().add((new ActionStateDiagram())); ShortcutMgr.assignAccelerator(stateDiagram, ShortcutMgr.ACTION_STATE_DIAGRAM); JMenuItem activityDiagram = getCreateDiagramMenu().add(new ActionActivityDiagram()); setMnemonic(activityDiagram, \"Activity Diagram\"); getCreateDiagramToolbar().add((new ActionActivityDiagram())); ShortcutMgr.assignAccelerator(activityDiagram, ShortcutMgr.ACTION_ACTIVITY_DIAGRAM); JMenuItem deploymentDiagram = getCreateDiagramMenu().add(new ActionDeploymentDiagram()); setMnemonic(deploymentDiagram, \"Deployment Diagram\"); getCreateDiagramToolbar().add((new ActionDeploymentDiagram())); ShortcutMgr.assignAccelerator(deploymentDiagram, ShortcutMgr.ACTION_DEPLOYMENT_DIAGRAM); getCreateDiagramToolbar().setFloatable(true); } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void fireTreeNodesChanged( final Object source, final Object[] path, final int[] childIndices, final Object[] children) { Object[] listeners = listenerList.getListenerList(); TreeModelEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == TreeModelListener.class) { if (e == null) e = new TreeModelEvent( source, path, childIndices, children); ((TreeModelListener) listeners[i + 1]).treeNodesChanged(e); } } } ",
        "ins1PreCode":" protected void fireTreeNodesChanged( Object source, Object[] path, int[] childIndices, Object[] children) { Object[] listeners = listenerList.getListenerList(); TreeModelEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == TreeModelListener.class) { if (e == null) e = new TreeModelEvent( source, path, childIndices, children); ((TreeModelListener) listeners[i + 1]).treeNodesChanged(e); } } } ",
        "ins2PreCode":" protected void fireTreeNodesInserted( Object source, Object[] path, int[] childIndices, Object[] children) { Object[] listeners = listenerList.getListenerList(); TreeModelEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == TreeModelListener.class) { if (e == null) e = new TreeModelEvent( source, path, childIndices, children); ((TreeModelListener) listeners[i + 1]).treeNodesInserted(e); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void applyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (handle instanceof Model) { ((Model) handle).applyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).applyProfile((Profile) profile); } } } ",
        "ins1PreCode":" public void applyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (handle instanceof Package) { ((Model) handle).applyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).applyProfile((Profile) profile); } } } ",
        "ins2PreCode":" public void unapplyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (handle instanceof Package) { ((Model) handle).unapplyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).unapplyProfile((Profile) profile); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void applyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (((Profile) profile).isDefined()) { if (handle instanceof Model) { ((Model) handle).applyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).applyProfile((Profile) profile); } } Iterator<Package> iter = ((Profile) profile).getNestedPackages() .iterator(); while (iter.hasNext()) { Package p = iter.next(); if (p instanceof Profile) { applyProfile(handle, p); } } } } ",
        "ins1PreCode":" public void applyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (handle instanceof Model) { ((Model) handle).applyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).applyProfile((Profile) profile); } Iterator<Package> iter = ((Profile) profile).getNestedPackages() .iterator(); while (iter.hasNext()) { Package p = iter.next(); if (p instanceof Profile) { applyProfile(handle, p); } } } } ",
        "ins2PreCode":" public void unapplyProfile(Object handle, Object profile) { if (profile instanceof Profile) { if (handle instanceof Package) { ((Model) handle).unapplyProfile((Profile) profile); } else if (handle instanceof Profile) { ((Profile) handle).unapplyProfile((Profile) profile); } Iterator<Package> iter = ((Profile) profile).getNestedPackages().iterator(); while (iter.hasNext()) { Package p = iter.next(); if (p instanceof Profile) { unapplyProfile(handle, p); } } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void modelChanged(PropertyChangeEvent mee) { super.modelChanged(mee); assert (mee.getPropertyName().equals(\"region\")); if (mee instanceof AddAssociationEvent) { Object newRegion = mee.getNewValue(); FigRegion rg = new FigRegion(newRegion); rg.setBounds( regionCompartment.getX(), regionCompartment.getY(), rg.getMinimumSize().width, rg.getMinimumSize().height); regionCompartment.addFig(rg); setSize(Math.max(getMinimumSize().width, getWidth()), Math.max(getMinimumSize().height, getHeight())); } if (mee instanceof RemoveAssociationEvent) { Object oldRegion = mee.getNewValue(); for (DiagramElement de : regionCompartment.getDiagramElements()) { if (de.getOwner() == oldRegion) { regionCompartment.removeFig((Fig) de); renderingChanged(); damage(); } } LOG.debug(\"Removing region \" + oldRegion); } } ",
        "ins1PreCode":" protected void modelChanged(PropertyChangeEvent mee) { super.modelChanged(mee); assert(mee.getPropertyName().equals(\"region\")); if (mee instanceof AddAssociationEvent) { Object newRegion = mee.getNewValue(); FigRegion rg = new FigRegion(newRegion); rg.setBounds( regionCompartment.getX(), regionCompartment.getY(), rg.getMinimumSize().width, rg.getMinimumSize().height); regionCompartment.addFig(rg); setSize(getMinimumSize()); } if (mee instanceof RemoveAssociationEvent) { Object oldRegion = mee.getNewValue(); for (DiagramElement de : regionCompartment.getDiagramElements()) { if (de.getOwner() == oldRegion) { regionCompartment.removeFig((Fig) de); renderingChanged(); damage(); } } LOG.debug(\"Removing region \" + oldRegion); } } ",
        "ins2PreCode":" protected void modelChanged(PropertyChangeEvent mee) { super.modelChanged(mee); assert(mee.getPropertyName().equals(\"region\")); if (mee instanceof AddAssociationEvent) { Object newRegion = mee.getNewValue(); FigRegion rg = new FigRegion(newRegion); rg.setBounds( regionCompartment.getX(), regionCompartment.getY(), rg.getMinimumSize().width, rg.getMinimumSize().height); regionCompartment.addFig(rg); setSize(getMinimumSize()); } if (mee instanceof RemoveAssociationEvent) { Object oldRegion = mee.getNewValue(); for (DiagramElement de : regionCompartment.getDiagramElements()) { if (de.getOwner() == oldRegion) { regionCompartment.removeFig((Fig) de); renderingChanged(); damage(); } } LOG.debug(\"Removing region \" + oldRegion); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"stereotype\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getBorderFig()); setSuppressCalcBounds(false); setBounds(X0, Y0, WIDTH, STEREOHEIGHT + NAME_FIG_HEIGHT); } ",
        "ins1PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"stereotype\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getBorderFig()); setSuppressCalcBounds(false); setBounds(X0, Y0, WIDTH, 22 + 2 * ROWHEIGHT); } ",
        "ins2PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "ins1PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "ins2PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"stereotype\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getBorderFig()); setSuppressCalcBounds(false); setBounds(X0, Y0, WIDTH, 22 + 2 * ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"stereotype\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getBorderFig()); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); } ",
        "ins1PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"stereotype\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getBorderFig()); setSuppressCalcBounds(false); setBounds(X0, Y0, WIDTH, STEREOHEIGHT + NAME_FIG_HEIGHT); } ",
        "ins2PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getOperationsFig()); addFig(getBorderFig()); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "ins2PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"stereotype\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getBorderFig()); setSuppressCalcBounds(false); setBounds(X0, Y0, WIDTH, STEREOHEIGHT + NAME_FIG_HEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); if (Model.getUmlFactory().isContainmentValid( Model.getMetaTypes().getAttribute(), getOwner())) { addFig(new FigAttributesCompartment( getOwner(), DEFAULT_COMPARTMENT_BOUNDS, getSettings())); } addFig(getOperationsFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getOperationsFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins2PreCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"stereotype\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); createCompartments(); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); if (Model.getUmlFactory().isContainmentValid( Model.getMetaTypes().getAttribute(), getOwner())) { addFig(new FigAttributesCompartment( getOwner(), DEFAULT_COMPARTMENT_BOUNDS, getSettings())); } addFig(getOperationsFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins2PreCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"stereotype\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void translate(int dx, int dy) { super.translate(dx, dy); Editor ce = Globals.curEditor(); if (ce != null) { Selection sel = ce.getSelectionManager().findSelectionFor(this); if (sel instanceof SelectionButtons) { ((SelectionButtons) sel).hideButtons(); } } } ",
        "ins1PreCode":" public void translate(int dx, int dy) { super.translate(dx, dy); Editor ce = Globals.curEditor(); if (ce != null) { Selection sel = ce.getSelectionManager().findSelectionFor(this); if (sel instanceof SelectionClass) { ((SelectionClass) sel).hideButtons(); } } } ",
        "ins2PreCode":" public void translate(int dx, int dy) { super.translate(dx, dy); Editor ce = Globals.curEditor(); if (ce != null) { Selection sel = ce.getSelectionManager().findSelectionFor(this); if (sel instanceof SelectionClass) { ((SelectionClass) sel).hideButtons(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAStateVertex(dm))) { return NO_PROBLEM; } if (Model.getFacade().isAPseudostate(dm)) { Object k = Model.getFacade().getKind(dm); if (k.equals(Model.getPseudostateKind().getChoice())) { return NO_PROBLEM; } if (k.equals(Model.getPseudostateKind().getJunction())) { return NO_PROBLEM; } } if (!Model.getFacade().isAState(dm)) { return NO_PROBLEM; } if (Model.getFacade().isAFinalState(dm)) { return NO_PROBLEM; } Object stateMachine = Model.getFacade().getStateMachine(dm); if (stateMachine == null) { return NO_PROBLEM; } if (stateMachine != null && Model.getFacade().getTop(stateMachine) == dm) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); if (outgoing == null || outgoing.size() > 0) { return NO_PROBLEM; } if (!Model.getFacade().isACompositeState(dm)) { return PROBLEM_FOUND; } Collection transitions = Model.getFacade().getTransitions(stateMachine); for (Object t : transitions) { Object sourceState = Model.getFacade().getSource(t); Object targetState = Model.getFacade().getTarget(t); if (isSomeSubvertexOf(sourceState, dm) && !isSomeSubvertexOf(targetState, dm)) { return NO_PROBLEM; } } return PROBLEM_FOUND; } ",
        "ins1PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAStateVertex(dm))) { return NO_PROBLEM; } if (Model.getFacade().isAPseudostate(dm)) { Object k = Model.getFacade().getKind(dm); if (k.equals(Model.getPseudostateKind().getChoice())) { return NO_PROBLEM; } if (k.equals(Model.getPseudostateKind().getJunction())) { return NO_PROBLEM; } } if (!Model.getFacade().isAState(dm)) { return NO_PROBLEM; } if (Model.getFacade().isAFinalState(dm)) { return NO_PROBLEM; } Object sm = Model.getFacade().getStateMachine(dm); if (sm != null && Model.getFacade().getTop(sm) == dm) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); if (outgoing == null || outgoing.size() > 0) { return NO_PROBLEM; } if (!Model.getFacade().isACompositeState(dm)) { return PROBLEM_FOUND; } Collection transitions = Model.getFacade().getTransitions(sm); for (Object t : transitions) { Object sourceState = Model.getFacade().getSource(t); Object targetState = Model.getFacade().getTarget(t); if (isSomeSubvertexOf(sourceState, dm) && !isSomeSubvertexOf(targetState, dm)) { return NO_PROBLEM; } } return PROBLEM_FOUND; } ",
        "ins2PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAStateVertex(dm))) { return NO_PROBLEM; } if (Model.getFacade().isAPseudostate(dm)) { Object k = Model.getFacade().getKind(dm); if (k.equals(Model.getPseudostateKind().getChoice())) { return NO_PROBLEM; } if (k.equals(Model.getPseudostateKind().getJunction())) { return NO_PROBLEM; } if (k.equals(Model.getPseudostateKind().getInitial())) { return NO_PROBLEM; } } if (!Model.getFacade().isAState(dm)) { return NO_PROBLEM; } Object sm = Model.getStateMachinesHelper().getStateMachine(dm); if (sm != null && Model.getFacade().getTop(sm) == dm) { return NO_PROBLEM; } Collection incoming = Model.getFacade().getIncomings(dm); if (incoming.size() > 0) { return NO_PROBLEM; } if (!Model.getFacade().isACompositeState(dm)) { return PROBLEM_FOUND; } Collection transitions = Model.getFacade().getTransitions(sm); for (Object t : transitions) { Object sourceState = Model.getFacade().getSource(t); Object targetState = Model.getFacade().getTarget(t); if (!isSomeSubvertexOf(sourceState, dm) && isSomeSubvertexOf(targetState, dm)) { return NO_PROBLEM; } } return PROBLEM_FOUND; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { if (!isEnabled()) { return; } super.actionPerformed(e); Object target = TargetManager.getInstance().getModelTarget(); Object model = Model.getFacade().getInnerContainingModel(target); Object ns = Model.getStateMachinesHelper() .findNamespaceForEvent(target, model); Object event = createEvent(ns); Model.getStateMachinesHelper().setEventAsTrigger(target, event); TargetManager.getInstance().setTarget(event); } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { if (!isEnabled()) return; super.actionPerformed(e); Object target = TargetManager.getInstance().getModelTarget(); Object model = Model.getFacade().getInnerContainingModel(target); Object ns = Model.getStateMachinesHelper() .findNamespaceForEvent(target, model); Object event = createEvent(ns); Model.getStateMachinesHelper().setEventAsTrigger(target, event); TargetManager.getInstance().setTarget(event); } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { if (!isEnabled()) { return; } super.actionPerformed(e); Object target = TargetManager.getInstance().getModelTarget(); Object model = Model.getFacade().getInnerContainingModel(target); Object ns = Model.getStateMachinesHelper() .findNamespaceForEvent(target, model); Object event = createEvent(ns); Model.getStateMachinesHelper().setEventAsTrigger(target, event); TargetManager.getInstance().setTarget(event); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "ins1PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(\"datatype\"); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "ins2PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "ins1PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "ins2PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); super.setStandardBounds(X0, Y0, WIDTH, NAME_FIG_HEIGHT + ROWHEIGHT); } ",
        "ins1PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "ins2PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, WIDTH, 21 + ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getOperationsFig()); addFig(getBorderFig()); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "ins2PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); super.setStandardBounds(X0, Y0, WIDTH, NAME_FIG_HEIGHT + ROWHEIGHT); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(getKeyword()); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getOperationsFig()); addFig(getBorderFig()); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void constructFigs() { getStereotypeFig().setKeyword(getKeyword()); setSuppressCalcBounds(true); addFig(getBigPort()); addFig(getStereotypeFig()); addFig(getNameFig()); addFig(getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); super.setStandardBounds(X0, Y0, WIDTH, NAME_FIG_HEIGHT + ROWHEIGHT); } ",
        "ins2PreCode":" private void initialize() { getStereotypeFig().setKeyword(\"interface\"); enableSizeChecking(false); setSuppressCalcBounds(true); Dimension size = new Dimension(0, 0); addFig(getBigPort()); addFig(getStereotypeFig()); addChildDimensions(size, getStereotypeFig()); addFig(getNameFig()); addChildDimensions(size, getNameFig()); addFig(getOperationsFig()); addChildDimensions(size, getOperationsFig()); addFig(borderFig); setSuppressCalcBounds(false); enableSizeChecking(true); setBounds(X0, Y0, size.width, size.height); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); if (Model.getUmlFactory().isContainmentValid( Model.getMetaTypes().getAttribute(), getOwner())) { addFig(new FigAttributesCompartment( getOwner(), DEFAULT_COMPARTMENT_BOUNDS, getSettings())); } addFig(getOperationsFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addFig(getOperationsFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins2PreCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(getKeyword()); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addExtraCompartments(); addFig(getOperationsFig()); addFig(getBorderFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); createCompartments(); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); if (Model.getUmlFactory().isContainmentValid( Model.getMetaTypes().getAttribute(), getOwner())) { addFig(new FigAttributesCompartment( getOwner(), DEFAULT_COMPARTMENT_BOUNDS, getSettings())); } addFig(getOperationsFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins2PreCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(getKeyword()); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addExtraCompartments(); addFig(getOperationsFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "label":0
    },
    {
        "ins1CurCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(getKeyword()); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); createCompartments(); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins1PreCode":" private void constructFigs(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(getKeyword()); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); addExtraCompartments(); addFig(getOperationsFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "ins2PreCode":" private void initialize(Rectangle bounds) { enableSizeChecking(false); setSuppressCalcBounds(true); getStereotypeFig().setKeyword(\"interface\"); getStereotypeFig().setVisible(true); getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height); addFig(getBigPort()); addFig(getNameFig()); addFig(getStereotypeFig()); if (Model.getUmlFactory().isContainmentValid( Model.getMetaTypes().getAttribute(), getOwner())) { addFig(new FigAttributesCompartment( getOwner(), DEFAULT_COMPARTMENT_BOUNDS, getSettings())); } addFig(getOperationsFig()); setFilled(true); setFillColor(FILL_COLOR); setLineColor(LINE_COLOR); setLineWidth(LINE_WIDTH); if (bounds != null) { setLocation(bounds.x, bounds.y); } setSuppressCalcBounds(false); setBounds(getBounds()); enableSizeChecking(true); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setNamespace(Object handle) { if (!Model.getFacade().isANamespace(handle)) { LOG.error( \"Illegal argument. Object \" + handle + \" is not a namespace\"); throw new IllegalArgumentException( \"Illegal argument. Object \" + handle + \" is not a namespace\"); } Object m = handle; super.setNamespace(m); UseCaseDiagramGraphModel gm = (UseCaseDiagramGraphModel) getGraphModel(); gm.setHomeModel(m); LayerPerspective lay = new LayerPerspectiveMutable(Model.getFacade().getName(m), gm); UseCaseDiagramRenderer rend = new UseCaseDiagramRenderer(); lay.setGraphNodeRenderer(rend); lay.setGraphEdgeRenderer(rend); setLayer(lay); } ",
        "ins1PreCode":" public void setNamespace(Object handle) { if (!Model.getFacade().isANamespace(handle)) { LOG.error( \"Illegal argument. Object \" + handle + \" is not a namespace\"); throw new IllegalArgumentException( \"Illegal argument. Object \" + handle + \" is not a namespace\"); } Object m = handle; super.setNamespace(m); UseCaseDiagramGraphModel gm = createGraphModel(); gm.setHomeModel(m); LayerPerspective lay = new LayerPerspectiveMutable(Model.getFacade().getName(m), gm); UseCaseDiagramRenderer rend = new UseCaseDiagramRenderer(); lay.setGraphNodeRenderer(rend); lay.setGraphEdgeRenderer(rend); setLayer(lay); } ",
        "ins2PreCode":" public void setNamespace(Object handle) { if (!Model.getFacade().isANamespace(handle)) { LOG.error( \"Illegal argument. Object \" + handle + \" is not a namespace\"); throw new IllegalArgumentException( \"Illegal argument. Object \" + handle + \" is not a namespace\"); } Object m = handle; boolean init = (null == getNamespace()); super.setNamespace(m); DeploymentDiagramGraphModel gm = createGraphModel(); gm.setHomeModel(m); if (init) { LayerPerspective lay = new LayerPerspectiveMutable(Model.getFacade().getName(m), gm); DeploymentDiagramRenderer rend = new DeploymentDiagramRenderer(); lay.setGraphNodeRenderer(rend); lay.setGraphEdgeRenderer(rend); setLayer(lay); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void fireToDoItemsRemoved(List<ToDoItem> theItems) { List<ToDoItem> toDoItems = null; Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { toDoItems = Collections.unmodifiableList(theItems); e = new ToDoListEvent(toDoItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsRemoved(e); } } } ",
        "ins1PreCode":" protected void fireToDoItemsRemoved(List<ToDoItem> theItems) { Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsRemoved(e); } } } ",
        "ins2PreCode":" protected void fireToDoItemsAdded(List<ToDoItem> theItems) { Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsAdded(e); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void fireToDoItemsAdded(List<ToDoItem> theItems) { if (theItems.size() > 0) { final Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsAdded(e); } } } } ",
        "ins1PreCode":" protected void fireToDoItemsAdded(List<ToDoItem> theItems) { Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsAdded(e); } } } ",
        "ins2PreCode":" protected void fireToDoItemsRemoved(List<ToDoItem> theItems) { List<ToDoItem> toDoItems = null; Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { toDoItems = Collections.unmodifiableList(theItems); e = new ToDoListEvent(toDoItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsRemoved(e); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void fireToDoItemsRemoved(final List<ToDoItem> theItems) { if (theItems.size() > 0) { final Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsRemoved(e); } } } } ",
        "ins1PreCode":" protected void fireToDoItemsRemoved(List<ToDoItem> theItems) { List<ToDoItem> toDoItems = null; Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { toDoItems = Collections.unmodifiableList(theItems); e = new ToDoListEvent(toDoItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsRemoved(e); } } } ",
        "ins2PreCode":" protected void fireToDoItemsAdded(List<ToDoItem> theItems) { Object[] listeners = listenerList.getListenerList(); ToDoListEvent e = null; for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == ToDoListListener.class) { if (e == null) { e = new ToDoListEvent(theItems); } ((ToDoListListener) listeners[i + 1]).toDoItemsAdded(e); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (!Model.getFacade().isANamedElement(name1Object)) continue; if (Model.getFacade().isAGeneralization(name1Object)) continue; String name = Model.getFacade().getName(name1Object); if (name == null) continue; if (\"\".equals(name)) continue; if (names.containsKey(name)) { Object offender = names.get(name); if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } names.put(name, name1Object); } } return offenderResult; } ",
        "ins1PreCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (Model.getFacade().isAGeneralization(name1Object)) continue; String name = Model.getFacade().getName(name1Object); if (name == null) continue; if (\"\".equals(name)) continue; if (names.containsKey(name)) { Object offender = names.get(name); if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } names.put(name, name1Object); } } return offenderResult; } ",
        "ins2PreCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (!Model.getFacade().isAAssociation(name1Object)) { continue; } String name = Model.getFacade().getName(name1Object); Collection typ1 = getAllTypes(name1Object); if (name == null || \"\".equals(name)) { continue; } if (names.containsKey(name)) { Object offender = names.get(name); Collection typ2 = getAllTypes(offender); if (typ1.containsAll(typ2) && typ2.containsAll(typ1)) { if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } } names.put(name, name1Object); } } return offenderResult; } ",
        "label":0
    },
    {
        "ins1CurCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (!Model.getFacade().isANamedElement(name1Object)) { continue; } if (Model.getFacade().isAGeneralization(name1Object)) { continue; } String name = Model.getFacade().getName(name1Object); if (name == null) { continue; } if (\"\".equals(name)) { continue; } if (names.containsKey(name)) { Object offender = names.get(name); if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } names.put(name, name1Object); } } return offenderResult; } ",
        "ins1PreCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (!Model.getFacade().isANamedElement(name1Object)) continue; if (Model.getFacade().isAGeneralization(name1Object)) continue; String name = Model.getFacade().getName(name1Object); if (name == null) continue; if (\"\".equals(name)) continue; if (names.containsKey(name)) { Object offender = names.get(name); if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } names.put(name, name1Object); } } return offenderResult; } ",
        "ins2PreCode":" protected ListSet computeOffenders(Object dm) { ListSet offenderResult = new ListSet(); if (Model.getFacade().isANamespace(dm)) { HashMap<String, Object> names = new HashMap<String, Object>(); for (Object name1Object : Model.getFacade().getOwnedElements(dm)) { if (!Model.getFacade().isAAssociation(name1Object)) { continue; } String name = Model.getFacade().getName(name1Object); Collection typ1 = getAllTypes(name1Object); if (name == null || \"\".equals(name)) { continue; } if (names.containsKey(name)) { Object offender = names.get(name); Collection typ2 = getAllTypes(offender); if (typ1.containsAll(typ2) && typ2.containsAll(typ1)) { if (!offenderResult.contains(offender)) { offenderResult.add(offender); } offenderResult.add(name1Object); } } names.put(name, name1Object); } } return offenderResult; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(Object modelElement, String text) { try { parseAssociationName(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(Object modelElement, String text) { try { NotationUtilityUml.parseModelElement(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { parseClassifierRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.classifierrole\"; Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testLoadProject() throws Exception { testSave(); File file = new File(\"test.xmi\"); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(file); ProjectManager.getManager().removeProject(project); } ",
        "ins1PreCode":" public void testLoadProject() throws Exception { File file = new File(\"test.xmi\"); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(file); ProjectManager.getManager().removeProject(project); } ",
        "ins2PreCode":" public void testLoadProject13() throws Exception { String filename = \"/testmodels/uml13/Alittlebitofeverything.xmi\"; URL url = TestZargoFilePersister.class.getResource(filename); assertTrue(\"Unintended failure: resource to be tested is not found: \" + filename + \", converted to URL: \" + url, url != null); String name = url.getFile(); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(new File(name)); ProjectManager.getManager().removeProject(project); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testLoadProject13() throws Exception { String filename = \"/testmodels/uml13/Alittlebitofeverything.xmi\"; URL url = TestZargoFilePersister.class.getResource(filename); assertTrue(\"Unintended failure: resource to be tested is not found: \" + filename + \", converted to URL: \" + url, url != null); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(new File(url.toURI())); ProjectManager.getManager().removeProject(project); } ",
        "ins1PreCode":" public void testLoadProject13() throws Exception { String filename = \"/testmodels/uml13/Alittlebitofeverything.xmi\"; URL url = TestZargoFilePersister.class.getResource(filename); assertTrue(\"Unintended failure: resource to be tested is not found: \" + filename + \", converted to URL: \" + url, url != null); String name = url.getFile(); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(new File(name)); ProjectManager.getManager().removeProject(project); } ",
        "ins2PreCode":" public void testLoadProject() throws Exception { testSave(); File file = new File(\"test.xmi\"); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(file); ProjectManager.getManager().removeProject(project); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testLoadProject13() throws Exception { ProjectFile file = new ProjectFile(\"xmi\"); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(file.getFile()); ProjectManager.getManager().removeProject(project); } ",
        "ins1PreCode":" public void testLoadProject13() throws Exception { String filename = \"/testmodels/uml13/Alittlebitofeverything.xmi\"; URL url = TestZargoFilePersister.class.getResource(filename); assertTrue(\"Unintended failure: resource to be tested is not found: \" + filename + \", converted to URL: \" + url, url != null); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(new File(url.toURI())); ProjectManager.getManager().removeProject(project); } ",
        "ins2PreCode":" public void testLoadProject() throws Exception { testSave(); File file = new File(\"test.xmi\"); XmiFilePersister persister = new XmiFilePersister(); Project project = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(project); persister.doLoad(file); ProjectManager.getManager().removeProject(project); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setLanguage(String lang) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { String oldValue = Model.getDataTypesHelper().getLanguage(expression); if (oldValue != null && oldValue.equals(lang)) { mustChange = false; } } if (mustChange) { String body = EMPTYSTRING; if (expression != null && Model.getDataTypesHelper().getBody(expression) != null) { body = Model.getDataTypesHelper().getBody(expression); } setExpression(lang, body); } } ",
        "ins1PreCode":" public void setLanguage(String lang) { boolean mustChange = true; if (expression != null) { String oldValue = Model.getDataTypesHelper().getLanguage(expression); if (oldValue != null && oldValue.equals(lang)) { mustChange = false; } } if (mustChange) { String body = EMPTYSTRING; if (expression != null && Model.getDataTypesHelper().getBody(expression) != null) { body = Model.getDataTypesHelper().getBody(expression); } setExpression(lang, body); } } ",
        "ins2PreCode":" public void setLanguage(String lang) { boolean mustChange = true; if (expression != null) { String oldValue = Model.getDataTypesHelper().getLanguage(expression); if (oldValue != null && oldValue.equals(lang)) { mustChange = false; } } if (mustChange) { String body = EMPTYSTRING; if (expression != null && Model.getDataTypesHelper().getBody(expression) != null) { body = Model.getDataTypesHelper().getBody(expression); } setExpression(lang, body); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAModelElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.log(Level.SEVERE, \"could not set package at \" + encloser, e); } if (encloser != null && (Model.getFacade().isAComponent(encloser.getOwner()))) { moveIntoComponent(encloser); super.setEnclosingFig(encloser); } } ",
        "ins1PreCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAModelElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.error(\"could not set package due to:\" + e + \"' at \" + encloser, e); } if (encloser != null && (Model.getFacade().isAComponent(encloser.getOwner()))) { moveIntoComponent(encloser); super.setEnclosingFig(encloser); } } ",
        "ins2PreCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAUMLElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.error(\"could not set package due to:\" + e + \"' at \" + encloser, e); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAUMLElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.log(Level.SEVERE, \"could not set package due to:\" + e + \"' at \" + encloser, e); } } ",
        "ins1PreCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAUMLElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.error(\"could not set package due to:\" + e + \"' at \" + encloser, e); } } ",
        "ins2PreCode":" public void setEnclosingFig(Fig encloser) { Fig oldEncloser = getEnclosingFig(); if (encloser == null || (encloser != null && !Model.getFacade().isAInstance(encloser.getOwner()))) { super.setEnclosingFig(encloser); } if (!(Model.getFacade().isAModelElement(getOwner()))) { return; } if (!isVisible()) { return; } Object me = getOwner(); Object m = null; try { if (encloser != null && oldEncloser != encloser && Model.getFacade().isAPackage(encloser.getOwner())) { Model.getCoreHelper().setNamespace(me, encloser.getOwner()); } if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget() instanceof ArgoDiagram)) { m = ((ArgoDiagram) TargetManager.getInstance().getTarget()) .getNamespace(); Model.getCoreHelper().setNamespace(me, m); } } catch (Exception e) { LOG.error(\"could not set package due to:\" + e + \"' at \" + encloser, e); } if (encloser != null && (Model.getFacade().isAComponent(encloser.getOwner()))) { moveIntoComponent(encloser); super.setEnclosingFig(encloser); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "ins1PreCode":" private FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "ins2PreCode":" private FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); if (e.getSource() instanceof UMLCheckBox2) { UMLCheckBox2 source = (UMLCheckBox2) e.getSource(); Object target = source.getTarget(); if (Model.getFacade().isAAssociationEnd(target)) { Object m = target; Model.getCoreHelper().setStatic(m, source.isSelected()); } } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); if (e.getSource() instanceof UMLCheckBox2) { UMLCheckBox2 source = (UMLCheckBox2) e.getSource(); Object target = source.getTarget(); if (Model.getFacade().isAAssociationEnd(target)) { Object m = target; if (source.isSelected()) { Model.getCoreHelper().setTargetScope(m, Model.getScopeKind().getClassifier()); } else { Model.getCoreHelper().setTargetScope(m, Model.getScopeKind().getInstance()); } } } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); if (e.getSource() instanceof UMLCheckBox2) { UMLCheckBox2 source = (UMLCheckBox2) e.getSource(); Object target = source.getTarget(); if (Model.getFacade().isAAssociationEnd(target)) { Object m = target; Model.getCoreHelper().setNavigable(m, source.isSelected()); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getFacade().getBody(expression).toString(); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins1PreCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins2PreCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setTarget(Object target) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); target = target instanceof Fig ? ((Fig) target).getOwner() : target; if (!Model.getFacade().isAModelElement(target)) return; setListTarget(target); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } ",
        "ins1PreCode":" public void setTarget(Object target) { if (getTarget() != null) { Enumeration enumeration = elements(); while (enumeration.hasMoreElements()) { Object base = enumeration.nextElement(); Model.getPump().removeModelEventListener( this, base, \"feature\"); } Model.getPump().removeModelEventListener( this, getTarget(), \"base\"); } target = target instanceof Fig ? ((Fig) target).getOwner() : target; if (!Model.getFacade().isAModelElement(target)) return; setListTarget(target); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } ",
        "ins2PreCode":" public void setTarget(Object theNewTarget) { theNewTarget = theNewTarget instanceof Fig ? ((Fig) theNewTarget).getOwner() : theNewTarget; if (Model.getFacade().isAModelElement(theNewTarget) || theNewTarget instanceof Diagram) { if (getTarget() != null) { Enumeration enumeration = elements(); while (enumeration.hasMoreElements()) { Object base = enumeration.nextElement(); Model.getPump().removeModelEventListener( this, base, \"ownedElement\"); } Model.getPump().removeModelEventListener( this, getTarget(), \"base\"); } setListTarget(theNewTarget); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); } if (getTarget() != null) { removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setTarget(Object theNewTarget) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); theNewTarget = theNewTarget instanceof Fig ? ((Fig) theNewTarget).getOwner() : theNewTarget; if (Model.getFacade().isAModelElement(theNewTarget) || theNewTarget instanceof Diagram) { setListTarget(theNewTarget); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); } if (getTarget() != null) { removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } } ",
        "ins1PreCode":" public void setTarget(Object theNewTarget) { theNewTarget = theNewTarget instanceof Fig ? ((Fig) theNewTarget).getOwner() : theNewTarget; if (Model.getFacade().isAModelElement(theNewTarget) || theNewTarget instanceof Diagram) { if (getTarget() != null) { Enumeration enumeration = elements(); while (enumeration.hasMoreElements()) { Object base = enumeration.nextElement(); Model.getPump().removeModelEventListener( this, base, \"ownedElement\"); } Model.getPump().removeModelEventListener( this, getTarget(), \"base\"); } setListTarget(theNewTarget); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); } if (getTarget() != null) { removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } } ",
        "ins2PreCode":" public void setTarget(Object target) { if (getTarget() != null) { Enumeration enumeration = elements(); while (enumeration.hasMoreElements()) { Object base = enumeration.nextElement(); Model.getPump().removeModelEventListener( this, base, \"feature\"); } Model.getPump().removeModelEventListener( this, getTarget(), \"base\"); } target = target instanceof Fig ? ((Fig) target).getOwner() : target; if (!Model.getFacade().isAModelElement(target)) return; setListTarget(target); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setTarget(Object target) { assert (getTarget() == null); assert (Model.getFacade().isAElement(target)); setListTarget(target); Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins1PreCode":" protected void setTarget(Object target) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); target = target instanceof Fig ? ((Fig) target).getOwner() : target; if (!Model.getFacade().isAModelElement(target)) return; setListTarget(target); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } ",
        "ins2PreCode":" protected void setTarget(Object theNewTarget) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); theNewTarget = theNewTarget instanceof Fig ? ((Fig) theNewTarget).getOwner() : theNewTarget; if (Model.getFacade().isAModelElement(theNewTarget) || theNewTarget instanceof Diagram) { setListTarget(theNewTarget); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); } if (getTarget() != null) { removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setTarget(Object theNewTarget) { assert (getTarget() == null); assert (Model.getFacade().isAElement(theNewTarget)); setListTarget(theNewTarget); Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins1PreCode":" protected void setTarget(Object theNewTarget) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); theNewTarget = theNewTarget instanceof Fig ? ((Fig) theNewTarget).getOwner() : theNewTarget; if (Model.getFacade().isAModelElement(theNewTarget) || theNewTarget instanceof Diagram) { setListTarget(theNewTarget); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"ownedElement\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); } if (getTarget() != null) { removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } } ",
        "ins2PreCode":" protected void setTarget(Object target) { assert (getTarget() == null); assert (!(getTarget() instanceof Fig)); target = target instanceof Fig ? ((Fig) target).getOwner() : target; if (!Model.getFacade().isAModelElement(target)) return; setListTarget(target); if (getTarget() != null) { Collection bases = Model.getFacade().getBases(getTarget()); Iterator it = bases.iterator(); while (it.hasNext()) { Object base = it.next(); Model.getPump().addModelEventListener( this, base, \"feature\"); } Model.getPump().addModelEventListener( this, getTarget(), \"base\"); removeAllElements(); setBuildingModel(true); buildModelList(); setBuildingModel(false); if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAStubState(modelElement)) { figNode = new FigStubState(modelElement, bounds, settings); } else if (Model.getFacade().isASubmachineState(modelElement)) { figNode = new FigSubmachineState(modelElement, bounds, settings); } else if (Model.getFacade().isACompositeState(modelElement)) { figNode = new FigCompositeState(modelElement, bounds, settings); } else if (Model.getFacade().isASynchState(modelElement)) { figNode = new FigSynchState(modelElement, bounds, settings); } else if (Model.getFacade().isAState(modelElement)) { figNode = new FigSimpleState(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.log(Level.WARNING, \"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getShallowHistory())) { figNode = new FigShallowHistoryState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getDeepHistory())) { figNode = new FigDeepHistoryState(modelElement, bounds, settings); } else { LOG.log(Level.WARNING, \"found a type not known\"); } } if (figNode != null) { LOG.log(Level.FINE, \"Model element {0} converted to {1}\", new Object[]{modelElement, figNode}); } else { LOG.log(Level.FINE, \"Dropped object NOT added {0}\", figNode); } return figNode; } ",
        "ins1PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAStubState(modelElement)) { figNode = new FigStubState(modelElement, bounds, settings); } else if (Model.getFacade().isASubmachineState(modelElement)) { figNode = new FigSubmachineState(modelElement, bounds, settings); } else if (Model.getFacade().isACompositeState(modelElement)) { figNode = new FigCompositeState(modelElement, bounds, settings); } else if (Model.getFacade().isASynchState(modelElement)) { figNode = new FigSynchState(modelElement, bounds, settings); } else if (Model.getFacade().isAState(modelElement)) { figNode = new FigSimpleState(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getShallowHistory())) { figNode = new FigShallowHistoryState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getDeepHistory())) { figNode = new FigDeepHistoryState(modelElement, bounds, settings); } else { LOG.warn(\"found a type not known\"); } } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "ins2PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAPartition(modelElement)) { figNode = new FigPartition(modelElement, bounds, settings); } else if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isACallState(modelElement)) { figNode = new FigCallState(modelElement, bounds, settings); } else if (Model.getFacade().isAObjectFlowState(modelElement)) { figNode = new FigObjectFlowState(modelElement, bounds, settings); } else if (Model.getFacade().isASubactivityState(modelElement)) { figNode = new FigSubactivityState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else { LOG.warn(\"found a type not known\"); } } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAPartition(modelElement)) { figNode = new FigPartition(modelElement, bounds, settings); } else if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isACallState(modelElement)) { figNode = new FigCallState(modelElement, bounds, settings); } else if (Model.getFacade().isAObjectFlowState(modelElement)) { figNode = new FigObjectFlowState(modelElement, bounds, settings); } else if (Model.getFacade().isASubactivityState(modelElement)) { figNode = new FigSubactivityState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.log(Level.WARNING, \"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else { LOG.log(Level.WARNING, \"found a type not known\"); } } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.log(Level.FINE, \"Model element {0} converted to {1}\", new Object[]{modelElement, figNode}); } else { LOG.log(Level.FINE, \"Dropped object NOT added {0}\", figNode); } return figNode; } ",
        "ins1PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAPartition(modelElement)) { figNode = new FigPartition(modelElement, bounds, settings); } else if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isACallState(modelElement)) { figNode = new FigCallState(modelElement, bounds, settings); } else if (Model.getFacade().isAObjectFlowState(modelElement)) { figNode = new FigObjectFlowState(modelElement, bounds, settings); } else if (Model.getFacade().isASubactivityState(modelElement)) { figNode = new FigSubactivityState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else { LOG.warn(\"found a type not known\"); } } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "ins2PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isAActionState(modelElement)) { figNode = new FigActionState(modelElement, bounds, settings); } else if (Model.getFacade().isAFinalState(modelElement)) { figNode = new FigFinalState(modelElement, bounds, settings); } else if (Model.getFacade().isAStubState(modelElement)) { figNode = new FigStubState(modelElement, bounds, settings); } else if (Model.getFacade().isASubmachineState(modelElement)) { figNode = new FigSubmachineState(modelElement, bounds, settings); } else if (Model.getFacade().isACompositeState(modelElement)) { figNode = new FigCompositeState(modelElement, bounds, settings); } else if (Model.getFacade().isASynchState(modelElement)) { figNode = new FigSynchState(modelElement, bounds, settings); } else if (Model.getFacade().isAState(modelElement)) { figNode = new FigSimpleState(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } else if (Model.getFacade().isAPseudostate(modelElement)) { Object kind = Model.getFacade().getKind(modelElement); if (kind == null) { LOG.warn(\"found a null type pseudostate\"); return null; } if (kind.equals(Model.getPseudostateKind().getInitial())) { figNode = new FigInitialState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getChoice())) { figNode = new FigBranchState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJunction())) { figNode = new FigJunctionState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getFork())) { figNode = new FigForkState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getJoin())) { figNode = new FigJoinState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getShallowHistory())) { figNode = new FigShallowHistoryState(modelElement, bounds, settings); } else if (kind.equals( Model.getPseudostateKind().getDeepHistory())) { figNode = new FigDeepHistoryState(modelElement, bounds, settings); } else { LOG.warn(\"found a type not known\"); } } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAClassifier(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof SequenceDiagram && col.contains( ((SequenceDiagram) diagram).getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.EMPTY_SET; } ",
        "ins1PreCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAClassifier(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof UMLSequenceDiagram && col.contains(((SequenceDiagramGraphModel) ((UMLSequenceDiagram) diagram).getGraphModel()) .getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.EMPTY_SET; } ",
        "ins2PreCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAOperation(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof UMLSequenceDiagram && col.contains( ( (SequenceDiagramGraphModel) ((UMLSequenceDiagram) diagram) .getGraphModel()) .getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.EMPTY_SET; } ",
        "label":0
    },
    {
        "ins1CurCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAOperation(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof SequenceDiagram && col.contains(((SequenceDiagram) diagram) .getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.emptySet(); } ",
        "ins1PreCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAOperation(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof UMLSequenceDiagram && col.contains( ( (SequenceDiagramGraphModel) ((UMLSequenceDiagram) diagram) .getGraphModel()) .getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.EMPTY_SET; } ",
        "ins2PreCode":" public Collection getChildren(Object parent) { if (Model.getFacade().isAClassifier(parent)) { Collection col = Model.getFacade().getCollaborations(parent); Set<ArgoDiagram> ret = new HashSet<ArgoDiagram>(); Project p = ProjectManager.getManager().getCurrentProject(); for (ArgoDiagram diagram : p.getDiagramList()) { if (diagram instanceof UMLSequenceDiagram && col.contains(((SequenceDiagramGraphModel) ((UMLSequenceDiagram) diagram).getGraphModel()) .getCollaboration())) { ret.add(diagram); } } return ret; } return Collections.EMPTY_SET; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-role\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-end-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(final Object modelElement, final String text) { try { parseMessage(modelElement, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.message\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(final Object umlMessage, final String text) { try { parseMessage(umlMessage, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.message\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(final Object modelElement, final String text) { try { parseMessage(modelElement, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.message\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { parseRole(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-role\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) { return NO_PROBLEM; } Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getDeepHistory()) && !Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getShallowHistory())) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); if (nOutgoing > 1) { return PROBLEM_FOUND; } return NO_PROBLEM; } ",
        "ins1PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) return NO_PROBLEM; Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getDeepHistory()) && !Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getShallowHistory())) return NO_PROBLEM; Collection outgoing = Model.getFacade().getOutgoings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); if (nOutgoing > 1) return PROBLEM_FOUND; return NO_PROBLEM; } ",
        "ins2PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) { return NO_PROBLEM; } Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getJoin())) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); Collection incoming = Model.getFacade().getIncomings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); int nIncoming = incoming == null ? 0 : incoming.size(); if (nOutgoing > 1) { return PROBLEM_FOUND; } if (nIncoming == 1) { return PROBLEM_FOUND; } return NO_PROBLEM; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) { return false; } ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); LOG.debug(\"offs=\" + offs.toString() + \" newOffs=\" + newOffs.toString() + \" res = \" + res); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) return false; ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); LOG.debug(\"offs=\" + offs.toString() + \" newOffs=\" + newOffs.toString() + \" res = \" + res); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) { return false; } ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) { return false; } ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); LOG.log(Level.FINE, \"offs={0} newOffs={1} res = {2}\", new Object[] { offs, newOffs, res }); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) { return false; } ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); LOG.debug(\"offs=\" + offs.toString() + \" newOffs=\" + newOffs.toString() + \" res = \" + res); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); Object dm = offs.get(0); if (!predicate(dm, dsgr)) { return false; } ListSet newOffs = computeOffenders(dm); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof SequenceDiagramGraphModel) { Object owner = ((SequenceDiagramGraphModel) gm).getOwner(); node = Model.getCollaborationsFactory().buildLifeline(owner); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"sequence diagram graph model\"); } return node; } ",
        "ins1PreCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof SequenceDiagramGraphModel) { Object collaboration = ((SequenceDiagramGraphModel) gm).getCollaboration(); node = Model.getCollaborationsFactory().buildClassifierRole( collaboration); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"sequence diagram graph model\"); } return node; } ",
        "ins2PreCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof CollabDiagramGraphModel) { Object collaboration = ((CollabDiagramGraphModel) gm).getHomeModel(); node = Model.getCollaborationsFactory().buildClassifierRole( collaboration); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"collaboration diagram graph model\"); } return node; } ",
        "label":0
    },
    {
        "ins1CurCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof CollabDiagramGraphModel) { Object collaboration = ((CollabDiagramGraphModel) gm).getOwner(); node = Model.getCollaborationsFactory().buildLifeline(collaboration); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"collaboration diagram graph model\"); } return node; } ",
        "ins1PreCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof CollabDiagramGraphModel) { Object collaboration = ((CollabDiagramGraphModel) gm).getHomeModel(); node = Model.getCollaborationsFactory().buildClassifierRole( collaboration); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"collaboration diagram graph model\"); } return node; } ",
        "ins2PreCode":" public Object makeNode() { Object node = null; Editor ce = Globals.curEditor(); GraphModel gm = ce.getGraphModel(); if (gm instanceof SequenceDiagramGraphModel) { Object owner = ((SequenceDiagramGraphModel) gm).getOwner(); node = Model.getCollaborationsFactory().buildLifeline(owner); } else { throw new IllegalStateException(\"Graphmodel is not a \" + \"sequence diagram graph model\"); } return node; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void addNode(Object node) { LOG.log(Level.FINE, \"adding class node!!\"); if (!canAddNode(node)) { return; } getNodes().add(node); if (Model.getFacade().isAModelElement(node) && (Model.getFacade().getNamespace(node) == null)) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node); } fireNodeAdded(node); } ",
        "ins1PreCode":" public void addNode(Object node) { LOG.debug(\"adding class node!!\"); if (!canAddNode(node)) { return; } getNodes().add(node); if (Model.getFacade().isAModelElement(node) && (Model.getFacade().getNamespace(node) == null)) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node); } fireNodeAdded(node); } ",
        "ins2PreCode":" public void addNode(Object node) { if (!canAddNode(node)) { return; } getNodes().add(node); if (Model.getFacade().isAModelElement(node) && Model.getFacade().getNamespace(node) == null) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node); } fireNodeAdded(node); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testGetFigTarget() { final Object owner = new Object(); final Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); ArgoDiagram diag = new ArgoDiagramImpl() { public Fig getContainingFig(Object obj) { if (obj == owner) return fig; return null; } public void encloserChanged(FigNode enclosed, FigNode oldEncloser, FigNode newEncloser) { } public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { return null; } }; Project p = ProjectManager.getManager().getCurrentProject(); p.addDiagram(diag); TargetManager.getInstance().setTarget(diag); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(owner); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetFigTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertTrue(targetRemovedCalled); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetAddedFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetAddedFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertTrue(!targetRemovedCalled); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(fig, TargetManager.getInstance().getFigTarget()); TargetManager.getInstance().addTarget(test); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetRemovedFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "ins1PreCode":" public void testGetFigTarget() { final Object owner = new Object(); final Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); ArgoDiagram diag = new ArgoDiagramImpl() { public Fig getContainingFig(Object obj) { if (obj == owner) return fig; return null; } public void encloserChanged(FigNode enclosed, FigNode oldEncloser, FigNode newEncloser) { } }; Project p = ProjectManager.getManager().getCurrentProject(); p.addDiagram(diag); TargetManager.getInstance().setTarget(diag); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(owner); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetFigTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertTrue(targetRemovedCalled); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetAddedFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetAddedFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertTrue(!targetRemovedCalled); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(fig, TargetManager.getInstance().getFigTarget()); TargetManager.getInstance().addTarget(test); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetRemovedFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "ins2PreCode":" public void testGetModelTarget() { Object owner = Model.getCoreFactory().buildClass(); Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(fig); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetModelTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTarget(fig); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetSetModelTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertTrue(targetRemovedCalled); targetSetModelTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); TargetManager.getInstance().setTarget(null); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetAddedModelTarget); TargetManager.getInstance().setTarget(null); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(fig); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetAddedModelTarget); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetAddedModelTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertTrue(!targetRemovedCalled); targetRemovedModelTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetRemovedModelTarget); TargetManager.getInstance().addTarget(test); targetRemovedModelTarget = null; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetRemovedModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void testGetFigTarget() { final Object owner = new Object(); final Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); ArgoDiagram diag = new ArgoDiagramImpl() { public Fig getContainingFig(Object obj) { if (obj == owner) { return fig; } return null; } public void encloserChanged(FigNode enclosed, FigNode oldEncloser, FigNode newEncloser) { } public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { return null; } }; Project p = ProjectManager.getManager().getCurrentProject(); p.addDiagram(diag); TargetManager.getInstance().setTarget(diag); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(owner); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetFigTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertTrue(targetRemovedCalled); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetAddedFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetAddedFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertTrue(!targetRemovedCalled); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(fig, TargetManager.getInstance().getFigTarget()); TargetManager.getInstance().addTarget(test); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetRemovedFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "ins1PreCode":" public void testGetFigTarget() { final Object owner = new Object(); final Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); ArgoDiagram diag = new ArgoDiagramImpl() { public Fig getContainingFig(Object obj) { if (obj == owner) return fig; return null; } public void encloserChanged(FigNode enclosed, FigNode oldEncloser, FigNode newEncloser) { } public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { return null; } }; Project p = ProjectManager.getManager().getCurrentProject(); p.addDiagram(diag); TargetManager.getInstance().setTarget(diag); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(owner); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetFigTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertTrue(targetRemovedCalled); targetSetFigTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetAddedFigTarget); TargetManager.getInstance().setTarget(null); targetAddedFigTarget = null; TargetManager.getInstance().addTarget(owner); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetAddedFigTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertTrue(!targetRemovedCalled); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(fig, TargetManager.getInstance().getFigTarget()); TargetManager.getInstance().addTarget(test); targetRemovedFigTarget = null; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetRemovedFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(fig, TargetManager.getInstance().getFigTarget()); assertEquals(fig, targetSetFigTarget); targetSetFigTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getFigTarget()); assertEquals(null, targetSetFigTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "ins2PreCode":" public void testGetModelTarget() { Object owner = Model.getCoreFactory().buildClass(); Fig fig = new FigRect(0, 0, 12, 12); fig.setOwner(owner); Object test = new Object(); List<Object> list1 = new ArrayList<Object>(); List<Object> list2 = new ArrayList<Object>(); list2.add(test); List<Object> list3 = new ArrayList<Object>(); list3.add(fig); list3.add(test); TargetListener listener = new TestTargetListener(); TargetManager.getInstance().addTargetListener(listener); targetSetModelTarget = null; TargetManager.getInstance().setTarget(null); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTarget(fig); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetSetModelTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(owner); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertTrue(targetRemovedCalled); targetSetModelTarget = null; TargetManager.getInstance().setTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); TargetManager.getInstance().setTarget(null); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetAddedModelTarget); TargetManager.getInstance().setTarget(null); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(fig); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetAddedModelTarget); targetAddedModelTarget = null; TargetManager.getInstance().addTarget(test); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetAddedModelTarget); targetRemovedCalled = false; TargetManager.getInstance().removeTarget(null); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertTrue(!targetRemovedCalled); targetRemovedModelTarget = null; TargetManager.getInstance().removeTarget(test); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetRemovedModelTarget); TargetManager.getInstance().addTarget(test); targetRemovedModelTarget = null; TargetManager.getInstance().removeTarget(fig); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetRemovedModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list1); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list3); assertEquals(owner, TargetManager.getInstance().getModelTarget()); assertEquals(owner, targetSetModelTarget); targetSetModelTarget = null; TargetManager.getInstance().setTargets(list2); assertEquals(null, TargetManager.getInstance().getModelTarget()); assertEquals(null, targetSetModelTarget); TargetManager.getInstance().removeTargetListener(listener); } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void doIt(Collection selected) { Object stereo = getTarget(); Set<Object> oldSet = new HashSet<Object>(getSelected()); Set toBeRemoved = new HashSet<Object>(oldSet); for (Object o : selected) { if (oldSet.contains(o)) { toBeRemoved.remove(o); } else { Model.getExtensionMechanismsHelper() .addBaseClass(stereo, o); } } for (Object o : toBeRemoved) { Model.getExtensionMechanismsHelper().removeBaseClass(stereo, o); } } ",
        "ins1PreCode":" protected void doIt(Collection selected) { Object state = getTarget(); assert (Model.getFacade().isAState(state)); Collection oldOnes = new ArrayList(Model.getFacade() .getDeferrableEvents(state)); Collection toBeRemoved = new ArrayList(oldOnes); for (Object o : selected) { if (oldOnes.contains(o)) { toBeRemoved.remove(o); } else { Model.getStateMachinesHelper().addDeferrableEvent(state, o); } } for (Object o : toBeRemoved) { Model.getStateMachinesHelper().removeDeferrableEvent(state, o); } } ",
        "ins2PreCode":" protected void doIt(Collection selected) { Object stereo = getTarget(); Set<Object> oldSet = new HashSet<Object>(getSelected()); Set toBeRemoved = new HashSet<Object>(oldSet); for (Object o : selected) { if (oldSet.contains(o)) { toBeRemoved.remove(o); } else { Model.getExtensionMechanismsHelper() .addBaseClass(stereo, o); } } for (Object o : toBeRemoved) { Model.getExtensionMechanismsHelper().removeBaseClass(stereo, o); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void rebuildModelList() { removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.log(Level.FINE, \"buildModelList threw exception for target \"+ getTarget() + \": \", exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins1PreCode":" private void rebuildModelList() { removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.debug(\"buildModelList threw exception for target \" + getTarget() + \": \" + exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins2PreCode":" private void rebuildModelList() { LOG.info(\"Rebuilding\"); removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.debug(\"buildModelList threw exception for target \" + getTarget() + \": \" + exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void rebuildModelList() { LOG.log(Level.INFO, \"Rebuilding\"); removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.log(Level.FINE, \"buildModelList threw exception for target \" + getTarget() + \": \" + exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins1PreCode":" private void rebuildModelList() { LOG.info(\"Rebuilding\"); removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.debug(\"buildModelList threw exception for target \" + getTarget() + \": \" + exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "ins2PreCode":" private void rebuildModelList() { removeAllElements(); buildingModel = true; try { buildModelList(); } catch (InvalidElementException exception) { LOG.debug(\"buildModelList threw exception for target \" + getTarget() + \": \" + exception); } finally { buildingModel = false; } if (getSize() > 0) { fireIntervalAdded(this, 0, getSize() - 1); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void doIt(Collection selected) { Object stereo = getTarget(); Set<Object> oldSet = new HashSet<Object>(getSelected()); Set toBeRemoved = new HashSet<Object>(oldSet); for (Object o : selected) { if (oldSet.contains(o)) { toBeRemoved.remove(o); } else { Model.getExtensionMechanismsHelper() .addBaseClass(stereo, o); } } for (Object o : toBeRemoved) { Model.getExtensionMechanismsHelper().removeBaseClass(stereo, o); } } ",
        "ins1PreCode":" protected void doIt(Collection selected) { Object state = getTarget(); assert (Model.getFacade().isAState(state)); Collection oldOnes = new ArrayList(Model.getFacade() .getDeferrableEvents(state)); Collection toBeRemoved = new ArrayList(oldOnes); for (Object o : selected) { if (oldOnes.contains(o)) { toBeRemoved.remove(o); } else { Model.getStateMachinesHelper().addDeferrableEvent(state, o); } } for (Object o : toBeRemoved) { Model.getStateMachinesHelper().removeDeferrableEvent(state, o); } } ",
        "ins2PreCode":" protected void doIt(Collection selected) { Object state = getTarget(); if (!Model.getFacade().isAState(state)) return; Collection oldOnes = new ArrayList(Model.getFacade() .getDeferrableEvents(state)); Collection toBeRemoved = new ArrayList(oldOnes); for (Object o : selected) { if (oldOnes.contains(o)) { toBeRemoved.remove(o); } else { Model.getStateMachinesHelper().addDeferrableEvent(state, o); } } for (Object o : toBeRemoved) { Model.getStateMachinesHelper().removeDeferrableEvent(state, o); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void doIt(Collection selected) { Object state = getTarget(); if (!Model.getFacade().isAState(state)) { return; } Collection oldOnes = new ArrayList(Model.getFacade() .getDeferrableEvents(state)); Collection toBeRemoved = new ArrayList(oldOnes); for (Object o : selected) { if (oldOnes.contains(o)) { toBeRemoved.remove(o); } else { Model.getStateMachinesHelper().addDeferrableEvent(state, o); } } for (Object o : toBeRemoved) { Model.getStateMachinesHelper().removeDeferrableEvent(state, o); } } ",
        "ins1PreCode":" protected void doIt(Collection selected) { Object state = getTarget(); if (!Model.getFacade().isAState(state)) return; Collection oldOnes = new ArrayList(Model.getFacade() .getDeferrableEvents(state)); Collection toBeRemoved = new ArrayList(oldOnes); for (Object o : selected) { if (oldOnes.contains(o)) { toBeRemoved.remove(o); } else { Model.getStateMachinesHelper().addDeferrableEvent(state, o); } } for (Object o : toBeRemoved) { Model.getStateMachinesHelper().removeDeferrableEvent(state, o); } } ",
        "ins2PreCode":" protected void doIt(Collection selected) { Object stereo = getTarget(); Set<Object> oldSet = new HashSet<Object>(getSelected()); Set toBeRemoved = new HashSet<Object>(oldSet); for (Object o : selected) { if (oldSet.contains(o)) { toBeRemoved.remove(o); } else { Model.getExtensionMechanismsHelper() .addBaseClass(stereo, o); } } for (Object o : toBeRemoved) { Model.getExtensionMechanismsHelper().removeBaseClass(stereo, o); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (\"\".equals(o) || CLEARED.equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(CLEARED)) { addElement(CLEARED); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins1PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && \"\".equals(o))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (!objects.contains(selectedObject)) { selectedObject = null; } if (isClearable && !elements.contains(\"\")) { addElement(\"\"); } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins2PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (int i = 0; i < objects.size(); i++) { Object o = objects.get(i); if (!elements.contains(o) && !(isClearable && \"\".equals(o))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (!objects.contains(selectedObject)) { selectedObject = null; } if (isClearable && !elements.contains(\"\")) { addElement(\"\"); } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (\"\".equals(o) || CLEARED.equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(CLEARED)) { addElement(CLEARED); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins1PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (int i = 0; i < objects.size(); i++) { Object o = objects.get(i); if (!elements.contains(o) && !(isClearable && \"\".equals(o))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (!objects.contains(selectedObject)) { selectedObject = null; } if (isClearable && !elements.contains(\"\")) { addElement(\"\"); } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins2PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (\"\".equals(o) || CLEARED.equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(CLEARED)) { addElement(CLEARED); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (o == null || \"\".equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(null)) { addElement(null); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins1PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (\"\".equals(o) || CLEARED.equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(CLEARED)) { addElement(CLEARED); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "ins2PreCode":" protected void setElements(Collection elements) { if (elements != null) { ArrayList toBeRemoved = new ArrayList(); for (Object o : objects) { if (!elements.contains(o) && !(isClearable && (\"\".equals(o) || CLEARED.equals(o)))) { toBeRemoved.add(o); } } removeAll(toBeRemoved); addAll(elements); if (isClearable && !elements.contains(CLEARED)) { addElement(CLEARED); } if (!objects.contains(selectedObject)) { selectedObject = null; } } else { throw new IllegalArgumentException(\"In setElements: may not set \" + \"elements to null collection\"); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected final void addElementListener(PropertyChangeListener listener, Object element) { if (Model.getUmlFactory().isRemoved(element)) { LOG.log(Level.WARNING, \"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, null}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element); } else { LOG.log(Level.WARNING, \"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins1PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, null}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element); } else { LOG.warn(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins2PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.log(Level.WARNING, \"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.log(Level.FINE, \"Attempted duplicate registration of event listener\" + \" - Element: {0} Listener: {1}\", new Object[]{element, listener}); } } ",
        "ins1PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element, String property) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, property}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element, property); } else { LOG.debug(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "ins2PreCode":" protected final void addElementListener(PropertyChangeListener listener, Object element) { if (Model.getUmlFactory().isRemoved(element)) { LOG.warn(\"Encountered deleted object during delete of \" + element); return; } Object[] entry = new Object[] {element, null}; if (!listeners.contains(entry)) { listeners.add(entry); Model.getPump().addModelEventListener(listener, element); } else { LOG.warn(\"Attempted duplicate registration of event listener\" + \" - Element: \" + element + \" Listener: \" + listener); } } ",
        "label":0
    },
    {
        "ins1CurCode":" static String generateExpression(Object expr) { if (Model.getFacade().isAExpression(expr)) { return generateUninterpreted( (String) Model.getFacade().getBody(expr)); } else if (Model.getFacade().isAConstraint(expr)) { return generateExpression(Model.getFacade().getBody(expr)); } return \"\"; } ",
        "ins1PreCode":" static String generateExpression(Object expr) { if (Model.getFacade().isAExpression(expr)) return generateUninterpreted( (String) Model.getFacade().getBody(expr)); else if (Model.getFacade().isAConstraint(expr)) return generateExpression(Model.getFacade().getBody(expr)); return \"\"; } ",
        "ins2PreCode":" private static String generateExpression(Object expr) { if (Model.getFacade().isAExpression(expr)) { return generateUninterpreted( (String) Model.getFacade().getBody(expr)); } else if (Model.getFacade().isAConstraint(expr)) { return generateExpression(Model.getFacade().getBody(expr)); } return \"\"; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(Object modelElement, String text) { try { parseAssociationName(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(Object modelElement, String text) { try { NotationUtilityUml.parseModelElement(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.association-name\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { parseObjectFlowState2(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.objectflowstate\"; Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void fireTargetRemoved(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetRemoved(targetEvent); } } catch (RuntimeException e) { LOG.warn(\"While calling targetRemoved for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); } } } ",
        "ins1PreCode":" private void fireTargetRemoved(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetRemoved(targetEvent); } } catch (RuntimeException e) { LOG.warn(\"While calling targetRemoved for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); e.printStackTrace(); } } } ",
        "ins2PreCode":" private void fireTargetAdded(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetAdded(targetEvent); } } catch (RuntimeException e) { LOG.error(\"While calling targetAdded for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); e.printStackTrace(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void fireTargetAdded(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetAdded(targetEvent); } } catch (RuntimeException e) { LOG.log(Level.SEVERE, \"While calling targetAdded for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); e.printStackTrace(); } } } ",
        "ins1PreCode":" private void fireTargetAdded(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetAdded(targetEvent); } } catch (RuntimeException e) { LOG.error(\"While calling targetAdded for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); e.printStackTrace(); } } } ",
        "ins2PreCode":" private void fireTargetRemoved(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetRemoved(targetEvent); } } catch (RuntimeException e) { LOG.warn(\"While calling targetRemoved for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void fireTargetRemoved(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetRemoved(targetEvent); } } catch (RuntimeException e) { LOG.log(Level.WARNING, \"While calling targetRemoved for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); } } } ",
        "ins1PreCode":" private void fireTargetRemoved(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetRemoved(targetEvent); } } catch (RuntimeException e) { LOG.warn(\"While calling targetRemoved for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); } } } ",
        "ins2PreCode":" private void fireTargetAdded(TargetEvent targetEvent) { Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) { try { if (listeners[i] == TargetListener.class) { ((TargetListener) listeners[i + 1]) .targetAdded(targetEvent); } } catch (RuntimeException e) { LOG.error(\"While calling targetAdded for \" + targetEvent + \" in \" + listeners[i + 1] + \" an error is thrown.\", e); e.printStackTrace(); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void updateListeners(Object oldOwner, Object newOwner) { if (isCompartmentVisible(Model.getMetaTypes().getAttribute())) { Set<Object[]> listeners = new HashSet<Object[]>(); if (newOwner != null) { listeners.add(new Object[] {newOwner, null}); for (Object stereotype : Model.getFacade().getStereotypes(newOwner)) { listeners.add(new Object[] {stereotype, null}); } for (Object feat : Model.getFacade().getFeatures(newOwner)) { listeners.add(new Object[] {feat, null}); for (Object stereotype : Model.getFacade().getStereotypes(feat)) { listeners.add(new Object[] {stereotype, null}); } if (Model.getFacade().isAOperation(feat)) { for (Object param : Model.getFacade().getParameters(feat)) { listeners.add(new Object[] {param, null}); } } } } updateElementListeners(listeners); } else { super.updateListeners(oldOwner, newOwner); } } ",
        "ins1PreCode":" protected void updateListeners(Object oldOwner, Object newOwner) { if (isAttributesVisible()) { Set<Object[]> listeners = new HashSet<Object[]>(); if (newOwner != null) { listeners.add(new Object[] {newOwner, null}); for (Object stereotype : Model.getFacade().getStereotypes(newOwner)) { listeners.add(new Object[] {stereotype, null}); } for (Object feat : Model.getFacade().getFeatures(newOwner)) { listeners.add(new Object[] {feat, null}); for (Object stereotype : Model.getFacade().getStereotypes(feat)) { listeners.add(new Object[] {stereotype, null}); } if (Model.getFacade().isAOperation(feat)) { for (Object param : Model.getFacade().getParameters(feat)) { listeners.add(new Object[] {param, null}); } } } } updateElementListeners(listeners); } else { super.updateListeners(oldOwner, newOwner); } } ",
        "ins2PreCode":" protected void updateListeners(Object oldOwner, Object newOwner) { Set<Object[]> listeners = new HashSet<Object[]>(); if (newOwner != null) { listeners.add(new Object[] {newOwner, null}); for (Object stereotype : Model.getFacade().getStereotypes(newOwner)) { listeners.add(new Object[] {stereotype, null}); } for (Object feat : Model.getFacade().getFeatures(newOwner)) { listeners.add(new Object[] {feat, null}); for (Object stereotype : Model.getFacade().getStereotypes(feat)) { listeners.add(new Object[] {stereotype, null}); } if (Model.getFacade().isAOperation(feat)) { for (Object param : Model.getFacade().getParameters(feat)) { listeners.add(new Object[] {param, null}); } } } } updateElementListeners(listeners); } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void addAll(Collection col) { if (col.size() == 0) { return; } Iterator it = col.iterator(); fireListEvents = false; int intervalStart = getSize() == 0 ? 0 : getSize() - 1; while (it.hasNext()) { Object o = it.next(); addElement(o); } fireListEvents = true; fireIntervalAdded(this, intervalStart, getSize() - 1); } ",
        "ins1PreCode":" protected void addAll(Collection col) { if (col.size() == 0) return; Iterator it = col.iterator(); fireListEvents = false; int intervalStart = getSize() == 0 ? 0 : getSize() - 1; while (it.hasNext()) { Object o = it.next(); addElement(o); } fireListEvents = true; fireIntervalAdded(this, intervalStart, getSize() - 1); } ",
        "ins2PreCode":" protected void addAll(Collection col) { if (col.size() == 0) return; Iterator it = col.iterator(); fireListEvents = false; int intervalStart = getSize() == 0 ? 0 : getSize() - 1; while (it.hasNext()) { Object o = it.next(); addElement(o); } fireListEvents = true; fireIntervalAdded(this, intervalStart, getSize() - 1); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(final Object multiplicityOwner, final String text) { try { setMultiplicity(multiplicityOwner, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.multiplicity\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(final Object multiplicityOwner, final String text) { try { parseMultiplicity(multiplicityOwner, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.multiplicity\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { NotationUtilityUml.parseModelElement(modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.node-modelelement\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" protected void setUp() throws Exception { super.setUp(); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); ModuleLoader2.addClass(SequenceDiagramModule.class.getName()); ModuleLoader2.doLoad(false); } ",
        "ins1PreCode":" protected void setUp() throws Exception { super.setUp(); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); } ",
        "ins2PreCode":" protected void setUp() throws Exception { super.setUp(); (new InitNotation()).init(); (new InitNotationUml()).init(); (new InitNotationJava()).init(); (new InitDiagramAppearanceUI()).init(); (new InitActivityDiagram()).init(); (new InitCollaborationDiagram()).init(); (new InitDeploymentDiagram()).init(); (new InitStateDiagram()).init(); (new InitClassDiagram()).init(); (new InitUseCaseDiagram()).init(); (new InitProfileSubsystem()).init(); } ",
        "label":0
    },
    {
        "ins1CurCode":" protected FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "ins1PreCode":" private FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "ins2PreCode":" private FigNode getNodePresentationFor(Layer lay, Object modelElement) { assert modelElement != null : \"A modelElement must be supplied\"; for (Object fig : lay.getContentsNoEdges()) { if (fig instanceof FigNode && modelElement.equals(((FigNode) fig).getOwner())) { return ((FigNode) fig); } } for (Object fig : lay.getContentsEdgesOnly()) { if (fig instanceof FigEdgeModelElement && modelElement.equals(((FigEdgeModelElement) fig) .getOwner())) { return ((FigEdgeModelElement) fig).getEdgePort(); } } return null; } ",
        "label":0
    },
    {
        "ins1CurCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigNode(modelElement, bounds, settings); } else if (Model.getFacade().isAPort(modelElement)) { figNode = new FigPort(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } return figNode; } ",
        "ins1PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigMNode(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } return figNode; } ",
        "ins2PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigMNode(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isANodeInstance(modelElement)) { figNode = new FigNodeInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAComponentInstance(modelElement)) { figNode = new FigComponentInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigMNode(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isANodeInstance(modelElement)) { figNode = new FigNodeInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAComponentInstance(modelElement)) { figNode = new FigComponentInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.log(Level.FINE, \"Model element {0} converted to {1}\", new Object[]{modelElement, figNode}); } else { LOG.log(Level.FINE, \"Dropped object NOT added {0}\", figNode); } return figNode; } ",
        "ins1PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigMNode(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isANodeInstance(modelElement)) { figNode = new FigNodeInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAComponentInstance(modelElement)) { figNode = new FigComponentInstance(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } if (figNode != null) { LOG.debug(\"Model element \" + modelElement + \" converted to \" + figNode); } else { LOG.debug(\"Dropped object NOT added \" + figNode); } return figNode; } ",
        "ins2PreCode":" public DiagramElement createDiagramElement( final Object modelElement, final Rectangle bounds) { FigNodeModelElement figNode = null; DiagramSettings settings = getDiagramSettings(); if (Model.getFacade().isANode(modelElement)) { figNode = new FigNode(modelElement, bounds, settings); } else if (Model.getFacade().isAPort(modelElement)) { figNode = new FigPort(modelElement, bounds, settings); } else if (Model.getFacade().isAAssociation(modelElement)) { figNode = createNaryAssociationNode(modelElement, bounds, settings); } else if (Model.getFacade().isAComponent(modelElement)) { figNode = new FigComponent(modelElement, bounds, settings); } else if (Model.getFacade().isAClass(modelElement)) { figNode = new FigClass(modelElement, bounds, settings); } else if (Model.getFacade().isAInterface(modelElement)) { figNode = new FigInterface(modelElement, bounds, settings); } else if (Model.getFacade().isAObject(modelElement)) { figNode = new FigObject(modelElement, bounds, settings); } else if (Model.getFacade().isAActor(modelElement)) { figNode = new FigActor(modelElement, bounds, settings); } else if (Model.getFacade().isAComment(modelElement)) { figNode = new FigComment(modelElement, bounds, settings); } return figNode; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean isChangedOnly() { String flags = Configuration.getString(Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); skipTokens(st, 1); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins1PreCode":" public boolean isChangedOnly() { String flags = Configuration.getString(Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins2PreCode":" public boolean isCreateDiagrams() { String flags = Configuration.getString( Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean isCreateDiagrams() { String flags = Configuration.getString( Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); skipTokens(st, 2); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins1PreCode":" public boolean isCreateDiagrams() { String flags = Configuration.getString( Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins2PreCode":" public boolean isChangedOnly() { String flags = Configuration.getString(Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void mousePressed(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.log(Level.FINE, \"Showing popup at {0},{1}\", new Object[]{e.getX(), e.getY()}); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "ins1PreCode":" public void mousePressed(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.debug(\"Showing popup at \" + e.getX() + \",\" + e.getY()); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "ins2PreCode":" public void mouseClicked(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.info(\"Showing popup at \" + e.getX() + \",\" + e.getY()); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void mouseClicked(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.log(Level.INFO, \"Showing popup at \" + e.getX() + \",\" + e.getY()); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "ins1PreCode":" public void mouseClicked(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.info(\"Showing popup at \" + e.getX() + \",\" + e.getY()); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "ins2PreCode":" public void mousePressed(MouseEvent e) { if (e.isPopupTrigger() && !Model.getModelManagementHelper().isReadOnly(getTarget())) { JPopupMenu popup = getPopupMenu(); if (popup.getComponentCount() > 0) { initActions(); LOG.debug(\"Showing popup at \" + e.getX() + \",\" + e.getY()); getPopupMenu().show(this, e.getX(), e.getY()); } e.consume(); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) { return NO_PROBLEM; } Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getDeepHistory()) && !Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getShallowHistory())) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); if (nOutgoing > 1) { return PROBLEM_FOUND; } return NO_PROBLEM; } ",
        "ins1PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) return NO_PROBLEM; Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getDeepHistory()) && !Model.getFacade().equalsPseudostateKind(k, Model.getPseudostateKind().getShallowHistory())) return NO_PROBLEM; Collection outgoing = Model.getFacade().getOutgoings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); if (nOutgoing > 1) return PROBLEM_FOUND; return NO_PROBLEM; } ",
        "ins2PreCode":" public boolean predicate2(Object dm, Designer dsgr) { if (!(Model.getFacade().isAPseudostate(dm))) { return NO_PROBLEM; } Object k = Model.getFacade().getKind(dm); if (!Model.getFacade().equalsPseudostateKind( k, Model.getPseudostateKind().getFork())) { return NO_PROBLEM; } Collection outgoing = Model.getFacade().getOutgoings(dm); Collection incoming = Model.getFacade().getIncomings(dm); int nOutgoing = outgoing == null ? 0 : outgoing.size(); int nIncoming = incoming == null ? 0 : incoming.size(); if (nIncoming > 1) { return PROBLEM_FOUND; } if (nOutgoing == 1) { return PROBLEM_FOUND; } return NO_PROBLEM; } ",
        "label":0
    },
    {
        "ins1CurCode":" private File saveProfile(String fn) { File theFile = null; PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize(\"action.deploy-profile\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(Translator.localize(\"filechooser.export\")); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { theFile = chooser.getSelectedFile(); if (theFile != null) { String name = theFile.getName(); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor(true, theFile, false); } } return theFile; } ",
        "ins1PreCode":" private File saveProfile(String fn) { File theFile = null; PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(\"Save Profile\"); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(\"Save\"); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { theFile = chooser.getSelectedFile(); if (theFile != null) { String name = theFile.getName(); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor( true, theFile, false); } } return theFile; } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize( \"action.export-project-as-xmi\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(Translator.localize( \"filechooser.export\")); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); String fn = Configuration.getString( PersistenceManager.KEY_PROJECT_NAME_PATH); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { File theFile = chooser.getSelectedFile(); if (theFile != null) { String name = theFile.getName(); Configuration.setString( PersistenceManager.KEY_PROJECT_NAME_PATH, PersistenceManager.getInstance().getBaseName( theFile.getPath())); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor( false, theFile, false); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" private File saveProfile(String fn) { File theFile = null; PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize(\"action.deploy-profile\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(Translator.localize(\"filechooser.export\")); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { theFile = chooser.getSelectedFile(); if (theFile != null) { Model.getExtensionMechanismsHelper().makeProfileApplicable( undeployedProfile); String name = theFile.getName(); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor(true, theFile, false); } } return theFile; } ",
        "ins1PreCode":" private File saveProfile(String fn) { File theFile = null; PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize(\"action.deploy-profile\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(Translator.localize(\"filechooser.export\")); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { theFile = chooser.getSelectedFile(); if (theFile != null) { String name = theFile.getName(); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor(true, theFile, false); } } return theFile; } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { PersistenceManager pm = PersistenceManager.getInstance(); JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize( \"action.export-project-as-xmi\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setApproveButtonText(Translator.localize( \"filechooser.export\")); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); String fn = Configuration.getString( PersistenceManager.KEY_PROJECT_NAME_PATH); if (fn.length() > 0) { fn = PersistenceManager.getInstance().getBaseName(fn); chooser.setSelectedFile(new File(fn)); } int result = chooser.showSaveDialog(ArgoFrame.getFrame()); if (result == JFileChooser.APPROVE_OPTION) { File theFile = chooser.getSelectedFile(); if (theFile != null) { String name = theFile.getName(); Configuration.setString( PersistenceManager.KEY_PROJECT_NAME_PATH, PersistenceManager.getInstance().getBaseName( theFile.getPath())); name = pm.fixXmiExtension(name); theFile = new File(theFile.getParent(), name); ProjectBrowser.getInstance().trySaveWithProgressMonitor( false, theFile, false); } } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); PersistenceManager pm = PersistenceManager.getInstance(); if (!ProjectBrowser.getInstance().askConfirmationAndSave()) { return; } JFileChooser chooser = null; if (p != null && p.getURI() != null) { File file = new File(p.getURI()); if (file.getParentFile() != null) { chooser = new JFileChooser(file.getParent()); } } else { chooser = new JFileChooser(); } if (chooser == null) { chooser = new JFileChooser(); } chooser.setDialogTitle( Translator.localize(\"filechooser.open-project\")); chooser.setAcceptAllFileFilterUsed(false); chooser.setFileView(ProjectFileView.getInstance()); pm.setOpenFileChooserFilter(chooser); String fn = Configuration.getString( PersistenceManager.KEY_OPEN_PROJECT_PATH); if (fn.length() > 0) { chooser.setSelectedFile(new File(fn)); } int retval = chooser.showOpenDialog(ArgoFrame.getFrame()); if (retval == JFileChooser.APPROVE_OPTION) { File theFile = chooser.getSelectedFile(); if (!theFile.canRead()) { FileFilter ffilter = chooser.getFileFilter(); if (ffilter instanceof AbstractFilePersister) { AbstractFilePersister afp = (AbstractFilePersister) ffilter; File m = new File(theFile.getPath() + \".\" + afp.getExtension()); if (m.canRead()) { theFile = m; } } if (!theFile.canRead()) { File n = new File(theFile.getPath() + \".\" + pm.getDefaultExtension()); if (n.canRead()) { theFile = n; } } } if (theFile != null) { Configuration.setString( PersistenceManager.KEY_OPEN_PROJECT_PATH, theFile.getPath()); ProjectBrowser.getInstance().loadProjectWithProgressMonitor( theFile, true); } } } ",
        "ins1PreCode":" public void actionPerformed(ActionEvent e) { super.actionPerformed(e); Project p = ProjectManager.getManager().getCurrentProject(); PersistenceManager pm = PersistenceManager.getInstance(); if (!ProjectBrowser.getInstance().askConfirmationAndSave()) { return; } JFileChooser chooser = null; if (p != null && p.getURI() != null) { File file = new File(p.getURI()); if (file.getParentFile() != null) { chooser = new JFileChooser(file.getParent()); } } else { chooser = new JFileChooser(); } if (chooser == null) { chooser = new JFileChooser(); } chooser.setDialogTitle( Translator.localize(\"filechooser.open-project\")); chooser.setAcceptAllFileFilterUsed(false); chooser.setFileView(ProjectFileView.getInstance()); pm.setOpenFileChooserFilter(chooser); String fn = Configuration.getString( PersistenceManager.KEY_OPEN_PROJECT_PATH); if (fn.length() > 0) { chooser.setSelectedFile(new File(fn)); } int retval = chooser.showOpenDialog(ArgoFrame.getInstance()); if (retval == JFileChooser.APPROVE_OPTION) { File theFile = chooser.getSelectedFile(); if (!theFile.canRead()) { FileFilter ffilter = chooser.getFileFilter(); if (ffilter instanceof AbstractFilePersister) { AbstractFilePersister afp = (AbstractFilePersister) ffilter; File m = new File(theFile.getPath() + \".\" + afp.getExtension()); if (m.canRead()) { theFile = m; } } if (!theFile.canRead()) { File n = new File(theFile.getPath() + \".\" + pm.getDefaultExtension()); if (n.canRead()) { theFile = n; } } } if (theFile != null) { Configuration.setString( PersistenceManager.KEY_OPEN_PROJECT_PATH, theFile.getPath()); ProjectBrowser.getInstance().loadProjectWithProgressMonitor( theFile, true); } } } ",
        "ins2PreCode":" public void actionPerformed(ActionEvent e) { ProjectBrowser pb = ProjectBrowser.getInstance(); Project p = ProjectManager.getManager().getCurrentProject(); PersistenceManager pm = PersistenceManager.getInstance(); if (!ProjectBrowser.getInstance().askConfirmationAndSave()) { return; } JFileChooser chooser = null; if (p != null && p.getURI() != null) { File file = new File(p.getURI()); if (file.getParentFile() != null) { chooser = new JFileChooser(file.getParent()); } } else { chooser = new JFileChooser(); } if (chooser == null) { chooser = new JFileChooser(); } chooser.setDialogTitle( Translator.localize(\"filechooser.import-xmi\")); chooser.setFileView(ProjectFileView.getInstance()); chooser.setAcceptAllFileFilterUsed(true); pm.setXmiFileChooserFilter(chooser); String fn = Configuration.getString( PersistenceManager.KEY_IMPORT_XMI_PATH); if (fn.length() > 0) { chooser.setSelectedFile(new File(fn)); } int retval = chooser.showOpenDialog(pb); if (retval == JFileChooser.APPROVE_OPTION) { File theFile = chooser.getSelectedFile(); if (!theFile.canRead()) { FileFilter ffilter = chooser.getFileFilter(); if (ffilter instanceof AbstractFilePersister) { AbstractFilePersister afp = (AbstractFilePersister) ffilter; File m = new File(theFile.getPath() + \".\" + afp.getExtension()); if (m.canRead()) { theFile = m; } } } Configuration.setString( PersistenceManager.KEY_IMPORT_XMI_PATH, theFile.getPath()); ProjectBrowser.getInstance().loadProjectWithProgressMonitor( theFile, true); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean isChangedOnly() { String flags = Configuration.getString(Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); skipTokens(st, 1); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins1PreCode":" public boolean isChangedOnly() { String flags = Configuration.getString(Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens()) st.nextToken(); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "ins2PreCode":" public boolean isDescend() { String flags = Configuration.getString( Argo.KEY_IMPORT_GENERAL_SETTINGS_FLAGS); if (flags != null && flags.length() > 0) { StringTokenizer st = new StringTokenizer(flags, \",\"); if (st.hasMoreTokens() && st.nextToken().equals(\"false\")) { return false; } } return true; } ",
        "label":0
    },
    {
        "ins1CurCode":" public UMLTextArea(UMLPlainTextDocument doc) { super(doc); setFont(LookAndFeelMgr.getInstance().getStandardFont()); addCaretListener(ActionCopy.getInstance()); addCaretListener(ActionCut.getInstance()); addCaretListener(ActionPaste.getInstance()); addFocusListener(ActionPaste.getInstance()); } ",
        "ins1PreCode":" public UMLTextArea(UMLDocument doc) { super(doc); setFont(LookAndFeelMgr.getInstance().getStandardFont()); addCaretListener(ActionCopy.getInstance()); addCaretListener(ActionCut.getInstance()); addCaretListener(ActionPaste.getInstance()); addFocusListener(ActionPaste.getInstance()); } ",
        "ins2PreCode":" public UMLTextArea2(UMLDocument doc) { super(doc); setFont(LookAndFeelMgr.getInstance().getStandardFont()); addCaretListener(ActionCopy.getInstance()); addCaretListener(ActionCut.getInstance()); addCaretListener(ActionPaste.getInstance()); addFocusListener(ActionPaste.getInstance()); } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    },
    {
        "ins1CurCode":" public void removeAnnotatedElement(final Object comment, final Object annotatedElement) { if (!(annotatedElement instanceof Element)) { throw new IllegalArgumentException( \"annotatedElement must be instance of Element\"); } if (!(comment instanceof Comment)) { throw new IllegalArgumentException( \"comment must be instance of Comment\"); } RunnableClass run = new RunnableClass() { public void run() { ((Comment) comment).getAnnotatedElements().remove( (Element) annotatedElement); } }; editingDomain.getCommandStack().execute( new ChangeCommand( modelImpl, run, \"Remove the link between the comment # \" + \"and the element #\", comment, annotatedElement)); } ",
        "ins1PreCode":" public void removeAnnotatedElement(final Object comment, final Object annotatedElement) { if (!(annotatedElement instanceof Element)) { throw new IllegalArgumentException( \"annotatedElement must be instance of Element\"); } if (!(comment instanceof Comment)) { throw new IllegalArgumentException( \"comment must be instance of Comment\"); } RunnableClass run = new RunnableClass() { public void run() { ((Comment) comment).getAnnotatedElements().remove( (Element) annotatedElement); } }; editingDomain.getCommandStack().execute( new ChangeCommand( modelImpl, run, \"Remove the link between the comment # and the element #\", comment, annotatedElement)); } ",
        "ins2PreCode":" public void addAnnotatedElement(final Object comment, final Object annotatedElement) { if (!(annotatedElement instanceof Element)) { throw new IllegalArgumentException( \"annotatedElement must be instance of Element\"); } if (!(comment instanceof Comment)) { throw new IllegalArgumentException( \"comment must be instance of Comment\"); } RunnableClass run = new RunnableClass() { public void run() { ((Comment) comment).getAnnotatedElements().add( (Element) annotatedElement); } }; editingDomain.getCommandStack().execute( new ChangeCommand( modelImpl, run, \"Add the comment # to the element #\", comment, annotatedElement)); } ",
        "label":0
    },
    {
        "ins1CurCode":" public void parse(final Object umlMessage, final String text) { try { parseMessage(umlMessage, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.message\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins1PreCode":" public void parse(final Object modelElement, final String text) { try { parseMessage(modelElement, text); } catch (ParseException pe) { final String msg = \"statusmsg.bar.error.parsing.message\"; final Object[] args = {pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "ins2PreCode":" public void parse(Object modelElement, String text) { try { parseAttributeFig(Model.getFacade().getOwner(modelElement), modelElement, text); } catch (ParseException pe) { String msg = \"statusmsg.bar.error.parsing.attribute\"; Object[] args = { pe.getLocalizedMessage(), Integer.valueOf(pe.getErrorOffset()), }; ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, Translator.messageFormat(msg, args))); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins1PreCode":" public void setBody(String body) { boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins2PreCode":" public void setBody(String body) { boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "label":0
    },
    {
        "ins1CurCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getFacade().getBody(expression).toString(); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins1PreCode":" public void setBody(String body) { Object expression = getExpression(); boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "ins2PreCode":" public void setBody(String body) { boolean mustChange = true; if (expression != null) { Object oldValue = Model.getDataTypesHelper().getBody(expression); if (oldValue != null && oldValue.equals(body)) { mustChange = false; } } if (mustChange) { String lang = null; if (expression != null) { lang = Model.getDataTypesHelper().getLanguage(expression); } if (lang == null) { lang = EMPTYSTRING; } setExpression(lang, body); } } ",
        "label":0
    },
    {
        "ins1CurCode":" private void initializeSimpleState() { cover = new FigRRect(getInitialX(), getInitialY(), getInitialWidth(), getInitialHeight(), LINE_COLOR, FILL_COLOR); getBigPort().setLineWidth(0); divider = new FigLine(getInitialX(), getInitialY() + 2 + getNameFig().getBounds().height + 1, getInitialWidth() - 1, getInitialY() + 2 + getNameFig().getBounds().height + 1, LINE_COLOR); addFig(getBigPort()); addFig(cover); addFig(getNameFig()); addFig(divider); addFig(getInternal()); Rectangle r = getBounds(); setBounds(r.x, r.y, r.width, r.height); } ",
        "ins1PreCode":" private void initializeSimpleState() { cover = new FigRRect(getInitialX(), getInitialY(), getInitialWidth(), getInitialHeight(), Color.black, Color.white); getBigPort().setLineWidth(0); divider = new FigLine(getInitialX(), getInitialY() + 2 + getNameFig().getBounds().height + 1, getInitialWidth() - 1, getInitialY() + 2 + getNameFig().getBounds().height + 1, Color.black); addFig(getBigPort()); addFig(cover); addFig(getNameFig()); addFig(divider); addFig(getInternal()); Rectangle r = getBounds(); setBounds(r.x, r.y, r.width, r.height); } ",
        "ins2PreCode":" private void initFigs() { cover = new FigRRect(getInitialX(), getInitialY(), getInitialWidth(), getInitialHeight(), LINE_COLOR, FILL_COLOR); getBigPort().setLineWidth(0); divider = new FigLine(getInitialX(), getInitialY() + 2 + getNameFig().getBounds().height + 1, getInitialWidth() - 1, getInitialY() + 2 + getNameFig().getBounds().height + 1, LINE_COLOR); addFig(getBigPort()); addFig(cover); addFig(getNameFig()); addFig(divider); addFig(getInternal()); setBounds(getBounds()); } ",
        "label":0
    },
    {
        "ins1CurCode":" public ListSet computeOffenders(UMLDeploymentDiagram dd) { Collection figs = dd.getLayer().getContents(); ListSet offs = null; for (Object obj : figs) { if (!(obj instanceof FigMNode)) { continue; } FigMNode fn = (FigMNode) obj; if (fn.getEnclosingFig() != null) { if (offs == null) { offs = new ListSet(); offs.add(dd); } offs.add(fn); } } return offs; } ",
        "ins1PreCode":" public ListSet computeOffenders(UMLDeploymentDiagram dd) { Collection figs = dd.getLayer().getContents(); ListSet offs = null; for (Object obj : figs) { if (!(obj instanceof FigMNode)) continue; FigMNode fn = (FigMNode) obj; if (fn.getEnclosingFig() != null) { if (offs == null) { offs = new ListSet(); offs.add(dd); } offs.add(fn); } } return offs; } ",
        "ins2PreCode":" public ListSet computeOffenders(UMLDeploymentDiagram dd) { Collection figs = dd.getLayer().getContents(); ListSet offs = null; for (Object obj : figs) { if (!(obj instanceof FigNodeInstance)) { continue; } FigNodeInstance fn = (FigNodeInstance) obj; if (fn.getEnclosingFig() != null) { if (offs == null) { offs = new ListSet(); offs.add(dd); } offs.add(fn); } } return offs; } ",
        "label":0
    },
    {
        "ins1CurCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins1PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) return false; ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "ins2PreCode":" public boolean stillValid(ToDoItem i, Designer dsgr) { if (!isActive()) { return false; } ListSet offs = i.getOffenders(); UMLDeploymentDiagram dd = (UMLDeploymentDiagram) offs.get(0); ListSet newOffs = computeOffenders(dd); boolean res = offs.equals(newOffs); return res; } ",
        "label":0
    }
]